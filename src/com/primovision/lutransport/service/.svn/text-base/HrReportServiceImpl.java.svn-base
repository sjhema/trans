package com.primovision.lutransport.service;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import java.util.Date;

import java.util.Calendar;
import java.util.Date;

import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.collections.comparators.ComparatorChain;
import org.apache.commons.lang.StringUtils;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeConstants;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.primovision.lutransport.controller.hr.LeaveBalanceController;
import com.primovision.lutransport.core.dao.GenericDAO;
import com.primovision.lutransport.core.tags.StaticDataUtil;
import com.primovision.lutransport.core.util.DateUtil;
import com.primovision.lutransport.core.util.MathUtil;
import com.primovision.lutransport.core.util.ReportDateUtil;
import com.primovision.lutransport.model.BillingRate;
import com.primovision.lutransport.model.Driver;
import com.primovision.lutransport.model.Invoice;
import com.primovision.lutransport.model.Location;
import com.primovision.lutransport.model.SearchCriteria;
import com.primovision.lutransport.model.Terminal;
import com.primovision.lutransport.model.Ticket;
import com.primovision.lutransport.model.hr.Attendance;
import com.primovision.lutransport.model.hr.DriverPayRate;
import com.primovision.lutransport.model.hr.EmpBonusTypesList;
//import com.primovision.lutransport.model.hr.Driver;
import com.primovision.lutransport.model.hr.EmployeeBonus;
import com.primovision.lutransport.model.hr.HolidayType;
import com.primovision.lutransport.model.hr.HourlyPayrollInvoice;
import com.primovision.lutransport.model.hr.HourlyRate;
import com.primovision.lutransport.model.hr.LeaveCurrentBalance;
import com.primovision.lutransport.model.hr.MiscellaneousAmount;
import com.primovision.lutransport.model.hr.Ptod;
import com.primovision.lutransport.model.hr.PtodRate;
import com.primovision.lutransport.model.hr.Ptodapplication;
import com.primovision.lutransport.model.hr.TimeSheet;
import com.primovision.lutransport.model.hr.WeeklySalary;
import com.primovision.lutransport.model.hrreport.DriverPay;
import com.primovision.lutransport.model.hrreport.DriverPayHistoryInput;
import com.primovision.lutransport.model.hrreport.DriverPayWrapper;
import com.primovision.lutransport.model.hrreport.DriverPayroll;
import com.primovision.lutransport.model.hrreport.EmployeeBonusInput;
import com.primovision.lutransport.model.hrreport.EmployeeBonusWrapper;
import com.primovision.lutransport.model.hrreport.EmployeeInput;
import com.primovision.lutransport.model.hrreport.EmployeePayrollInput;
import com.primovision.lutransport.model.hrreport.EmployeePayrollWrapper;
import com.primovision.lutransport.model.hrreport.EmployeeWrapper;
import com.primovision.lutransport.model.hrreport.HourlyPayrollInvoiceDetails;
import com.primovision.lutransport.model.hrreport.PayChexDetail;
import com.primovision.lutransport.model.hrreport.ProbationReportInput;
import com.primovision.lutransport.model.hrreport.PtodApplicationInput;
import com.primovision.lutransport.model.hrreport.RemainingLeaveInput;
import com.primovision.lutransport.model.hrreport.SalaryDetail;
import com.primovision.lutransport.model.hrreport.TimeSheetInput;
import com.primovision.lutransport.model.hrreport.TimeSheetWrapper;
import com.primovision.lutransport.model.hrreport.TimeSheetWrapperDetail;
import com.primovision.lutransport.model.hrreport.WeeklyPay;
import com.primovision.lutransport.model.hrreport.WeeklyPayDetail;
import com.primovision.lutransport.model.hrreport.WeeklypayWrapper;
import com.primovision.lutransport.model.report.Billing;
import com.primovision.lutransport.model.report.BillingWrapper;

/**
 * @author kishor
 *
 */
@Transactional(readOnly = false)
public class HrReportServiceImpl implements HrReportService {

	
	public static SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy");
	public static SimpleDateFormat mysqldf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

	@Autowired
	private GenericDAO genericDAO;

	public void setGenericDAO(GenericDAO genericDAO) {
		this.genericDAO = genericDAO;
	}

	/* (non-Javadoc)
	 * @see com.primovision.lutransport.service.HrReportService#generateDriverPayReport(com.primovision.lutransport.model.SearchCriteria)
	 */
	@Override
	public DriverPayWrapper generateDriverPayReport(SearchCriteria criteria) {
		// TODO Auto-generated method stub
		Map criterias = new HashMap();
		List<String> str = new ArrayList<String>();
		int errorCount = 0;
		Map<String, Double> map=new HashMap<String, Double>();
		Map<String, Integer> map1=new HashMap<String, Integer>();
		String payrollDate=(String) criteria.getSearchMap().get("payrollDate");
		String driverid=(String) criteria.getSearchMap().get("driver");
		String frombatch=(String) criteria.getSearchMap().get("fromDate");
		String tobatch=(String) criteria.getSearchMap().get("toDate");
		String company=(String) criteria.getSearchMap().get("company");
		String terminal=(String) criteria.getSearchMap().get("terminal");
		 String expire= (String) criteria.getSearchMap().get("expire");
		 String status=(String)criteria.getSearchMap().get("pay");
		 String sta=(String)criteria.getSearchMap().get("stat");
		 String driversmul=(String)criteria.getSearchMap().get("driversmul");
		 if(!StringUtils.isEmpty(status)){
			 status="1";
		 }else{
			 status="2";
		 }
		frombatch=ReportDateUtil.getFromDate(frombatch);
		tobatch=ReportDateUtil.getFromDate(tobatch);		
		
		payrollDate=ReportDateUtil.getFromDate(payrollDate);
		 String sum= (String) criteria.getSearchMap().get("summary");
		 Location companylocation=null;
		 Location terminallocation=null;
		 String driverIds="";
		 if(!StringUtils.isEmpty(company)){
		    companylocation=genericDAO.getById(Location.class, Long.parseLong(company));
		 }
		 if(!StringUtils.isEmpty(terminal)){
			    terminallocation=genericDAO.getById(Location.class, Long.parseLong(terminal));
			}
		 
		 if(!StringUtils.isEmpty(company) && StringUtils.isEmpty(driverid)){
			 Map drivercriteria = new HashMap();
			 drivercriteria.clear();
			 drivercriteria.put("company.id",companylocation.getId());
			 List<Driver> drivers = genericDAO.findByCriteria(Driver.class, drivercriteria);
			 for(Driver driverObj:drivers){
				 if(driverIds.equals(""))
					 driverIds = driverObj.getId().toString();
				else
					driverIds = driverIds +","+driverObj.getId().toString();
			 }
		}
		 
		Driver driver=null;
		List<Driver> drivers=null;
		/*if(!StringUtils.isEmpty(driverid)){
		Driver employee= genericDAO.getById(Driver.class,Long.parseLong(driverid));
		criterias.put("fullName",employee.getFullName());
	    Driver driver=genericDAO.getByCriteria(Driver.class, criterias);
		}*/
	    StringBuffer query=new StringBuffer("");
	    if(StringUtils.isEmpty(sta)){
	    	query.append("select obj from Ticket obj where obj.status=1 and obj.payRollStatus="+status+"and  obj.billBatch>='"+frombatch+
		"' and obj.billBatch<='"+tobatch+"'");
	    }else{
	    	query.append("select obj from Ticket obj where obj.status=1 and  obj.payRollStatus=1 and obj.billBatch>='"+frombatch+
	    			"' and obj.billBatch<='"+tobatch+"'");
	    }
        if(!StringUtils.isEmpty(driverid)){        	
        	query.append(" and obj.driver.fullName='"+driverid+"'");
        }
        
        if(!StringUtils.isEmpty(company) && !StringUtils.isEmpty(driverid)){
        	query.append(" and obj.driver.fullName='"+driverid+"'");
        }
        else if(!StringUtils.isEmpty(company) && StringUtils.isEmpty(driverid)){
        	query.append(" and obj.driver in (").append(driverIds).append(")");
        }
       
        if(!StringUtils.isEmpty(terminal)){
            query.append(" and obj.terminal="+terminal);
        }
        if(!StringUtils.isEmpty(driversmul)){
        	query.append(" and obj.driver not in ("+driversmul+")");
        }
        
       /* if(StringUtils.isEmpty(driverid))*/
        if(StringUtils.contains(sum, "true")){
        	StringBuffer driquery=new StringBuffer("");
        	driquery.append("select DISTINCT(obj.driver.fullName) from Ticket obj where obj.status=1 and obj.payRollStatus="+status+" and  obj.billBatch>='"+frombatch+
   		"' and obj.billBatch<='"+tobatch+"' ");
        	
        	 if(!StringUtils.isEmpty(terminal)){
        		 driquery.append(" and obj.terminal="+terminal);
                 }
        	 
             
             if(!StringUtils.isEmpty(company) && !StringUtils.isEmpty(driverid)){
            	 driquery.append(" and obj.driver.fullName='"+driverid+"'");
             }
             else if(!StringUtils.isEmpty(company) && StringUtils.isEmpty(driverid)){
            	 driquery.append(" and obj.driver in (").append(driverIds).append(")");
             }
             
             if(!StringUtils.isEmpty(driverid)){        	
        		 driquery.append(" and obj.driver.fullName='"+driverid+"'");
             }
             
        	 if(!StringUtils.isEmpty(driversmul)){
        		 driquery.append(" and obj.driver not in ("+driversmul+")");
             }
        	driquery.append(" order by obj.driver.fullName");
        	System.out.println("******** Driver query is "+ driquery.toString());
            drivers=genericDAO.executeSimpleQuery(driquery.toString());
            Map criti = new HashMap();
           
	        for(int i=0;i<drivers.size();i++){	
	        	
	        	
	        	String driverFullName = String.valueOf(drivers.get(i));	
	        	criti.clear();
	        	criti.put("fullName",driverFullName);
	        	Driver driver2 = genericDAO.getByCriteria(Driver.class, criti);
           	 map.put(driver2.getFullName(),0.0);
           	 map1.put(driver2.getFullName(),0);
            }
          }
        query.append(" group by obj.origin,obj.destination");
        if(StringUtils.isEmpty(driverid)){
        	query.append(",obj.driver.fullName");
        }
        query.append(" order by obj.driver.fullName asc, obj.origin.name ,obj.destination.name asc");
        System.out.println("\n query-->"+query);
		List<Ticket> tickets=genericDAO.executeSimpleQuery(query.toString());
		DriverPayWrapper wrapper=new DriverPayWrapper();
		List<DriverPay> summarys=new ArrayList<DriverPay>();
		Map<String,Double> sumAmounts = new HashMap<String,Double>();
		wrapper.setDriverPays(summarys);
		double sumAmount=0.0;
		int totalcount=0;
		boolean expiredRate = false;
		List<String> driverNames = new ArrayList<String>();
		for(Ticket ticket:tickets){
			
			driverNames.add(ticket.getDriver().getFullName());
			
			StringBuffer countquery=new StringBuffer("");
			/*String*/ countquery.append("select count(obj) from Ticket obj where obj.status=1 and  obj.billBatch>='"+frombatch+
		    "' and obj.billBatch<='"+tobatch+"'  and obj.origin="+ticket.getOrigin().getId()+" and obj.destination="+ticket.getDestination().getId());
			 if(!StringUtils.isEmpty(driverid)){
				 countquery.append("and obj.driver.fullName='"+driverid+"'");
			 }
			 else{
				 countquery.append("and obj.driver.fullName='"+ticket.getDriver().getFullName()+"'");
			 }
			 if(!StringUtils.isEmpty(driversmul)){
				 countquery.append(" and obj.driver not in ("+driversmul+")");
		     }
			 Long recordCount = (Long) genericDAO.getEntityManager()
			.createQuery(countquery.toString()).getSingleResult();
			 
			 
			 StringBuffer ticketquery=new StringBuffer("");
				/*String*/ ticketquery.append("select obj from Ticket obj where obj.status=1 and  obj.billBatch>='"+frombatch+
			    "' and obj.billBatch<='"+tobatch+"'  and obj.origin="+ticket.getOrigin().getId()+" and obj.destination="+ticket.getDestination().getId());
				 if(!StringUtils.isEmpty(driverid)){
					 ticketquery.append("and obj.driver.fullName='"+driverid+"'");
				 }
				 else{
					 ticketquery.append("and obj.driver.fullName='"+ticket.getDriver().getFullName()+"'");
				 }
				 if(!StringUtils.isEmpty(driversmul)){
					 ticketquery.append(" and obj.driver not in ("+driversmul+")");
			     }
			 List<Ticket> filtrdtickets = genericDAO.executeSimpleQuery(ticketquery.toString());  
			 int sundaycount = 0;
			 for(Ticket ticketObj : filtrdtickets) {
				 LocalDate unloadDate = new LocalDate(ticketObj.getUnloadDate());
				 
				 if(unloadDate.getDayOfWeek() == DateTimeConstants.SUNDAY)
					 sundaycount++;
			 }
			 
			
			 
			double amount=0.0;
			double sundayAmount = 0.0;
			boolean calculateOtherRow =  true;
			
			if(sundaycount > 0){
				DriverPay pay=new DriverPay();
				int diffCount = Integer.parseInt(recordCount.toString()) - sundaycount;
				pay.setNoOfLoad(sundaycount);
				if(diffCount == 0.0){
					calculateOtherRow = false;
				}
				pay.setOrigin(ticket.getOrigin().getName());
				pay.setDestination(ticket.getDestination().getName());
				if(ticket.getCompanyLocation()!=null)
					pay.setCompanyname(ticket.getCompanyLocation().getName());
				else
					pay.setCompanyname("");
				
				if(ticket.getDriver().getTerminal()!=null)
					pay.setTerminalname(ticket.getDriver().getTerminal().getName());
				else
					pay.setTerminalname("");
				
				try{
					Long destination_id;
					Location location = genericDAO.getById(Location.class, ticket
							.getDestination().getId());
					if (location.getName().equalsIgnoreCase("grows")
							|| location.getName().equalsIgnoreCase("tullytown")) {
	                        destination_id = 91l;
	               } else {
						destination_id = ticket.getDestination().getId();
					}
					String rateQuery = "select obj from DriverPayRate obj where obj.transferStation='"
							+ ticket.getOrigin().getId() + "' and obj.landfill='"
							/* + ticket.getDestination().getId() + "'"; */
							+ destination_id + "'";
				List<DriverPayRate>	fs = genericDAO.executeSimpleQuery(rateQuery);
				DriverPayRate payRate = null;
				if (fs != null && fs.size() > 0) {
					for (DriverPayRate rate : fs) {
						if (rate.getRateUsing() == null) {
							payRate = rate;
							break;
						} else if (rate.getRateUsing() == 1) {
							// calculation for a load date
							if ((ticket.getLoadDate().getTime() >= rate
									.getValidFrom().getTime())
									&& (ticket.getLoadDate().getTime() <= rate
											.getValidTo().getTime())) {
								payRate = rate;
								break;
							}
						} else if (rate.getRateUsing() == 2) {
							// calculation for a unload date
							if ((ticket.getUnloadDate().getTime() >= rate
									.getValidFrom().getTime())
									&& (ticket.getUnloadDate().getTime() <= rate
											.getValidTo().getTime())) {
								payRate = rate;
								break;
							}
						}
					}
					}
				if(payRate==null){
					pay.setAmount(0.0);
					sumAmount+=0.0;
					if(StringUtils.contains(expire, "1")){
					if (!expiredRate)
						str.add("<u>Rates Are Expired or not Available</u></br>");
					expiredRate = true;
					errorCount++;
					Location originName = genericDAO.getById(Location.class,
							ticket.getOrigin().getId());
					Location DestinationName = genericDAO.getById(
							Location.class, ticket.getDestination().getId());
					boolean cont = str.contains((originName.getName() + " - "
							+ DestinationName.getName() + "</br>"));
					String string = (originName.getName() + " - "
							+ DestinationName.getName() + "</br>");

					if (!cont)
						str.add(string);
					}
				
				}else{
					
					Map criti=new HashMap();
					criti.clear();
					criti.put("fullName",ticket.getDriver().getFullName() );
					Driver empObj=genericDAO.getByCriteria(Driver.class, criti);					
					double nofload=Double.parseDouble(pay.getNoOfLoad()+"");
					if(empObj.getId()!=null){
						if(empObj.getShift().equals("1")){							
							if(sundaycount > 0){
								double sundayRate = payRate.getPayRate() * payRate.getSundayRateFactor();
								sundayAmount = sundaycount * sundayRate;
								pay.setRate(payRate.getPayRate() * payRate.getSundayRateFactor());
							}						
						}
						else{
							if(sundaycount > 0){
								double sundayRate = payRate.getNightPayRate() * payRate.getSundayRateFactor();
								sundayAmount = sundaycount * sundayRate;
								pay.setRate(payRate.getNightPayRate() * payRate.getSundayRateFactor());
							}						
						}
					}
					else{
						if(sundaycount > 0){
							double sundayRate = payRate.getPayRate() * payRate.getSundayRateFactor();
							sundayAmount = sundaycount * sundayRate;
							pay.setRate(payRate.getPayRate() * payRate.getSundayRateFactor());
						}					
					}
					amount =  sundayAmount;
					sumAmount+=amount;
					amount=MathUtil.roundUp(amount, 2);
					pay.setAmount(amount);
					//pay.setRate(payRate.getPayRate());
				}
				pay.setNoOfLoad(sundaycount);
				//if(StringUtils.isEmpty(driverid))
				pay.setDrivername(ticket.getDriver().getFullName());
				//pay.setCompanyname(ticket.getDriver().getCompany().getName());
				totalcount+=pay.getNoOfLoad();
				}
				catch (Exception ex) {
					ex.printStackTrace();
				}
				summarys.add(pay);
				
			 }
			
				
			if(calculateOtherRow){
				DriverPay pay=new DriverPay();
				pay.setNoOfLoad(Integer.parseInt(recordCount.toString())-sundaycount);
				pay.setOrigin(ticket.getOrigin().getName());
				pay.setDestination(ticket.getDestination().getName());
				if(ticket.getCompanyLocation()!=null)
					pay.setCompanyname(ticket.getCompanyLocation().getName());
				else
					pay.setCompanyname("");
				
				if(ticket.getDriver().getTerminal()!=null)
					pay.setTerminalname(ticket.getDriver().getTerminal().getName());
				else
					pay.setTerminalname("");
				
				try{
					Long destination_id;
					Location location = genericDAO.getById(Location.class, ticket
						.getDestination().getId());
					if (location.getName().equalsIgnoreCase("grows")
						|| location.getName().equalsIgnoreCase("tullytown")) {
                        destination_id = 91l;
					} else {
						destination_id = ticket.getDestination().getId();
					}
					String rateQuery = "select obj from DriverPayRate obj where obj.transferStation='"
						+ ticket.getOrigin().getId() + "' and obj.landfill='"
						/* + ticket.getDestination().getId() + "'"; */
						+ destination_id + "'";
					List<DriverPayRate>	fs = genericDAO.executeSimpleQuery(rateQuery);
					DriverPayRate payRate = null;
					if (fs != null && fs.size() > 0) {
						for (DriverPayRate rate : fs) {
							if (rate.getRateUsing() == null) {
								payRate = rate;
								break;
							} else if (rate.getRateUsing() == 1) {
						// calculation for a load date
						if ((ticket.getLoadDate().getTime() >= rate
								.getValidFrom().getTime())
								&& (ticket.getLoadDate().getTime() <= rate
										.getValidTo().getTime())) {
							payRate = rate;
							break;
						}
					} else if (rate.getRateUsing() == 2) {
						// calculation for a unload date
						if ((ticket.getUnloadDate().getTime() >= rate
								.getValidFrom().getTime())
								&& (ticket.getUnloadDate().getTime() <= rate
										.getValidTo().getTime())) {
							payRate = rate;
							break;
						}
					}
				}
				}
			if(payRate==null){
				pay.setAmount(0.0);
				sumAmount+=0.0;
				if(StringUtils.contains(expire, "1")){
				if (!expiredRate)
					str.add("<u>Rates Are Expired or not Available</u></br>");
				expiredRate = true;
				errorCount++;
				Location originName = genericDAO.getById(Location.class,
						ticket.getOrigin().getId());
				Location DestinationName = genericDAO.getById(
						Location.class, ticket.getDestination().getId());
				boolean cont = str.contains((originName.getName() + " - "
						+ DestinationName.getName() + "</br>"));
				String string = (originName.getName() + " - "
						+ DestinationName.getName() + "</br>");

				if (!cont)
					str.add(string);
				}
			
			}else{
				
				Map criti=new HashMap();
				criti.clear();
				criti.put("fullName",ticket.getDriver().getFullName() );
				Driver empObj=genericDAO.getByCriteria(Driver.class, criti);
				
				double nofload=Double.parseDouble(pay.getNoOfLoad()+"");
				if(empObj.getId()!=null){
					if(empObj.getShift().equals("1")){						
						pay.setRate(payRate.getPayRate());						
						amount=nofload*payRate.getPayRate();
					}
					else{						
						pay.setRate(payRate.getNightPayRate());						
						amount= nofload*payRate.getNightPayRate();						
					}
				}
				else{
					pay.setRate(payRate.getPayRate());
					amount= nofload*payRate.getPayRate();					
				}				
				sumAmount+=amount;
				amount=MathUtil.roundUp(amount, 2);
				pay.setAmount(amount);
				//pay.setRate(payRate.getPayRate());
			}
			pay.setNoOfLoad(pay.getNoOfLoad());
			//if(StringUtils.isEmpty(driverid))
			pay.setDrivername(ticket.getDriver().getFullName());
			//pay.setCompanyname(ticket.getDriver().getCompany().getName());
			totalcount+=pay.getNoOfLoad();			
			
			if(sumAmounts.get(ticket.getDriver().getFullName()) != null ){
				double driveramount= sumAmounts.get(ticket.getDriver().getFullName());
				driveramount = driveramount + amount;
				sumAmounts.put(ticket.getDriver().getFullName(),driveramount);
			}else{
				sumAmounts.put(ticket.getDriver().getFullName(),amount);
			}
			
			
		
			}
			catch (Exception ex) {
				ex.printStackTrace();
			}
			summarys.add(pay);
		}
		}
		
		wrapper.setDriverNames(driverNames);
		wrapper.setSumAmountsMap(sumAmounts);
		sumAmount=MathUtil.roundUp(sumAmount, 2);
		wrapper.setTotalRowCount(totalcount);
		wrapper.setSumTotal(sumAmount);
		wrapper.setBatchDateFrom((String) criteria.getSearchMap().get("fromDate"));
		wrapper.setBatchDateTo((String) criteria.getSearchMap().get("toDate"));
		wrapper.setPayRollBatch((String) criteria.getSearchMap().get("payrollDate"));
		if(!StringUtils.isEmpty(company)){
		wrapper.setCompany(companylocation.getName());
		wrapper.setCompanylocation(companylocation);
		}
		if(!StringUtils.isEmpty(terminal)){
		wrapper.setTerminal(terminallocation);
		}
		if(driver!=null){
		wrapper.setDriver(driver.getFullName());
		wrapper.setCompany(driver.getCompany().getName());
		}
		/*if(StringUtils.isEmpty(driverid))*/
		if(StringUtils.contains(sum, "true")){
			for(DriverPay driverPay:wrapper.getDriverPays()){
				Double amount=map.get(driverPay.getDrivername());
				if(amount==null){
				amount=0.0;	
				}
				Double totamount=amount+driverPay.getAmount();
				Integer count=map1.get(driverPay.getDrivername());
				if(count==null){
					count=0;
				}	
				Integer totcount=count+driverPay.getNoOfLoad();
				map1.put(driverPay.getDrivername(), totcount);
				map.put(driverPay.getDrivername(), totamount);
			}
			wrapper.getDriverPays().clear();
		}
		/*if(StringUtils.isEmpty(driverid))*/
		if(StringUtils.contains(sum, "true")){
		List<DriverPay> fields=new ArrayList<DriverPay>();
		wrapper.setDriverPays(fields);
		/*if(StringUtils.isEmpty(driverid))*/
		
		Map empmap=new HashMap();
		double TotalAmount=0.0;
		
		
		Map criti = new HashMap();
		String drivernames = "";
        for(int i=0;i<drivers.size();i++){		        	
        	String driverFullName = String.valueOf(drivers.get(i));	
        	if(drivernames.equals("")){
        		drivernames ="'"+String.valueOf(drivers.get(i))+"'";	
        	}
        	else{
        		drivernames = drivernames+",'"+ String.valueOf(drivers.get(i))+"'";
        	}
        	criti.clear();
        	criti.put("fullName",driverFullName);
        	Driver driver3 = genericDAO.getByCriteria(Driver.class, criti);
       	
        		Double deductionAmount = 0.0;
				Double sickParsonalAmount=0.0;
				Double vacationAmount=0.0;
				Double bonusAmount=0.0;
				Double miscAmount=0.0;
				Double holidayAmount=0.0;
				DriverPay pay=new DriverPay();
				pay.setDrivername(driver3.getFullName());
				pay.setCompanyname(driver3.getCompany().getName());
				pay.setTerminalname(driver3.getTerminal().getName());
				Double amount=0.0;
				amount=(Double)(map.get(driver3.getFullName()));				
				empmap.clear();
				empmap.put("fullName", driver3.getFullName());
				empmap.put("status",1);
				Driver employee=genericDAO.getByCriteria(Driver.class, empmap);				
				Double miscamt=0.0;	
				Double reimburseAmount=0.0;	
				if(employee!=null){
				StringBuffer miscamountquery=new StringBuffer("select obj from MiscellaneousAmount obj where obj.driver.fullName='"+employee.getFullName()+"' and obj.miscNotes!='Reimbursement'");
				if(!StringUtils.isEmpty(frombatch)){
					miscamountquery.append(" and obj.batchFrom>='"+frombatch+"'");
				}
				if(!StringUtils.isEmpty(tobatch)){
					miscamountquery.append(" and obj.batchTo<='"+tobatch+"'");
				}			
				List<MiscellaneousAmount> miscamounts=genericDAO.executeSimpleQuery(miscamountquery.toString());
				for(MiscellaneousAmount miscamnt:miscamounts){
					miscamt+=miscamnt.getMisamount();					
				}	
				
				
				StringBuffer reimburseamountquery=new StringBuffer("select obj from MiscellaneousAmount obj where obj.driver.fullName='"+employee.getFullName()+"' and obj.miscNotes='Reimbursement'");
				if(!StringUtils.isEmpty(frombatch)){
					reimburseamountquery.append(" and obj.batchFrom>='"+frombatch+"'");
				}
				if(!StringUtils.isEmpty(tobatch)){
					reimburseamountquery.append(" and obj.batchTo<='"+tobatch+"'");
				}			
				List<MiscellaneousAmount> reimburseamounts=genericDAO.executeSimpleQuery(reimburseamountquery.toString());
				for(MiscellaneousAmount reimbursecamnt:reimburseamounts){
					reimburseAmount+=reimbursecamnt.getMisamount();					
				}
				
			    }
				
				
				pay.setTransportationAmount(amount);
				amount=amount+miscamt;				
				amount=MathUtil.roundUp(amount, 2);
				pay.setAmount(amount);
				pay.setMiscAmount(miscamt);
				pay.setReimburseAmount(reimburseAmount);
				pay.setNoOfLoad(map1.get(driver3.getFullName()));
				/*empmap.clear();
				empmap.put("fullName", driver3.getFullName());
				empmap.put("status",1);
				Driver employee=genericDAO.getByCriteria(Driver.class, empmap);*/
				if(employee!=null){
					StringBuffer ptodquery=new StringBuffer("select obj from Ptodapplication obj where obj.approvestatus=1 and obj.driver.fullName='"+employee.getFullName()+"' and obj.category=2");
					if(!StringUtils.isEmpty(frombatch)){
					    ptodquery.append(" and obj.batchdate>='"+frombatch+"'");
					}
					if(!StringUtils.isEmpty(tobatch)){
						ptodquery.append(" and obj.batchdate<='"+tobatch+"'");
					}
					List<Ptodapplication> ptodapplications= genericDAO.executeSimpleQuery(ptodquery.toString());
					for(Ptodapplication ptodapplication:ptodapplications){
						if(ptodapplication.getLeavetype().getId()==1){
							sickParsonalAmount=sickParsonalAmount+(ptodapplication.getAmountpaid())+(ptodapplication.getHourlyamountpaid());;
						}
						if(ptodapplication.getLeavetype().getId()==4){
							vacationAmount=vacationAmount+(ptodapplication.getAmountpaid())+(ptodapplication.getHourlyamountpaid());
							
						}
					}
					
					LocalDate dt= null;								
					if(!StringUtils.isEmpty(frombatch) && !StringUtils.isEmpty(tobatch)){
						if(frombatch.equalsIgnoreCase(tobatch)){
							try {											
								dt = new LocalDate(frombatch);
							} catch (Exception e) {
								System.out.println("Error Parsing Date");
							}
						}
						else{
							try {
								dt = new LocalDate(tobatch);
							} catch (Exception e) {
								System.out.println("Error Parsing Date");
							}
						}
					}
					else if (!StringUtils.isEmpty(frombatch) && StringUtils.isEmpty(tobatch)){
						try {
							dt = new LocalDate(frombatch);
						} catch (Exception e) {
							System.out.println("Error Parsing Date");
						}
					}
					else if (StringUtils.isEmpty(frombatch) && !StringUtils.isEmpty(tobatch)){
						try {
							dt = new LocalDate(tobatch);
						} catch (Exception e) {
							System.out.println("Error Parsing Date");
						}
					}				
					
					
					if(employee.getDateProbationEnd()!=null){
						if(new LocalDate(employee.getDateProbationEnd()).isAfter(dt) || new LocalDate(employee.getDateProbationEnd()).isEqual(dt) ){
							double miscAndLoadAmt = amount + sickParsonalAmount+ vacationAmount;											
							deductionAmount =  miscAndLoadAmt * 0.10;
							if(deductionAmount > 100.0){
								deductionAmount = 100.0;
							}
						}	
					}
					deductionAmount=MathUtil.roundUp(deductionAmount, 2);
					
					StringBuffer bonusquery=new StringBuffer("select obj from EmployeeBonus obj where obj.driver.fullName='"+employee.getFullName()+"' and obj.category=2");
					if(!StringUtils.isEmpty(frombatch)){
						bonusquery.append(" and obj.batchFrom>='"+frombatch+"'");
					}
					if(!StringUtils.isEmpty(tobatch)){
						bonusquery.append(" and obj.batchTo<='"+tobatch+"'");
					}
						List<EmployeeBonus> bonuses=genericDAO.executeSimpleQuery(bonusquery.toString());
						for(EmployeeBonus bonus:bonuses){
							for(EmpBonusTypesList list:bonus.getBonusTypesLists()){
								bonusAmount+=list.getBonusamount();
								//miscAmount+=list.getMisamount();
							}
						}
					StringBuffer holidayquery=new StringBuffer("select obj from HolidayType obj where obj.paid=1 and obj.company="+employee.getCompany().getId()+" and obj.terminal="+employee.getTerminal().getId()+" and obj.catagory="+employee.getCatagory().getId()+" and obj.leaveType=3");
					if(!StringUtils.isEmpty(frombatch)){
						holidayquery.append(" and obj.batchdate='"+frombatch+"'");
						}
						/*if(!StringUtils.isEmpty(tobatch)){
							holidayquery.append(" and obj.batchdate<='"+tobatch+"'");
						}*/
						List<HolidayType> holidayTypes=genericDAO.executeSimpleQuery(holidayquery.toString());
						for(HolidayType type:holidayTypes){
							holidayAmount=holidayAmount+type.getAmount();
						}
					
				}
				
				pay.setProbationDeductionAmount(deductionAmount);
				pay.setBonusAmount(bonusAmount);
				pay.setSickPersonalAmount(sickParsonalAmount);
				pay.setVacationAmount(vacationAmount);
				pay.setHolidayAmount(holidayAmount);
				Double totalAmount=pay.getAmount()+pay.getSickPersonalAmount()+pay.getBonusAmount()+pay.getHolidayAmount()-pay.getProbationDeductionAmount();
				totalAmount=MathUtil.roundUp(totalAmount, 2);
				TotalAmount+=totalAmount;
				pay.setTotalAmount(totalAmount);
				fields.add(pay);
			}
		
        
        
        //******************************************************************
        List<Driver> driverWithOutTickets = null;
        if(!drivernames.equals("") && StringUtils.isEmpty(driverid)){
        	StringBuffer drivernameauery = new StringBuffer("select obj from Driver obj where obj.status=1 and obj.catagory=2 and  obj.fullName not in ("+drivernames+")");
        	if(!StringUtils.isEmpty(company)){
        		drivernameauery.append(" and obj.company="+company);
        	}
        	if(!StringUtils.isEmpty(terminal)){
        		drivernameauery.append(" and obj.terminal="+terminal);
             }
        	
        	 driverWithOutTickets = genericDAO.executeSimpleQuery(drivernameauery.toString());
        }
        else if(drivernames.equals("") && !StringUtils.isEmpty(driverid)){
        	StringBuffer drivernameauery = new StringBuffer("select obj from Driver obj where obj.status=1 and obj.catagory=2 and  obj.fullName in ('"+driverid+"')");
        	if(!StringUtils.isEmpty(company)){
        		drivernameauery.append(" and obj.company="+company);
        	}
        	if(!StringUtils.isEmpty(terminal)){
        		drivernameauery.append(" and obj.terminal="+terminal);
             }       	
        	
        	 driverWithOutTickets = genericDAO.executeSimpleQuery(drivernameauery.toString());
        }
       
        if(driverWithOutTickets!=null){
        for(Driver driverWithOutTicket: driverWithOutTickets){        
       	
        		boolean setDriver = false;
        		Double deductionAmount = 0.0;
				Double sickParsonalAmount=0.0;
				Double vacationAmount=0.0;
				Double bonusAmount=0.0;
				Double miscAmount=0.0;
				Double holidayAmount=0.0;
				DriverPay pay=new DriverPay();
				pay.setDrivername(driverWithOutTicket.getFullName());
				if(driverWithOutTicket.getCompany()!=null)
					pay.setCompanyname(driverWithOutTicket.getCompany().getName());
				else
					pay.setCompanyname("");
				
				pay.setTerminalname(driverWithOutTicket.getTerminal().getName());
				Double amount=0.0;
				//amount=(Double)(map.get(driverWithOutTicket.getFullName()));				
				
				Driver employee= driverWithOutTicket;				
				Double miscamt=0.0;	
				Double reimburseAmount=0.0;	
				if(employee!=null){
				StringBuffer miscamountquery=new StringBuffer("select obj from MiscellaneousAmount obj where obj.driver.fullName='"+employee.getFullName()+"' and obj.miscNotes!='Reimbursement'");
				if(!StringUtils.isEmpty(frombatch)){
					miscamountquery.append(" and obj.batchFrom>='"+frombatch+"'");
				}
				if(!StringUtils.isEmpty(tobatch)){
					miscamountquery.append(" and obj.batchTo<='"+tobatch+"'");
				}			
				List<MiscellaneousAmount> miscamounts=genericDAO.executeSimpleQuery(miscamountquery.toString());
				for(MiscellaneousAmount miscamnt:miscamounts){
					setDriver = true;
					miscamt+=miscamnt.getMisamount();					
				}	
				
				
				StringBuffer reimburseamountquery=new StringBuffer("select obj from MiscellaneousAmount obj where obj.driver.fullName='"+employee.getFullName()+"' and obj.miscNotes='Reimbursement'");
				if(!StringUtils.isEmpty(frombatch)){
					reimburseamountquery.append(" and obj.batchFrom>='"+frombatch+"'");
				}
				if(!StringUtils.isEmpty(tobatch)){
					reimburseamountquery.append(" and obj.batchTo<='"+tobatch+"'");
				}			
				List<MiscellaneousAmount> reimburseamounts=genericDAO.executeSimpleQuery(reimburseamountquery.toString());
				for(MiscellaneousAmount reimbursecamnt:reimburseamounts){
					setDriver = true;
					reimburseAmount+=reimbursecamnt.getMisamount();					
				}
				
			    }
				pay.setTransportationAmount(amount);
				amount=amount+miscamt;				
				amount=MathUtil.roundUp(amount, 2);
				pay.setAmount(amount);
				pay.setMiscAmount(miscamt);
				pay.setReimburseAmount(reimburseAmount);
				pay.setNoOfLoad(0);
				
				Driver employees=driverWithOutTicket;
				if(employees!=null){
					StringBuffer ptodquery=new StringBuffer("select obj from Ptodapplication obj where obj.approvestatus=1 and obj.driver.fullName='"+employees.getFullName()+"' and obj.category=2");
					if(!StringUtils.isEmpty(frombatch)){
					    ptodquery.append(" and obj.batchdate>='"+frombatch+"'");
					}
					if(!StringUtils.isEmpty(tobatch)){
						ptodquery.append(" and obj.batchdate<='"+tobatch+"'");
					}
					List<Ptodapplication> ptodapplications= genericDAO.executeSimpleQuery(ptodquery.toString());
					for(Ptodapplication ptodapplication:ptodapplications){
						if(ptodapplication.getLeavetype().getId()==1){
							setDriver = true;
							sickParsonalAmount=sickParsonalAmount+(ptodapplication.getAmountpaid())+(ptodapplication.getHourlyamountpaid());;
						}
						if(ptodapplication.getLeavetype().getId()==4){
							setDriver = true;
							vacationAmount=vacationAmount+(ptodapplication.getAmountpaid())+(ptodapplication.getHourlyamountpaid());
							
						}
					}
					
					LocalDate dt= null;								
					if(!StringUtils.isEmpty(frombatch) && !StringUtils.isEmpty(tobatch)){
						if(frombatch.equalsIgnoreCase(tobatch)){
							try {											
								dt = new LocalDate(frombatch);
							} catch (Exception e) {
								System.out.println("Error Parsing Date");
							}
						}
						else{
							try {
								dt = new LocalDate(tobatch);
							} catch (Exception e) {
								System.out.println("Error Parsing Date");
							}
						}
					}
					else if (!StringUtils.isEmpty(frombatch) && StringUtils.isEmpty(tobatch)){
						try {
							dt = new LocalDate(frombatch);
						} catch (Exception e) {
							System.out.println("Error Parsing Date");
						}
					}
					else if (StringUtils.isEmpty(frombatch) && !StringUtils.isEmpty(tobatch)){
						try {
							dt = new LocalDate(tobatch);
						} catch (Exception e) {
							System.out.println("Error Parsing Date");
						}
					}				
					
					
					if(employee.getDateProbationEnd()!=null){
						if(new LocalDate(employee.getDateProbationEnd()).isAfter(dt)){
							
						}
						else{
							
						}	
					}
					
					
					StringBuffer bonusquery=new StringBuffer("select obj from EmployeeBonus obj where obj.driver.fullName='"+employee.getFullName()+"' and obj.category=2");
					if(!StringUtils.isEmpty(frombatch)){
						bonusquery.append(" and obj.batchFrom>='"+frombatch+"'");
					}
					if(!StringUtils.isEmpty(tobatch)){
						bonusquery.append(" and obj.batchTo<='"+tobatch+"'");
					}
						List<EmployeeBonus> bonuses=genericDAO.executeSimpleQuery(bonusquery.toString());
						for(EmployeeBonus bonus:bonuses){
							for(EmpBonusTypesList list:bonus.getBonusTypesLists()){
								setDriver = true;
								bonusAmount+=list.getBonusamount();
								//miscAmount+=list.getMisamount();
							}
						}
					StringBuffer holidayquery=new StringBuffer("select obj from HolidayType obj where obj.paid=1 and obj.company="+employee.getCompany().getId()+" and obj.terminal="+employee.getTerminal().getId()+" and obj.catagory="+employee.getCatagory().getId()+" and obj.leaveType=3");
					if(!StringUtils.isEmpty(frombatch)){
						holidayquery.append(" and obj.batchdate='"+frombatch+"'");
						}
						if(!StringUtils.isEmpty(tobatch)){
							holidayquery.append(" and obj.batchdate<='"+tobatch+"'");
						}
						List<HolidayType> holidayTypes=genericDAO.executeSimpleQuery(holidayquery.toString());
						for(HolidayType type:holidayTypes){
							setDriver = true;
							holidayAmount=holidayAmount+type.getAmount();
						}
					
				}
				
				pay.setProbationDeductionAmount(0.0);
				pay.setBonusAmount(bonusAmount);
				pay.setSickPersonalAmount(sickParsonalAmount);
				pay.setVacationAmount(vacationAmount);
				pay.setHolidayAmount(holidayAmount);
				Double totalAmount=pay.getAmount()+pay.getSickPersonalAmount()+pay.getBonusAmount()+pay.getHolidayAmount()-pay.getProbationDeductionAmount();
				totalAmount=MathUtil.roundUp(totalAmount, 2);
				
				
				if(setDriver) {
					TotalAmount+=totalAmount;
					pay.setTotalAmount(totalAmount);
					fields.add(pay);			
				}
        	
        }
		}
        //************************************************************
		wrapper.setSumAmount(TotalAmount);
		
		
		
		}
		wrapper.setList(str);
		return wrapper;
	}

	
	
	public TimeSheetWrapper generateTimeSheetData(SearchCriteria criteria,TimeSheetInput input)
	{
		double totalrHours=0.0;
		double totalwHours=0.0;
		double totalot=0.0;
		double totaldt=0.0;
		Map<String, String> params = new HashMap<String, String>();
		
		String weekstartDate1 = (String) criteria.getSearchMap().get("batchDatefrom");
		String weekendDate1 = (String) criteria.getSearchMap().get("batchDateto");
		
		String weekstartDate = ReportDateUtil.getFromDate(input.getWeekstartDateFrom());
		String weekendDate = ReportDateUtil.getToDate(input.getWeekendDateTo());
		 String sum= (String) criteria.getSearchMap().get("summary");
		String company = input.getCompany();
		String terminal = input.getTerminal();
		String employee = input.getDriver();
		String category = input.getCategory();
		
		
		/*String employeeno = input.getEmployeesNo();*/
		
		StringBuffer query = new StringBuffer("");
		//query.append("select obj from Attendance obj where 1=1 ");
		query.append("select obj from TimeSheet obj where 1=1 ");
		
		if (!StringUtils.isEmpty(company)) {
		query.append("and  obj.company in (" + company + ")");
		}
		
		if (!StringUtils.isEmpty(terminal)) {
			query.append("and  obj.terminal in (" + terminal + ")");
		}
		if (!StringUtils.isEmpty(employee)) {
			query.append("and  obj.driver in (" + employee + ")");
		}
		
		if (!StringUtils.isEmpty(category)) {
			query.append("and  obj.category in (" + category + ")");
		}
		
		if (!StringUtils.isEmpty(weekstartDate) && !StringUtils.isEmpty(weekendDate)) {
			query.append("and  obj.batchdate between '"
					+ weekstartDate + "' and '" + weekendDate
					+ "'");
		}
		
		
		
		//System.out.println("\nquery==>" + query + "\n");
		TimeSheetWrapper wrapper=new TimeSheetWrapper();
		List<TimeSheet> fs = genericDAO.executeSimpleQuery(query.toString());
		
		if(StringUtils.contains(sum, "true")){
			//System.out.println("\nTimeSheet Summary\n");
		List<TimeSheet> summarys = new ArrayList<TimeSheet>();
		//TimeSheetWrapper wrapper=new TimeSheetWrapper();
		wrapper.setTimesheets(summarys);
		for (TimeSheet timesheet : fs) {
			if(timesheet.getTotalothoursinweek()!=null){
				   totalot=totalot+timesheet.getTotalothoursinweek();
				   System.out.println("\not===>"+totalot+"\n");
				}
				if(timesheet.getTotaldthoursinweek()!=null){
				totaldt=totaldt+timesheet.getTotaldthoursinweek();
				//System.out.println("\ndt===>"+totaldt+"\n");
				}
				if(timesheet.getHoursworkedInweekRoundedValue() !=null){
					totalwHours=totalwHours+timesheet.getHoursworkedInweekRoundedValue();
				}
				
				if(timesheet.getRegularhours()!=null){
					totalrHours=totalrHours+timesheet.getRegularhours();
				}
			if (timesheet != null) {
				TimeSheet output = new TimeSheet();
				output.setBatchDates((timesheet.getBatchdate()!=null) ?sdf.format(timesheet.getBatchdate()):"");
				output.setCompanies((timesheet.getCompany() != null) ? timesheet.getCompany().getName() : "");
				output.setTerminals((timesheet.getTerminal() != null) ? timesheet.getTerminal().getName() : "");
				output.setEmployees((timesheet.getDriver() != null) ? timesheet.getDriver().getFullName() : "");
				output.setEmployeesNo((timesheet.getDriver() != null) ? timesheet.getDriver().getStaffId(): "");
				//output.setAttendanceDates((attendance.getAttendancedate()!=null) ?sdf.format(attendance.getAttendancedate()):"");
				/*output.setSignintime((attendance.getSignintime() != null) ? attendance.getSignintime(): "");
				output.setSignouttime((attendance.getSignouttime() != null) ? attendance.getSignouttime(): "");*/
				output.setrHours((timesheet.getRegularhours() !=null) ? timesheet.getRegularhours(): 0.00);
				output.setHoursworkeds((timesheet.getTotalhoursworkedInweek() !=null) ? timesheet.getTotalhoursworkedInweek(): 0.00);
				output.setOtHours((timesheet.getTotalothoursinweek()!=null)?timesheet.getTotalothoursinweek():0.00);
				output.setDtHours((timesheet.getTotaldthoursinweek()!=null)?timesheet.getTotaldthoursinweek():0.00);
				
				summarys.add(output);
				
			}
			
		}
		//wrapper.setTotalRowCount(fs.size());
		}
		else{
			List<TimeSheetWrapperDetail> summarys = new ArrayList<TimeSheetWrapperDetail>();
			///System.out.println("\nTimeSheet Details\n");
			wrapper.setTimesheetdetail(summarys);
			/*double totalot=0.0;
			double totaldt=0.0;*/
			for (TimeSheet timesheet : fs) {
				if (timesheet != null) {
					
					if(timesheet.getTotalothoursinweek()!=null){
					   totalot=totalot+timesheet.getTotalothoursinweek();
					   System.out.println("\not===>"+totalot+"\n");
					}
					if(timesheet.getTotaldthoursinweek()!=null){
					totaldt=totaldt+timesheet.getTotaldthoursinweek();
					//System.out.println("\ndt===>"+totaldt+"\n");
					}
					if(timesheet.getHoursworkedInweekRoundedValue() !=null){
						totalwHours=totalwHours+timesheet.getHoursworkedInweekRoundedValue();
					}
					
					if(timesheet.getDailyHours()!=null){
						totalrHours=totalrHours+timesheet.getDailyHours();
					}
					else{
						totalrHours=totalrHours+0.0;
					}
					
					for(int i=1;i<=7;i++){
					TimeSheetWrapperDetail output = new TimeSheetWrapperDetail();
					
					output.setEmpnumber(timesheet.getDriver().getStaffId());
					output.setEmpname(timesheet.getDriver().getFullName());
					output.setEmpcategory(timesheet.getCatagory().getName());
					output.setEmpcompany(timesheet.getCompany().getName());
					output.setEmpterminal(timesheet.getTerminal().getName());
					
					//output.setRegularhours((timesheet.getRegularhours()).toString());
					
					if(i==1){
						output.setDay(timesheet.getSundayname());
						output.setDate(timesheet.getSdate() !=null ? sdf.format(timesheet.getSdate()):"");
						output.setTimein(timesheet.getSsignintime() !=null ?timesheet.getSsignintime():"");
						output.setTimeout(timesheet.getSsignouttime() !=null?timesheet.getSsignouttime():"");
						output.setHoursworked(timesheet.getShoursworked()!=null?timesheet.getShoursworked():0.00);
						Double ot=0.0;
						Double dt=0.0;
						if(timesheet.getShoursworked() !=null){
							if(timesheet.getShoursworked()>0){								
								output.setHoursworked(timesheet.getShoursworked());
								
								if(timesheet.getDailyHours()!=null && timesheet.getDailyHours() > 0.0){
									output.setRegularhours((timesheet.getDailyHours()).toString());
									if(timesheet.getSdtflag().equalsIgnoreCase("Yes")){
										dt=timesheet.getShoursworked()-timesheet.getDailyHours();
									}
									else{
										if(timesheet.getSotflag().equalsIgnoreCase("Yes")){
											ot=timesheet.getShoursworked()-timesheet.getDailyHours();
										}
									}
								}
								else{
									output.setRegularhours("0.00");									
								}
							}
            				else{
            					output.setHoursworked(0.00);
    							output.setRegularhours("0.00");
    							dt = 0.00;
								ot = 0.00;
            				}
            	
						}
						else{
							output.setHoursworked(0.00);
							output.setRegularhours("0.00");
							dt = 0.00;
							ot = 0.00;
							System.out.println("\ngetShoursworked() != null----else\n");
						}
						output.setOthours(MathUtil.roundUp(ot, 2));
						output.setDthours(MathUtil.roundUp(dt, 2));
					}
					
					if(i==2){
						output.setDay(timesheet.getMondayname());
						output.setDate(timesheet.getMdate() !=null ?sdf.format(timesheet.getMdate()):"");
						output.setTimein(timesheet.getMsignintime()!=null ? timesheet.getMsignintime():"");
						output.setTimeout(timesheet.getMsignouttime()!=null ?timesheet.getMsignouttime():"");
						output.setHoursworked(timesheet.getMhoursworked()!=null ? timesheet.getMhoursworked():0.00);
						Double ot=0.0;
						Double dt=0.0;
						if(timesheet.getMhoursworked() != null){
							if(timesheet.getMhoursworked()>0){
            				output.setHoursworked(timesheet.getMhoursworked());
            				
            				if(timesheet.getDailyHours()!=null && timesheet.getDailyHours() > 0.0){
								output.setRegularhours((timesheet.getDailyHours()).toString());
								if(timesheet.getMdtflag().equalsIgnoreCase("Yes")){
									dt=timesheet.getMhoursworked()-timesheet.getDailyHours();
								}
								else{
									if(timesheet.getMtotflag().equalsIgnoreCase("Yes")){
										ot=timesheet.getMhoursworked()-timesheet.getDailyHours();
									}
								}
							}
							else{
								output.setRegularhours("0.00");									
							}
            				
            				
						}
							else{
								output.setHoursworked(0.00);
								output.setRegularhours("0.00");
							}
						}
						else{
							output.setHoursworked(0.00);
							output.setRegularhours("0.00");
						}
						output.setOthours(MathUtil.roundUp(ot, 2));
						output.setDthours(MathUtil.roundUp(dt, 2));
					}
					
                    if(i==3){
                    	output.setDay(timesheet.getTuesdayname());
                    	output.setDate(timesheet.getTdate() !=null ? sdf.format(timesheet.getTdate()):"");
                    	output.setTimein(timesheet.getTsignintime()!=null ? timesheet.getTsignintime():"");
                    	output.setTimeout(timesheet.getTsignouttime() !=null ? timesheet.getTsignouttime():"");
                    	output.setHoursworked(timesheet.getThoursworked() !=null ? timesheet.getThoursworked():0.00);
                    	Double ot=0.0;
						Double dt=0.0;
						if(timesheet.getThoursworked() != null){
							if(timesheet.getThoursworked()>0){
								output.setHoursworked(timesheet.getThoursworked());
								if(timesheet.getDailyHours()!=null && timesheet.getDailyHours() > 0.0){
									output.setRegularhours((timesheet.getDailyHours()).toString());
									if(timesheet.getTdtflag().equalsIgnoreCase("Yes")){
										dt=timesheet.getThoursworked()-timesheet.getDailyHours();
									}
									else{
										if(timesheet.getTotflag().equalsIgnoreCase("Yes")){
											ot=timesheet.getThoursworked()-timesheet.getDailyHours();
										}
									}
								}
								else{
									output.setRegularhours("0.00");									
								}
            				
							}
							else{
								output.setHoursworked(0.00);
								output.setRegularhours("0.00");
							}
						}
						else{
							output.setHoursworked(0.00);
							output.setRegularhours("0.00");
						}
						output.setOthours(MathUtil.roundUp(ot, 2));
						output.setDthours(MathUtil.roundUp(dt, 2));
					}
					
                    if(i==4){
                    	output.setDay(timesheet.getWednesdayname());
                    	output.setDate(timesheet.getWdate() !=null?sdf.format(timesheet.getWdate()):"");
                    	output.setTimein(timesheet.getWsignintime()!=null ? timesheet.getWsignintime():"");
                    	output.setTimeout(timesheet.getW_signouttime() !=null ? timesheet.getW_signouttime():"");
                    	output.setHoursworked(timesheet.getWhoursworked() !=null ?timesheet.getWhoursworked():0.00);
                    	Double ot=0.0;
						Double dt=0.0;
						if(timesheet.getWhoursworked() != null){
							if(timesheet.getWhoursworked()>0){
								output.setHoursworked(timesheet.getWhoursworked());
								if(timesheet.getDailyHours()!=null && timesheet.getDailyHours() > 0.0){
									output.setRegularhours((timesheet.getDailyHours()).toString());
									if(timesheet.getWdtflag().equalsIgnoreCase("Yes")){
										dt=timesheet.getWhoursworked()-timesheet.getDailyHours();
									}
									else{
										if(timesheet.getWotflag().equalsIgnoreCase("Yes")){
											ot=timesheet.getWhoursworked()-timesheet.getDailyHours();
										}
									}
								}
								else{
									output.setRegularhours("0.00");									
								}           				
							}
							else{
								output.setHoursworked(0.00);
								output.setRegularhours("0.00");
							}
            	
						}
						else{
							output.setHoursworked(0.00);
							output.setRegularhours("0.00");
						}
						output.setOthours(MathUtil.roundUp(ot, 2));
						output.setDthours(MathUtil.roundUp(dt, 2));
					 }
					
                    if(i==5){
                    	output.setDay(timesheet.getThrusdayname());
                    	output.setDate(timesheet.getThdate() !=null ? sdf.format(timesheet.getThdate()):"");
                    	output.setTimein(timesheet.getThsignintime()!=null ? timesheet.getThsignintime():"");
                    	output.setTimeout(timesheet.getThsignouttime()!=null ? timesheet.getThsignouttime():"");
                    	output.setHoursworked(timesheet.getThhoursworked()!=null ? timesheet.getThhoursworked():0.00);
                    	Double ot=0.0;
						Double dt=0.0;
						if(timesheet.getThhoursworked() != null){
						if(timesheet.getThhoursworked()>0){
							output.setHoursworked(timesheet.getThhoursworked());

							if(timesheet.getDailyHours()!=null && timesheet.getDailyHours() > 0.0){
								output.setRegularhours((timesheet.getDailyHours()).toString());
								if(timesheet.getThdtflag().equalsIgnoreCase("Yes")){
									dt=timesheet.getThhoursworked()-timesheet.getDailyHours();
								}
								else{
									if(timesheet.getThotflag().equalsIgnoreCase("Yes")){
										ot=timesheet.getThhoursworked()-timesheet.getDailyHours();
									}
								}
							}
							else{
								output.setRegularhours("0.00");									
							}
            				
						}
						else{
								output.setHoursworked(0.00);
								output.setRegularhours("0.00");
							}
						}
						else{
							output.setHoursworked(0.00);
							output.setRegularhours("0.00");
						}
						output.setOthours(MathUtil.roundUp(ot, 2));
						output.setDthours(MathUtil.roundUp(dt, 2));
					 }
                    
                    if(i==6){
                    	output.setDay(timesheet.getFridayname());
                    	output.setDate(timesheet.getFdate()!=null?sdf.format(timesheet.getFdate()):"");
                    	output.setTimein(timesheet.getFsignintime()!=null ? timesheet.getFsignintime():"");
                    	output.setTimeout(timesheet.getFsignouttime()!=null ? timesheet.getFsignouttime():"");
                    	output.setHoursworked(timesheet.getFhoursworked()!=null ? timesheet.getFhoursworked():0.00);
                    	Double ot=0.0;
						Double dt=0.0;
							if(timesheet.getFhoursworked() != null){
								if(timesheet.getFhoursworked()>0){
									output.setHoursworked(timesheet.getFhoursworked());
									if(timesheet.getDailyHours()!=null && timesheet.getDailyHours() > 0.0){
										output.setRegularhours((timesheet.getDailyHours()).toString());
										if(timesheet.getFdtflag().equalsIgnoreCase("Yes")){
											dt=timesheet.getFhoursworked()-timesheet.getDailyHours();
										}
										else{
											if(timesheet.getFotflag().equalsIgnoreCase("Yes")){
												ot=timesheet.getFhoursworked()-timesheet.getDailyHours();
											}
										}
									}
									else{
										output.setRegularhours("0.00");									
									}
								}
								else{
									output.setHoursworked(0.00);
									output.setRegularhours("0.00");
								}
							}
							else{
								output.setHoursworked(0.00);
								output.setRegularhours("0.00");
							}
						output.setOthours(MathUtil.roundUp(ot, 2));
						output.setDthours(MathUtil.roundUp(dt, 2));
                    	
					 }
                    
                    if(i==7){
                    	output.setDay(timesheet.getStdayname());
                    	output.setDate(timesheet.getStadate() !=null? sdf.format(timesheet.getStadate()):"");
                    	output.setTimein(timesheet.getStsignintime() !=null ? timesheet.getStsignintime():"");
                    	output.setTimeout(timesheet.getSt_signouttime() !=null ? timesheet.getSt_signouttime():"");
                    	Double ot=0.0;
						Double dt=0.0;
                    		if(timesheet.getSthoursworked() != null){
                    			if(timesheet.getSthoursworked() >0 ){                    			
                    				output.setHoursworked(timesheet.getSthoursworked());
                    				if(timesheet.getDailyHours()!=null && timesheet.getDailyHours() > 0.0){
        								output.setRegularhours((timesheet.getDailyHours()).toString());
        								if(timesheet.getStdtflag().equalsIgnoreCase("Yes")){
        									dt=timesheet.getSthoursworked()-timesheet.getDailyHours();
        								}
        								else{
        									if(timesheet.getStotflag().equalsIgnoreCase("Yes")){
        										ot=timesheet.getSthoursworked()-timesheet.getDailyHours();
        									}
        								}
        							}
        							else{
        								output.setRegularhours("0.00");									
        							}
                    			}
                    			else{
                        			output.setHoursworked(0.00);
                        			output.setRegularhours("0.00");
                        		}
                    	
                    		}
                    		else{
                    			output.setHoursworked(0.00);
                    			output.setRegularhours("0.00");
                    			System.out.println("\ngetSthoursworked() != null----else\n");
                    		}
                    	output.setOthours(MathUtil.roundUp(ot, 2));
						output.setDthours(MathUtil.roundUp(dt, 2));
                    }
                     
                    
					summarys.add(output);
					}
				}
			}
		
		}
		/*if(!StringUtils.contains(sum, "true")){*/
			wrapper.setTotalrHours(totalrHours);
			wrapper.setTotalwHours(totalwHours);
			wrapper.setTotalot(totalot);
			wrapper.setTotaldt(totaldt);
			System.out.println("\ntotalot==>"+totalot+"\n");
			System.out.println("\ntotaldt==>"+totaldt+"\n");
	/*	}*/
		return wrapper;
	}

	@Override
	public List<RemainingLeaveInput> generateRemainingLeaveReport(
			SearchCriteria criteria, RemainingLeaveInput input) {
		// TODO Auto-generated method stub
		String company=input.getCompany();
		String terminal=input.getTerminal();
		String category=input.getCategory();
		String leaveType=input.getLeaveType();
		String employees=input.getEmployees();
		StringBuffer query=new StringBuffer("");
		query.append("select obj from LeaveCurrentBalance obj where 1=1");
		query.append(" and (obj.hourremain!='0.0' and obj.hourremain is not null) OR (obj.daysremain!='0.0' and obj.daysremain is not null)");
		if (!StringUtils.isEmpty(employees)) {
			query.append("and  obj.empname in ("+employees+")");
		}
		
		if (!StringUtils.isEmpty(category)) {
			query.append("and  obj.empcategory in ("+category+")");
		   }
		if (!StringUtils.isEmpty(leaveType)) {
			query.append("and  obj.leavetype in ("+leaveType+")");
		    }
		if (!StringUtils.isEmpty(company)) {
			query.append("and  obj.company in ("+company+")");
			}
		if (!StringUtils.isEmpty(terminal)) {
				query.append("and  obj.terminal in ("+terminal+")");
			}
			System.out.println("******* The query is "+query.toString());
			List<RemainingLeaveInput> out=new ArrayList<RemainingLeaveInput>();
			List<LeaveCurrentBalance> balances=genericDAO.executeSimpleQuery(query.toString()); 
			for(LeaveCurrentBalance balance:balances){
				
				Double ptodrate=0.0;
				Double hourlyptodrate=0.0;
				boolean cal=false;
				String ptodquery = "select obj from Ptod obj where obj.company="+balance.getCompany().getId()+" and obj.terminal="+balance.getTerminal().getId()+" and obj.category="+balance.getEmpcategory().getId()+"  and obj.leavetype='"+balance.getLeavetype().getId()+"'";
				List<Ptod> ptodob = genericDAO.executeSimpleQuery(ptodquery);
				if(!ptodob.isEmpty() && ptodob.size()>0 ){
					Ptod ptod=ptodob.get(0);
					if(ptod.getCalculateFlag()==1){
						cal=true;
					}else{
						ptodrate=ptod.getRate();	
					}
				}
				if(cal){
				String rquery="select obj from PtodRate obj where obj.driver="+balance.getEmpname().getId()+" and obj.catagory="+balance.getEmpcategory().getId()+" and obj.company="+balance.getCompany().getId()+" and obj.terminal="+balance.getTerminal().getId();
				List<PtodRate> ptodRates=genericDAO.executeSimpleQuery(rquery);
				if(!ptodRates.isEmpty()){
					PtodRate ptodsrate=ptodRates.get(0);
					ptodrate=ptodsrate.getPtodRate();
				}
				}			
				
				RemainingLeaveInput remainingleave=new RemainingLeaveInput();
				if(balance.getDaysremain()!=null && balance.getDaysremain()!=0.0){					
					remainingleave.setAmount(ptodrate*balance.getDaysremain());
				}else{					
					remainingleave.setAmount(ptodrate*0.0);
				}				
				remainingleave.setEmployeesId((balance.getEmpname()!=null)?balance.getEmpname().getStaffId():"");
				remainingleave.setEmployees((balance.getEmpname()!=null)?balance.getEmpname().getFullName():"");
				remainingleave.setCompany((balance.getCompany()!=null)?balance.getCompany().getName():"");
				remainingleave.setTerminal((balance.getTerminal()!=null)?balance.getTerminal().getName():"");
				remainingleave.setDaysEarned((balance.getDayssbalance()!=null)?balance.getDayssbalance():0.0);
				remainingleave.setDaysAccrude((balance.getDaysaccrude()!=null)?balance.getDaysaccrude():0.0);
				remainingleave.setDaysAvailable((balance.getDaysavailable()!=null)?balance.getDaysavailable():0.0);
				remainingleave.setLeaveType(balance.getLeavetype().getName());
				remainingleave.setDaysused((balance.getDaysused()!=null)?balance.getDaysused():0.0);
				remainingleave.setDaysremain((balance.getDaysremain()!=null)?balance.getDaysremain():0.0);
				remainingleave.setHoursEarned((balance.getHoursbalance()!=null)?balance.getHoursbalance():0.0);
				remainingleave.setHoursAccrued((balance.getHoursaccrude()!=null)?balance.getHoursaccrude():0.0);
				remainingleave.setHoursAvailable((balance.getHoursavailable()!=null)?balance.getHoursavailable():0.0);
				remainingleave.setHoursused((balance.getHoursused()!=null)?balance.getHoursused():0.0);
				remainingleave.setHourremain((balance.getHourremain()!=null)?balance.getHourremain():0.0);
				remainingleave.setNote(balance.getNote()!=null?balance.getNote():"");
				out.add(remainingleave);
			
			}
			
		return out;
	}
	
	public EmployeePayrollWrapper  generateEmployeePayrollData(SearchCriteria criteria,EmployeePayrollInput input)
	{
		
		Map<String, String> params = new HashMap<String, String>();
		String batchDatefrom1 = (String) criteria.getSearchMap().get("DateFrom");
		String batchDateto1 = (String) criteria.getSearchMap().get("DateTo");
		
		
		String batchDatefrom = ReportDateUtil.getFromDate(input.getBatchDatefrom());
		String batchDateto = ReportDateUtil.getToDate(input.getBatchDateto());
		
		
		
		String company = input.getCompany();
		String terminal = input.getTerminal();
		String employee = input.getDriver();
		String category = input.getCategory();
		String status=input.getHourlypayrollstatus();
		/*String employeeno = input.getEmployeesNo();*/
		
		StringBuffer query = new StringBuffer("");
		StringBuffer queryCount = new StringBuffer("");
		query.append("select obj from TimeSheet obj where 1=1");
		queryCount.append("select obj from TimeSheet obj where 1=1 ");
		if (!StringUtils.isEmpty(company)) {
		query.append("and  obj.company in (" + company + ")");
		queryCount.append(" and obj.company in (" + company + ")");
		}
		
		if (!StringUtils.isEmpty(terminal)) {
			query.append("and  obj.terminal in (" + terminal + ")");
			queryCount.append(" and obj.terminal in (" + terminal + ")");
		}
		
		
		if (!StringUtils.isEmpty(employee)) {
			
			String empNames="";
			String[]employees=employee.split(",");
			for(int i=0;i<employees.length;i++){
				if(empNames.equals("")){
					empNames="'"+employees[i]+"'";
				}
				else{
					empNames=empNames+",'"+employees[i]+"'";
				}					
			}					
			String empQury="select obj from Driver obj where 1=1 and obj.fullName in ("+empNames+")";
			List<Driver> empObj=genericDAO.executeSimpleQuery(empQury);
			String empids="";			
			if(empObj.size()>0 && empObj!=null){
				for(Driver obj:empObj){
					if(empids.equals("")){
						empids=String.valueOf(obj.getId());
					}
					else{
						empids=empids+","+obj.getId();
					}
				}
			}			
			query.append("and  obj.driver in (" + empids + ")");
			queryCount.append(" and obj.driver in (" + empids + ")");
		}
		
		if (!StringUtils.isEmpty(category)) {
			query.append("and  obj.catagory in (" + category + ")");
			queryCount.append(" and obj.catagory in (" + category + ")");
		}
		
		if (!StringUtils.isEmpty(batchDatefrom) && !StringUtils.isEmpty(batchDateto)) {
			query.append("and  obj.batchdate >= '"
					+ batchDatefrom + "' and obj.batchdate <='" + batchDateto
					+ "'");
			queryCount.append("and  obj.batchdate between '"
					+ batchDatefrom + "' and obj.batchdate <='" + batchDateto
					+ "'");
		}
		if (!StringUtils.isEmpty(status)) {
			System.out.println("\nobj.hourlypayrollstatus not null\n");
			query.append("and  obj.hourlypayrollstatus in (" + status + ")");
			queryCount.append(" and obj.hourlypayrollstatus in (" + status + ")");
		}		
		List<TimeSheet> ts = genericDAO.executeSimpleQuery(query.toString());
		
		List<TimeSheet> summarys = new ArrayList<TimeSheet>();
		EmployeePayrollWrapper wrapper=new EmployeePayrollWrapper();
		double sumOftotAmount=0.0;
		double sumdtAmount=0.0;
		double sumotAmount=0.0;
		double sumregularAmount=0.0;
		
		//wrapper.setAttendance(summarys);
		wrapper.setTimesheets(summarys);
		for (TimeSheet timeSheet : ts) {
			Double rHours=0.0;
			Double otHours=0.0;
			Double dtHours=0.0;
			
			Double rRate=0.0;
			Double otRate=0.0;
			double dtRate=0.0;
			
			Double rAmount=0.0;
			Double otAmount=0.0;
			Double dtAmount=0.0;
			Double totAmount=0.0;
			
			Double vacationAmount=0.0;
			Double sickParsanolAmount=0.0;
			Double bonusAmounts=0.0;
			
			Double sumOfTotVacSicBonus=0.0;
			
			if (timeSheet != null) {
				TimeSheet output = new TimeSheet();
				
				output.setBatchDates((timeSheet.getBatchdate()!=null) ?sdf.format(timeSheet.getBatchdate()):"");
				output.setEmployeesNo((timeSheet.getDriver() != null) ? timeSheet.getDriver().getStaffId(): "");
				output.setEmployees((timeSheet.getDriver() != null) ? timeSheet.getDriver().getFullName() : "");
				output.setCategories((timeSheet.getCatagory().getName() != null) ? timeSheet.getCatagory().getName() : "");
				output.setCompanies((timeSheet.getCompany() != null) ? timeSheet.getCompany().getName() : "");
				output.setTerminals((timeSheet.getTerminal() != null) ? timeSheet.getTerminal().getName() : "");
				String query1="select obj from HourlyRate obj where obj.driver="+timeSheet.getDriver().getId()+" and obj.catagory="+timeSheet.getCatagory().getId()+" and obj.company="+timeSheet.getCompany().getId()+" and obj.terminal="+timeSheet.getTerminal().getId()+"and '"+timeSheet.getBatchdate()+"' BETWEEN obj.validFrom and obj.validTo";
				List<HourlyRate> hourlyRates=genericDAO.executeSimpleQuery(query1);
				boolean cal=false;
				HourlyRate rate=null;
				if(!hourlyRates.isEmpty()){
					cal=true;
					 rate=hourlyRates.get(0);	
				}
				
				Driver emp=genericDAO.getById(Driver.class, timeSheet.getDriver().getId());
				if(timeSheet.getRegularhours()!=null){
					rHours=timeSheet.getRegularhours();
					 if(cal&& rate.getHourlyRegularRate()!=null){
				         rRate=rate.getHourlyRegularRate();
			             rAmount=timeSheet.getRegularhours()*rate.getHourlyRegularRate();
			   }
					  /* if( emp.getHourlyRegularRate()!=null){
						         rRate=emp.getHourlyRegularRate();
					             rAmount=timeSheet.getRegularhours()*emp.getHourlyRegularRate();
					   }*/
			       }
				
				
				if(timeSheet.getTotalothoursinweek()!=null){
					otHours=timeSheet.getTotalothoursinweek();
					 if(cal&&rate.getHourlyOvertimeRate()!=null){
						 otRate=rate.getHourlyOvertimeRate()*rate.getHourlyRegularRate();
					     //otAmount=timeSheet.getTotalothoursinweek()*emp.getHourlyOvertimeRate();
						 otRate=MathUtil.roundUp(otRate,2);
						 otAmount=timeSheet.getTotalothoursinweek()*otRate;
						 System.out.println("\notAmount=======>"+otAmount+"\n");
					}
				/*	 if(emp.getHourlyOvertimeRate()!=null){
						 otRate=emp.getHourlyOvertimeRate()*emp.getHourlyRegularRate();
					     //otAmount=timeSheet.getTotalothoursinweek()*emp.getHourlyOvertimeRate();
						 otRate=MathUtil.roundUp(otRate,2);
						 otAmount=timeSheet.getTotalothoursinweek()*otRate;
						 System.out.println("\notAmount=======>"+otAmount+"\n");
					}*/
			      }
				
				
				if(cal&&timeSheet.getTotaldthoursinweek()!=null){
					dtHours=timeSheet.getTotaldthoursinweek();
					  if(rate.getHourlyDoubleTimeRate()!=null){
						  dtRate=rate.getHourlyDoubleTimeRate()*rate.getHourlyRegularRate(); 
					    //dtAmount=timeSheet.getTotaldthoursinweek()*emp.getHourlyDoubleTimeRate();
						  dtRate=MathUtil.roundUp(dtRate,2);
						  dtAmount=timeSheet.getTotaldthoursinweek()*dtRate;
						  System.out.println("\ndtAmount=======>"+dtAmount+"\n");
					}
					/*  if(emp.getHourlyDoubleTimeRate()!=null){
						  dtRate=emp.getHourlyDoubleTimeRate()*emp.getHourlyRegularRate(); 
					    //dtAmount=timeSheet.getTotaldthoursinweek()*emp.getHourlyDoubleTimeRate();
						  dtRate=MathUtil.roundUp(dtRate,2);
						  dtAmount=timeSheet.getTotaldthoursinweek()*dtRate;
						  System.out.println("\ndtAmount=======>"+dtAmount+"\n");
					}*/
			       }
				//calculating Vacation Amount and Sick/Vacation pay(amount)
				Long empid=timeSheet.getDriver().getId();
				Long empcategory=timeSheet.getCatagory().getId();
				Date ptodappBatchdate=timeSheet.getBatchdate();
				String ptodAppQuery = "select obj from Ptodapplication obj where obj.driver='"
					+ timeSheet.getDriver().getId() + "' and obj.category='"+ timeSheet.getCatagory().getId()
				    +"' and batchdate='" +mysqldf.format(timeSheet.getBatchdate())+"'";
		      
				List<Ptodapplication>	ptotAppl = genericDAO.executeSimpleQuery(ptodAppQuery);
				//System.out.println("\nptotAppl.size()=>" + ptotAppl.size() + "\n");
				for(Ptodapplication ptodap:ptotAppl){
					if(ptodap.getLeavetype().getId()==1){
						sickParsanolAmount=sickParsanolAmount+(ptodap.getAmountpaid())+(ptodap.getHourlyamountpaid());;
					}
					if(ptodap.getLeavetype().getId()==4){
						vacationAmount=vacationAmount+(ptodap.getAmountpaid())+(ptodap.getHourlyamountpaid());
						
					}
					
				}
				//
				
				//calculating Bonus Amount 
				/*String empBonus = "select obj from EmployeeBonus obj where obj.employee='"
					+ timeSheet.getDriver().getId() + "' and obj.category='"+ timeSheet.getCatagory().getId()
				    +"' and batchFrom<='" +mysqldf.format(timeSheet.getBatchdate())+"'and batchTo>='"+mysqldf.format(timeSheet.getBatchdate())+"'";
				*/
				String empBonus = "select obj from EmployeeBonus obj where obj.driver='"
					+ timeSheet.getDriver().getId() + "' and obj.category='"+ timeSheet.getCatagory().getId()
				    +"' and batchFrom='" +mysqldf.format(timeSheet.getBatchdate())+"'";
			    List<EmployeeBonus>	empsBonus = genericDAO.executeSimpleQuery(empBonus);
				//System.out.println("\nempBonusQuery====>"+empBonus+"\n");
				EmployeeBonus EmpBonus=null;
				for(EmployeeBonus enmBonusObj:empsBonus){
					//bonusAmounts=bonusAmounts+enmBonusObj.getBonusamount();   
					//System.out.println("\nbonusAmounts====>"+enmBonusObj.getId()+"\n");
					EmpBonus=enmBonusObj;
				}
				
				if(EmpBonus !=null){
				 List<EmpBonusTypesList> listEmpBonud=EmpBonus.getBonusTypesLists();
				for(EmpBonusTypesList enmBonusListObj:listEmpBonud){
						bonusAmounts=bonusAmounts+enmBonusListObj.getBonusamount();   
						//System.out.println("\nbonusAmounts====>"+bonusAmounts+"\n");
					
					}
				}
				 
				Double holidayAmount=0.00;
				StringBuffer holidayquery=new StringBuffer("select obj from HolidayType obj where obj.paid=1 and obj.company="+timeSheet.getCompany().getId()+" and obj.terminal="+timeSheet.getTerminal().getId()+" and obj.catagory="+timeSheet.getCatagory().getId()+" and obj.leaveType=3");
						holidayquery.append(" and obj.batchdate<='"+timeSheet.getBatchdate()+"'");
						holidayquery.append(" and obj.batchdate<='"+timeSheet.getBatchdate()+"'");
                        List<HolidayType> holidayTypes=genericDAO.executeSimpleQuery(holidayquery.toString());
					for(HolidayType type:holidayTypes){
						if(type.getAmount()!=null)
							holidayAmount=holidayAmount+type.getAmount();
					}
					
				 
				 
				totAmount=rAmount+otAmount+dtAmount;
				
				sumOftotAmount=sumOftotAmount+totAmount;
				sumdtAmount=sumdtAmount+dtAmount;
				sumotAmount=sumotAmount+otAmount;
				sumregularAmount=sumregularAmount+rAmount;
				
				output.setrHours(rHours);
				output.setOtHours(otHours);
				output.setDtHours(dtHours);
				
				output.setrRate(rRate);
				output.setOtRate(otRate);
				output.setDtRate(dtRate);
				
				output.setRegularamounts(rAmount);
				output.setOtamounts(otAmount);
				output.setDtamounts(dtAmount);
				output.setTotamounts(totAmount);
				
				output.setVacationAmount(vacationAmount);
				output.setSickParsanolAmount(sickParsanolAmount);
				output.setBonusAmounts(bonusAmounts);
				output.setHolidayAmount(holidayAmount);
				
				
				sumOfTotVacSicBonus = totAmount + vacationAmount + sickParsanolAmount + bonusAmounts+holidayAmount;
				output.setSumOfTotVacSicBonus(sumOfTotVacSicBonus);
				summarys.add(output);
				
				
			}
		}
		
		sumOftotAmount = MathUtil.roundUp(sumOftotAmount, 2);
		sumdtAmount = MathUtil.roundUp(sumdtAmount, 2);
		sumotAmount = MathUtil.roundUp(sumotAmount, 2);
		sumregularAmount = MathUtil.roundUp(sumregularAmount, 2);
		
		wrapper.setSumtotalAmount(sumOftotAmount);
		wrapper.setSumdtAmount(sumdtAmount);
		wrapper.setSumotAmount(sumotAmount);
		wrapper.setSumregularAmount(sumregularAmount);
		//System.out.println("sumOftotAmount====="+wrapper.getSumtotalAmount()+"\n");
		return wrapper;
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public void saveDriverPayData(HttpServletRequest request,
			SearchCriteria criteria) throws Exception {
		// TODO Auto-generated method stub
		Map criterias = new HashMap();
		String driverid=(String) criteria.getSearchMap().get("driver");
		String frombatch=(String) criteria.getSearchMap().get("fromDate");
		String tobatch=(String) criteria.getSearchMap().get("toDate");
		String company=(String) criteria.getSearchMap().get("company");
		String terminal=(String) criteria.getSearchMap().get("terminal");
		 String expire= (String) criteria.getSearchMap().get("expire");
		 String status=(String)criteria.getSearchMap().get("pay");
		
		 
		 
		 
		 
		 if(StringUtils.isEmpty(status)){
			 status="1";
		 }else{
			 status="2";
		 }
		frombatch=ReportDateUtil.getFromDate(frombatch);
		tobatch=ReportDateUtil.getFromDate(tobatch);
		 String sum= (String) criteria.getSearchMap().get("summary");
			String payrollDate=(String) criteria.getSearchMap().get("payrollDate");
			String driversmul=(String)criteria.getSearchMap().get("driversmul");
			Driver driver=null;
			if(!StringUtils.isEmpty(driverid)){			
				criterias.put("fullName",driverid);
				criterias.put("status",1);
				driver=genericDAO.getByCriteria(Driver.class, criterias);
			}
		/* if(StringUtils.contains(expire, "0")){
			 request.getSession().setAttribute("error", "Please Validate Rate Expiration");
			 throw new Exception("Rate Validation not done");
		 }*/
		 if(StringUtils.isEmpty(company)){
			 request.getSession().setAttribute("error", "Please Select Company");
			 throw new Exception("Company is Null"); 
		 }
		 if(StringUtils.isEmpty(payrollDate)){
			 request.getSession().setAttribute("error", "Please Enter Payroll Date");
			 throw new Exception("payrollDate is Null"); 
		 }
		 
		 
		 
		 Location companylocation=null;
		 Location terminallocation=null;
		 String driverIds="";
		 if(!StringUtils.isEmpty(company)){
		    companylocation=genericDAO.getById(Location.class, Long.parseLong(company));
		 }
		 if(!StringUtils.isEmpty(terminal)){
			    terminallocation=genericDAO.getById(Location.class, Long.parseLong(terminal));
		 }
		 
		 
		 if(!StringUtils.isEmpty(company) && StringUtils.isEmpty(driverid)){
			 Map drivercriteria = new HashMap();
			 drivercriteria.clear();
			 drivercriteria.put("company.id",companylocation.getId());
			 List<Driver> drivers = genericDAO.findByCriteria(Driver.class, drivercriteria);
			 for(Driver driverObj:drivers){
				 if(driverIds.equals(""))
					 driverIds = driverObj.getId().toString();
				else
					driverIds = driverIds +","+driverObj.getId().toString();
			 }
		}
		 
		 
		 
		 DriverPayWrapper wrapper=generateDriverPayReport(criteria);
		 DriverPayroll payroll=new DriverPayroll();
		 if(wrapper.getBatchDateFrom()!=null){
		 Date batchFrom = new SimpleDateFormat("MM-dd-yyyy")
			.parse(wrapper.getBatchDateFrom());
		 payroll.setBillBatchFrom(batchFrom);
		 }
		 if(wrapper.getBatchDateTo()!=null){
			 Date batchto = new SimpleDateFormat("MM-dd-yyyy")
				.parse(wrapper.getBatchDateTo()); 
			 payroll.setBillBatchTo(batchto);
		 }
		 Date payrollbatch =null;
		 if(wrapper.getPayRollBatch()!=null){
			 payrollbatch = new SimpleDateFormat("MM-dd-yyyy")
				.parse(wrapper.getPayRollBatch()); 
			 
			 payroll.setPayRollBatch(payrollbatch);
		 }
		 if(wrapper.getCompanylocation()!=null){
			 payroll.setCompany(wrapper.getCompanylocation());
		}
		 if(wrapper.getTerminal()!=null){
			 payroll.setTerminal(wrapper.getTerminal());
		 }
		 payroll.setSumTotal(wrapper.getSumTotal());
		 payroll.setTotalRowCount(wrapper.getTotalRowCount());
		 payroll.setSumAmount(wrapper.getSumAmount());
		 if(wrapper.getDriverPays().size()>0)
		  genericDAO.saveOrUpdate(payroll);
		 if(wrapper.getDriverPays().size()>0){
			 
			 List<DriverPay> summary = wrapper.getDriverPays();
			
		     Comparator<DriverPay> comparator3=new Comparator<DriverPay>() {
					@Override
					public int compare(DriverPay o1, DriverPay o2) {
						return  o1.getDrivername().compareTo(o2.getDrivername());
					}
			 };
				
			 ComparatorChain chain = new ComparatorChain();  
			 chain.addComparator(comparator3);
			 Collections.sort(summary, chain);
			 wrapper.setDriverPays(summary);
			 
		 for(DriverPay pay:wrapper.getDriverPays()){
			 System.out.println("************ Driver Name is "+pay.getDrivername());
			 pay.setCompany(wrapper.getCompanylocation());
			 if(wrapper.getTerminal()!=null)
			 pay.setTerminal(wrapper.getTerminal());
			 pay.setPayRollBatch(payrollbatch);
			genericDAO.save(pay);
		 }
		 }
		 StringBuffer query=new StringBuffer("update Ticket t set t.payRollStatus=2,t.payRollBatch='"+mysqldf.format(payrollbatch)+"' where 1=1 and  t.payRollStatus=1" );
		
		 
		 
		 if(!StringUtils.isEmpty(company) && !StringUtils.isEmpty(driverid)){
			 query.append(" and t.driver="+driver.getId());
         }
         else if(!StringUtils.isEmpty(company) && StringUtils.isEmpty(driverid)){
        	 query.append(" and t.driver in (").append(driverIds).append(")");
         }
         
         if(!StringUtils.isEmpty(driverid)){        	
        	 query.append(" and t.driver="+driver.getId());
         }
		
		if(!StringUtils.isEmpty(frombatch)){
			query.append("and t.billBatch>='"+frombatch+"'");
		}
		if(!StringUtils.isEmpty(tobatch)){
			query.append("and t.billBatch<='"+tobatch+"'");
		}
		 if(!StringUtils.isEmpty(terminal)){
	            query.append(" and t.terminal="+terminal);
	            }
		 if(!StringUtils.isEmpty(driversmul)){
			 query.append(" and t.driver not in ("+driversmul+")");
         }
		 
		  genericDAO.getEntityManager().createQuery(query.toString()).executeUpdate();
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public void deleteDriverPayData(DriverPayroll payroll) throws Exception {
		// TODO Auto-generated method stub
		Map criteria = new HashMap();
		criteria.put("company", payroll.getCompany());
		criteria.put("payRollBatch", payroll.getPayRollBatch());
		if(payroll.getTerminal()!=null)
		criteria.put("terminal", payroll.getTerminal());
		List<DriverPay> datas=genericDAO.findByCriteria(DriverPay.class, criteria);
		if (datas!=null && datas.size()>0) {
			for(DriverPay pay:datas){
				genericDAO.delete(pay);
			}
			
		}		 
		 String driverIds="";	 
		 
		 if(payroll.getCompany()!=null){
			 Map drivercriteria = new HashMap();
			 drivercriteria.clear();
			 drivercriteria.put("company.id",payroll.getCompany().getId());
			 List<Driver> drivers = genericDAO.findByCriteria(Driver.class, drivercriteria);
			 for(Driver driverObj:drivers){
				 if(driverIds.equals(""))
					 driverIds = driverObj.getId().toString();
				else
					driverIds = driverIds +","+driverObj.getId().toString();
			 }
		}
		
		
		
		 StringBuffer query=new StringBuffer("update Ticket t set t.payRollStatus=1,t.payRollBatch=null where 1=1 and  t.payRollStatus=2" );
			
		 if(payroll.getCompany()!=null){
			 query.append(" and t.driver in ("+driverIds+")");
		 }
		if(payroll.getBillBatchFrom()!=null){
			query.append(" and t.billBatch>='"+payroll.getBillBatchFrom()+"'");
		}
		if(payroll.getBillBatchTo()!=null){
			query.append(" and t.billBatch<='"+payroll.getBillBatchTo()+"'");
		}
		 if(payroll.getTerminal()!=null){
	            query.append(" and t.terminal="+payroll.getTerminal().getId());
	            }
		 if(payroll.getPayRollBatch()!=null){
			 query.append(" and t.payRollBatch='"+payroll.getPayRollBatch()+"'");
		 }
		genericDAO.getEntityManager().createQuery(query.toString()).executeUpdate();
		genericDAO.delete(payroll);
	}
	
	
	@Override
	public EmployeePayrollWrapper generateHourlyPayrollData(SearchCriteria searchCriteria) {
		
		String fromDateStr = (String) searchCriteria.getSearchMap().get("fromDate");
        String toDateStr = (String) searchCriteria.getSearchMap().get("toDate");
		String company = (String) searchCriteria.getSearchMap().get("company");
		String terminal = (String) searchCriteria.getSearchMap().get("terminal");
		String employee = (String) searchCriteria.getSearchMap().get("driver");
		String category = (String) searchCriteria.getSearchMap().get("category");
		
		fromDateStr = ReportDateUtil.getFromDate(fromDateStr);
		toDateStr = ReportDateUtil.getToDate(toDateStr);
		//System.out.println("\ngenerateHourlyPayrollData of HrReportServiceImpl\n");
		StringBuffer query = new StringBuffer("");
		query.append("select obj from TimeSheet obj where obj.status=1 and obj.hourlypayrollstatus=1");
		if (!StringUtils.isEmpty(company)) {
			query.append("and  obj.company=").append(company);
		}
		if (!StringUtils.isEmpty(terminal)) {
			query.append("and  obj.terminal=").append(terminal);
		}
		String driverdIds = "";
		if (!StringUtils.isEmpty(employee)) {						
			query.append("and  obj.driver.fullName='").append(employee).append("'");
		}
		
		if (!StringUtils.isEmpty(category)) {
			query.append("and  obj.catagory=").append(category);
		}
		if (!StringUtils.isEmpty(fromDateStr)) {
			query.append(" and  obj.batchdate>='").append(fromDateStr + "'");
			System.out.println("\ngenerateHourlyPayrollData -->"+fromDateStr+"\n");
		}
		if (!StringUtils.isEmpty(toDateStr)) {
			query.append(" and  obj.batchdate<='").append(toDateStr + "'");
			System.out.println("\ngenerateHourlyPayrollData -->"+toDateStr+"\n");
		}
		
		
		query.append(" order by obj.company.name asc, obj.terminal.name asc, obj.catagory.name asc, obj.driver.fullName asc");
		
		
		List<TimeSheet> ts = genericDAO.executeSimpleQuery(query.toString());
		
		/*EmployeePayrollWrapper wrapper=new EmployeePayrollWrapper();
		System.out.println("\ngenerateHourlyPayrollData of HrReportServiceImpl----end\n");
		List<TimeSheet> summarys = new ArrayList<TimeSheet>();*/
		
		List<HourlyPayrollInvoiceDetails> summarys = new ArrayList<HourlyPayrollInvoiceDetails>();
		EmployeePayrollWrapper wrapper=new EmployeePayrollWrapper();
		
		double sumOftotAmount=0.0;
		double sumdtAmount=0.0;
		double sumotAmount=0.0;
		double sumregularAmount=0.0;
		
		
		//wrapper.setTimesheets(summarys);
		wrapper.setInvoicedetails(summarys);
		for (TimeSheet timeSheet : ts) {
			Double rHours=0.0;
			Double otHours=0.0;
			Double dtHours=0.0;
			
			Double rRate=0.0;
			Double otRate=0.0;
			double dtRate=0.0;
			
			Double rAmount=0.0;
			Double otAmount=0.0;
			Double dtAmount=0.0;
			Double totAmount=0.0;
			
			Double vacationAmount=0.0;
			Double sickParsanolAmount=0.0;
			Double bonusAmounts=0.0;
			Double miscamt=0.0;
			Double reimburseamt=0.0;
			
			Double sumOfTotVacSicBonus=0.0;
			
			if (timeSheet != null) {
				HourlyPayrollInvoiceDetails output = new HourlyPayrollInvoiceDetails();
				
				output.setBatchdate((timeSheet.getBatchdate()!=null) ?sdf.format(timeSheet.getBatchdate()):"");
				output.setEmployeesNo((timeSheet.getDriver() != null) ? timeSheet.getDriver().getStaffId(): "");
				output.setDriver((timeSheet.getDriver() != null) ? timeSheet.getDriver().getFullName() : "");
				output.setCategory((timeSheet.getCatagory() != null) ? timeSheet.getCatagory().getName() : "");
				
				output.setCompany((timeSheet.getCompany() != null) ? timeSheet.getCompany().getName() : "");
				output.setTerminal((timeSheet.getTerminal() != null) ? timeSheet.getTerminal().getName() : "");
				String query1="select obj from HourlyRate obj where obj.driver="+timeSheet.getDriver().getId()+" and obj.catagory="+timeSheet.getCatagory().getId()+" and obj.company="+timeSheet.getCompany().getId()+" and obj.terminal="+timeSheet.getTerminal().getId()+"and '"+timeSheet.getBatchdate()+"' BETWEEN obj.validFrom and obj.validTo";
				List<HourlyRate> hourlyRates=genericDAO.executeSimpleQuery(query1);
				boolean cal=false;
				HourlyRate rate=null;
				if(!hourlyRates.isEmpty()){
					cal=true;
					 rate=hourlyRates.get(0);	
				}
				Driver emp=genericDAO.getById(Driver.class, timeSheet.getDriver().getId());
				if(timeSheet.getRegularhours()!=null){
					rHours=timeSheet.getRegularhours();
					 if(cal&& rate.getHourlyRegularRate()!=null){
				         rRate=rate.getHourlyRegularRate();
			             rAmount=timeSheet.getRegularhours()*rate.getHourlyRegularRate();
			   }
					  /* if( emp.getHourlyRegularRate()!=null){
						         rRate=emp.getHourlyRegularRate();
					             rAmount=timeSheet.getRegularhours()*emp.getHourlyRegularRate();
					   }*/
			  }
				
				
				if(timeSheet.getTotalothoursinweek()!=null){
					otHours=timeSheet.getTotalothoursinweek();
					 if(cal&&rate.getHourlyOvertimeRate()!=null){
						 otRate=rate.getHourlyOvertimeRate()*rate.getHourlyRegularRate();
					     //otAmount=timeSheet.getTotalothoursinweek()*emp.getHourlyOvertimeRate();
						 otRate=MathUtil.roundUp(otRate,2);
						 otAmount=timeSheet.getTotalothoursinweek()*otRate;
						 System.out.println("\notAmount=======>"+otAmount+"\n");
					}
				/*	 if(emp.getHourlyOvertimeRate()!=null){
						 otRate=emp.getHourlyOvertimeRate()*emp.getHourlyRegularRate();
					     //otAmount=timeSheet.getTotalothoursinweek()*emp.getHourlyOvertimeRate();
						 otRate=MathUtil.roundUp(otRate,2);
						 otAmount=timeSheet.getTotalothoursinweek()*otRate;
						 System.out.println("\notAmount=======>"+otAmount+"\n");
					}*/
			      }
				
				
				if(cal&&timeSheet.getTotaldthoursinweek()!=null){
					dtHours=timeSheet.getTotaldthoursinweek();
					  if(rate.getHourlyDoubleTimeRate()!=null){
						  dtRate=rate.getHourlyDoubleTimeRate()*rate.getHourlyRegularRate(); 
					    //dtAmount=timeSheet.getTotaldthoursinweek()*emp.getHourlyDoubleTimeRate();
						  dtRate=MathUtil.roundUp(dtRate,2);
						  dtAmount=timeSheet.getTotaldthoursinweek()*dtRate;
						  System.out.println("\ndtAmount=======>"+dtAmount+"\n");
					}
					/*  if(emp.getHourlyDoubleTimeRate()!=null){
						  dtRate=emp.getHourlyDoubleTimeRate()*emp.getHourlyRegularRate(); 
					    //dtAmount=timeSheet.getTotaldthoursinweek()*emp.getHourlyDoubleTimeRate();
						  dtRate=MathUtil.roundUp(dtRate,2);
						  dtAmount=timeSheet.getTotaldthoursinweek()*dtRate;
						  System.out.println("\ndtAmount=======>"+dtAmount+"\n");
					}*/
			       }
				
				//calculating Vacation Amount and Sick/Vacation pay(amount)
				Long empid=timeSheet.getDriver().getId();
				Long empcategory=timeSheet.getCatagory().getId();
				Date ptodappBatchdate=timeSheet.getBatchdate();
				String ptodAppQuery = "select obj from Ptodapplication obj where obj.driver.fullName='"
					+ timeSheet.getDriver().getFullName() + "' and obj.category='"+ timeSheet.getCatagory().getId()
				    +"' and batchdate='" +mysqldf.format(timeSheet.getBatchdate())+"'";
		      
				List<Ptodapplication>	ptotAppl = genericDAO.executeSimpleQuery(ptodAppQuery);
				System.out.println("\nptotAppl.size()=>" + ptotAppl.size() + "\n");
				for(Ptodapplication ptodap:ptotAppl){
					if(ptodap.getLeavetype().getId()==1){
						sickParsanolAmount=sickParsanolAmount+(ptodap.getAmountpaid())+(ptodap.getHourlyamountpaid());;
					}
					if(ptodap.getLeavetype().getId()==4){
						vacationAmount=vacationAmount+(ptodap.getAmountpaid())+(ptodap.getHourlyamountpaid());
						
					}
					
				}
				
				StringBuffer miscamountquery=new StringBuffer("select obj from MiscellaneousAmount obj where obj.driver.fullName='"+timeSheet.getDriver().getFullName()+"' and obj.miscNotes!='Reimbursement'");
				
					miscamountquery.append(" and obj.batchFrom='"+mysqldf.format(timeSheet.getBatchdate())+"'");
				
				
				
					List<MiscellaneousAmount> miscamounts=genericDAO.executeSimpleQuery(miscamountquery.toString());
					int count=0;
					for(MiscellaneousAmount miscamnt:miscamounts){
						miscamt+=miscamnt.getMisamount();
					}
					
					
					StringBuffer reimburseamountquery=new StringBuffer("select obj from MiscellaneousAmount obj where obj.driver.fullName='"+timeSheet.getDriver().getFullName()+"' and obj.miscNotes ='Reimbursement'");
					
					reimburseamountquery.append(" and obj.batchFrom='"+mysqldf.format(timeSheet.getBatchdate())+"'");
				
				
				
					List<MiscellaneousAmount> reimburseamounts=genericDAO.executeSimpleQuery(reimburseamountquery.toString());
					int reimbursecount=0;
					for(MiscellaneousAmount reimburseamount:reimburseamounts){
						reimburseamt+=reimburseamount.getMisamount();
					}
				//calculating Bonus Amount 
				/*String empBonus = "select obj from EmployeeBonus obj where obj.employee='"
					+ timeSheet.getDriver().getId() + "' and obj.category='"+ timeSheet.getCatagory().getId()
				    +"' and batchFrom<='" +mysqldf.format(timeSheet.getBatchdate())+"'and batchTo>='"+mysqldf.format(timeSheet.getBatchdate())+"'";
				
				List<EmployeeBonus>	empsBonus = genericDAO.executeSimpleQuery(empBonus);
				System.out.println("\nempBonusQuery====>"+empBonus+"\n");
			
				for(EmployeeBonus enmBonusObj:empsBonus){
					bonusAmounts=bonusAmounts+enmBonusObj.getBonusamount();   
					System.out.println("\nbonusAmounts====>"+bonusAmounts+"\n")
				}*/
				
				String empBonus = "select obj from EmployeeBonus obj where obj.driver.fullName='"
					+ timeSheet.getDriver().getFullName() + "' and obj.category='"+ timeSheet.getCatagory().getId()
				    +"' and batchFrom='" +mysqldf.format(timeSheet.getBatchdate())+"'";
			    List<EmployeeBonus>	empsBonus = genericDAO.executeSimpleQuery(empBonus);
				//System.out.println("\nempBonusQuery====>"+empBonus+"\n");
				
				
				EmployeeBonus EmpBonus=null;
				for(EmployeeBonus enmBonusObj:empsBonus){
					//bonusAmounts=bonusAmounts+enmBonusObj.getBonusamount();   
					//System.out.println("\nbonusAmounts====>"+enmBonusObj.getId()+"\n");
					EmpBonus=enmBonusObj;
				}
				
				if(EmpBonus !=null){
				 List<EmpBonusTypesList> listEmpBonud=EmpBonus.getBonusTypesLists();
				for(EmpBonusTypesList enmBonusListObj:listEmpBonud){
						bonusAmounts=bonusAmounts+enmBonusListObj.getBonusamount();   
						//System.out.println("\nbonusAmounts====>"+bonusAmounts+"\n");
					
					}
				}
				Double holidayAmount=0.00;
				StringBuffer holidayquery=new StringBuffer("select obj from HolidayType obj where obj.paid=1 and obj.company="+timeSheet.getCompany().getId()+" and obj.terminal="+timeSheet.getTerminal().getId()+" and obj.catagory="+timeSheet.getCatagory().getId()+" and obj.leaveType=3");
				
					holidayquery.append(" and obj.batchdate<='"+timeSheet.getBatchdate()+"'");
					
					holidayquery.append(" and obj.batchdate>='"+timeSheet.getBatchdate()+"'");
				
					List<HolidayType> holidayTypes=genericDAO.executeSimpleQuery(holidayquery.toString());
					for(HolidayType type:holidayTypes){
						holidayAmount=holidayAmount+type.getAmount();
					}
				
				output.setTimesheet(timeSheet);
				totAmount=rAmount+otAmount+dtAmount;
				
				sumOftotAmount=sumOftotAmount+totAmount;
				sumdtAmount=sumdtAmount+dtAmount;
				sumotAmount=sumotAmount+otAmount;
				sumregularAmount=sumregularAmount+rAmount;
				
				output.setRegularhours(rHours);
				output.setOthours(otHours);
				output.setDthours(dtHours);
				
				output.setRegularrate(rRate);
				output.setOtrate(otRate);
				output.setDtrate(dtRate);
				
				output.setRegularamount(rAmount);
				output.setOtamount(otAmount);
				output.setDtamount(dtAmount);
				output.setSumamount(totAmount);
				output.setMiscAmount(miscamt);
				output.setReimburseAmount(reimburseamt);
				output.setVacationAmount(vacationAmount);
				output.setSickParsanolAmount(sickParsanolAmount);
                output.setBonusAmounts(bonusAmounts);
                output.setHolidayAmount(holidayAmount);
				
				sumOfTotVacSicBonus = totAmount + miscamt + sickParsanolAmount + bonusAmounts+holidayAmount;
				output.setSumOfTotVacSicBonus(sumOfTotVacSicBonus);
				summarys.add(output);
				
				
				
			}
		}
		
		sumOftotAmount = MathUtil.roundUp(sumOftotAmount, 2);
		sumdtAmount = MathUtil.roundUp(sumdtAmount, 2);
		sumotAmount = MathUtil.roundUp(sumotAmount, 2);
		sumregularAmount = MathUtil.roundUp(sumregularAmount, 2);
		
		wrapper.setSumtotalAmount(sumOftotAmount);
		wrapper.setSumdtAmount(sumdtAmount);
		wrapper.setSumotAmount(sumotAmount);
		wrapper.setSumregularAmount(sumregularAmount);
		//System.out.println("sumOftotAmount====="+wrapper.getSumtotalAmount()+"\n");
		
		
		
		////
	 return wrapper;
	}
	
	
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public void saveHourlyPayrollData(HttpServletRequest request,SearchCriteria criteria) throws Exception 
	{
		String payrollinvoiceNumber = (String) criteria.getSearchMap().get("payrollinvoicedate");
		String company = (String) criteria.getSearchMap().get("company");
		
		//System.out.println("\npayrollinvoiceNumber====>"+payrollinvoiceNumber+"\n");
		if (payrollinvoiceNumber.isEmpty()){
			request.getSession().setAttribute("error","Please Enter Check Date");
			throw new Exception("invoice number null");
		}
		
		String querypayrollinvoice = "select obj from HourlyPayrollInvoice obj where obj.payrollinvoicedate='"
			+ payrollinvoiceNumber+ "' and obj.company='"+company+"'" ;
		
		List<HourlyPayrollInvoice> payrollinvoices = genericDAO.executeSimpleQuery(querypayrollinvoice);
		EmployeePayrollWrapper wrapper = generateHourlyPayrollData(criteria);
		if (payrollinvoices.isEmpty()) {
			HourlyPayrollInvoice HPinvoice = new HourlyPayrollInvoice();
			String payrollinvoicedate = null; 
			Date payinvDate=null;
			payrollinvoicedate =  (String) criteria.getSearchMap().get("payrollinvoicedate");
			if (!payrollinvoicedate.isEmpty()) {
				payinvDate = new SimpleDateFormat("MM-dd-yyyy").parse(payrollinvoicedate);
				SimpleDateFormat mysqldf1 = new SimpleDateFormat("yyyy-MM-dd");
				HPinvoice.setPayrollinvoicedate(payinvDate);
				payrollinvoicedate=mysqldf1.format(payinvDate);
			} 
			else {
				HPinvoice.setPayrollinvoicedate(Calendar.getInstance().getTime());
				SimpleDateFormat mysqldf1 = new SimpleDateFormat("yyyy-MM-dd");
				payrollinvoicedate=mysqldf1.format(Calendar.getInstance().getTime());
				payinvDate=Calendar.getInstance().getTime();
			}
			
			//HPinvoice.setPayrollinvoicenumber(payrollinvoiceNumber);
			HPinvoice.setSumregularamount(wrapper.getSumregularAmount());
			HPinvoice.setSumotamount(wrapper.getSumotAmount());
			HPinvoice.setSumdtamount(wrapper.getSumdtAmount());
			HPinvoice.setSumtotalamount(wrapper.getSumtotalAmount());
			HPinvoice.setCompany(company);
			genericDAO.saveOrUpdate(HPinvoice);
			
			//System.out.println("\nwrapper.getInvoicedetails.size()====>"+wrapper.getInvoicedetails().size()+"\n");
			//System.out.println("\nwrapper.getInvoicedetails().size()====>"+wrapper.getInvoicedetails().get(0).getId()+"\n");
			/*wrapper.getTimesheets().*/
			for (HourlyPayrollInvoiceDetails billing : wrapper.getInvoicedetails()) {
				/*HourlyPayrollInvoiceDetails HPinvoiceDetails = new HourlyPayrollInvoiceDetails();*/
				TimeSheet timesheet = genericDAO.getById(TimeSheet.class, billing.getTimesheet().getId());
				timesheet.setHourlypayrollinvoiceNumber(payrollinvoiceNumber);
				timesheet.setHourlypayrollinvoiceDate(payinvDate);
				timesheet.setHourlypayrollstatus(2);
				
				billing.setDate(payrollinvoicedate);
				//billing.setBatchdate(payrollinvoicedate);
				billing.setPayrollinvoiceNo(payrollinvoiceNumber);
				genericDAO.saveOrUpdate(billing);
			}
			
			
		}
		else {
			request.getSession().setAttribute("error","Payroll Run number already exists.");
			throw new Exception("Payroll Run number already exists. Please choose another number");
		}
		
		
		
	}

	@Override
	public List<PtodApplicationInput> generatePtodApplicationReport(
			SearchCriteria criteria, PtodApplicationInput input) {
		// TODO Auto-generated method stub
		String company=input.getCompany();
		String terminal=input.getTerminal();
		String category=input.getCategory();
		String leaveType=input.getLeaveType();
		String employees=input.getEmployees();
		String approveStatus=input.getApprovestatus();
		
		String payRollBatchFrom=input.getPayRollBatchFrom();
		String payRollBatchto=input.getPayRollBatchto();
		payRollBatchFrom=ReportDateUtil.getFromDate(payRollBatchFrom);
		payRollBatchto=ReportDateUtil.getToDate(payRollBatchto);
		StringBuffer query=new StringBuffer("");
		query.append("select obj from Ptodapplication obj where 1=1");
		if (!StringUtils.isEmpty(employees)) {
			query.append("and  obj.driver in ("+employees+")");
		}
		
		if (!StringUtils.isEmpty(category)) {
			query.append("and  obj.category in ("+category+")");
		   }
		if (!StringUtils.isEmpty(leaveType)) {
			query.append("and  obj.leavetype in ("+leaveType+")");
		    }
		if (!StringUtils.isEmpty(company)) {
			query.append("and  obj.company in ("+company+")");
			}
		if (!StringUtils.isEmpty(terminal)) {
				query.append("and  obj.terminal in ("+terminal+")");
			}
		if(!StringUtils.isEmpty(payRollBatchFrom)){
			query.append("and obj.batchdate>='"+payRollBatchFrom+"'");
		}
		if(!StringUtils.isEmpty(payRollBatchto)){
			query.append("and obj.batchdate<='"+payRollBatchto+"'");
		}
		if(!StringUtils.isEmpty(approveStatus)){
			query.append(" and obj.approvestatus in ("+approveStatus+")");
		}
		List<PtodApplicationInput> out=new ArrayList<PtodApplicationInput>();
		List<Ptodapplication> ptodapplications=genericDAO.executeSimpleQuery(query.toString()); 
		for(Ptodapplication ptodapplication:ptodapplications){
			PtodApplicationInput applicationInput=new PtodApplicationInput();
			applicationInput.setCompany(ptodapplication.getCompany()!=null?ptodapplication.getCompany().getName():"");
			applicationInput.setTerminal(ptodapplication.getTerminal()!=null?ptodapplication.getTerminal().getName():"");
			applicationInput.setCategory(ptodapplication.getCategory()!=null?ptodapplication.getCategory().getName():"");
			applicationInput.setEmployees(ptodapplication.getDriver().getFullName());
			applicationInput.setLeaveType(ptodapplication.getLeavetype()!=null?ptodapplication.getLeavetype().getName():"");
			applicationInput.setSubmitdate(ptodapplication.getSubmitdate()!=null? sdf.format(ptodapplication.getSubmitdate()):"");
			applicationInput.setDaysrequested(ptodapplication.getDaysrequested()!=null?ptodapplication.getDaysrequested():0);
			applicationInput.setLeavedatefrom(ptodapplication.getLeavedatefrom()!=null? sdf.format(ptodapplication.getLeavedatefrom()):"");
			applicationInput.setLeavedateto(ptodapplication.getLeavedateto()!=null? sdf.format(ptodapplication.getLeavedateto()):"");
			applicationInput.setDayspaid(ptodapplication.getDayspaid()!=null?ptodapplication.getDayspaid():0);
			applicationInput.setDaysunpaid(ptodapplication.getDaysunpaid()!=null?ptodapplication.getDaysunpaid():0);
			applicationInput.setPtodrates(ptodapplication.getPtodrates()!=null?ptodapplication.getPtodrates():0.0);
			applicationInput.setAmountpaid(ptodapplication.getAmountpaid()!=null?ptodapplication.getAmountpaid():0.0);
			applicationInput.setHoursrequested(ptodapplication.getHoursrequested()!=null?ptodapplication.getHoursrequested():0.0);
			applicationInput.setHourspaid(ptodapplication.getHourspaid()!=null?ptodapplication.getHourspaid():0.0);
			applicationInput.setHoursunpaid(ptodapplication.getHoursunpaid()!=null?ptodapplication.getHoursunpaid():0.0);
			applicationInput.setPtodhourlyrate(ptodapplication.getPtodhourlyrate()!=null?ptodapplication.getPtodhourlyrate():0.0);
			applicationInput.setHourlyamountpaid(ptodapplication.getHourlyamountpaid()!=null?ptodapplication.getHourlyamountpaid():0.0);
			applicationInput.setCheckdate(ptodapplication.getCheckdate()!=null? sdf.format(ptodapplication.getCheckdate()):"");
			applicationInput.setApproveby(ptodapplication.getApproveby()!=null?ptodapplication.getApproveby().getFullName():"");
			applicationInput.setApprovestatus(StaticDataUtil.getText(
						"APPROVE_STATUS", "" + ptodapplication.getApprovestatus()));
			applicationInput.setPayrollbatch(ptodapplication.getBatchdate()!=null? sdf.format(ptodapplication.getBatchdate()):"");
			
			out.add(applicationInput);
			
			
		}
		return out;
	}
	
	@Override
	public EmployeeBonusWrapper generateEmployeeBonusData(SearchCriteria criteria, EmployeeBonusInput input)
	{
		// TODO Auto-generated method stub
		//Map<String, String> params = new HashMap<String, String>();
		String company = input.getCompany();
		String terminal = input.getTerminal();
		String employee = input.getDriver();
		String category = input.getCategory();
		String bonustype = input.getBonustype();
		String empnumber = input.getEmployeeNo();
		
		
		StringBuffer query = new StringBuffer("");
		StringBuffer queryCount = new StringBuffer("");
		query.append("select obj from EmployeeBonus obj where 1=1");
		queryCount.append("select obj from EmployeeBonus obj where 1=1 ");
		
		if (!StringUtils.isEmpty(company)) {
		query.append("and  obj.company in (" + company + ")");
		queryCount.append(" and obj.company in (" + company + ")");
		}
		
		if (!StringUtils.isEmpty(terminal)) {
			query.append("and  obj.terminal in (" + terminal + ")");
			queryCount.append(" and obj.terminal in (" + terminal + ")");
		}
		if (!StringUtils.isEmpty(employee)) {
			query.append("and  obj.driver in (" + employee + ")");
			queryCount.append(" and obj.driver in (" + employee + ")");
		}
		
		if (!StringUtils.isEmpty(category)) {
			query.append("and  obj.catagory in (" + category + ")");
			queryCount.append(" and obj.catagory in (" + category + ")");
		}
		if (!StringUtils.isEmpty(bonustype)) {
			query.append("and  obj.bonustype in (" + bonustype + ")");
			queryCount.append(" and obj.bonustype in (" + bonustype + ")");
		}
		
		if (!StringUtils.isEmpty(empnumber)) {
			query.append("and  obj.empnumber ="+  empnumber +"" );
			queryCount.append("and  obj.empnumber ="+  empnumber +"" );
			
		}
		
		
		
		System.out.println("\ntEmp Bonus Query=>" + query + "\n");
		List<EmployeeBonus> empBonus = genericDAO.executeSimpleQuery(query.toString());
		System.out.println("\ntts.size()=>" + empBonus.size() + "\n");
		List<EmployeeBonus> summarys = new ArrayList<EmployeeBonus>();
		EmployeeBonusWrapper wrapper=new EmployeeBonusWrapper();
		wrapper.setEmployeeBonus(summarys);
		double sumOftotAmount=0.0;
		for (EmployeeBonus empbonusObj : empBonus) {
			Double amuont=0.0;
			if (empbonusObj != null) {
				EmployeeBonus output = new EmployeeBonus();
				output.setEmployees((empbonusObj.getDriver() != null) ? empbonusObj.getDriver().getFullName() : "");
				System.out.println("\noutput.getEmployeeis"+output.getEmployees()+"\n");
				output.setCategories((empbonusObj.getCategory().getName() != null) ? empbonusObj.getCategory().getName() : "");
				output.setCompanies((empbonusObj.getCompany() != null) ? empbonusObj.getCompany().getName() : "");
				output.setTerminals((empbonusObj.getTerminal() != null) ? empbonusObj.getTerminal().getName() : "");
				output.setEmployeesNo((empbonusObj.getDriver() != null)? empbonusObj.getDriver().getStaffId() :"");
				//output.setBonustypes((empbonusObj.getBonustype() != null)? empbonusObj.getBonustype().getTypename() : "");
				output.setBatchFroms((empbonusObj.getBatchFrom() != null)?  sdf.format(empbonusObj.getBatchFrom()):"");
				output.setBatchTos((empbonusObj.getBatchTo() != null)?  sdf.format(empbonusObj.getBatchTo()):"");
				
				//output.setNotes((empbonusObj.getNote() != null)? (empbonusObj.getNote()):"");
				//output.setBatchDates((timesheet.getBatchdate()!=null) ?sdf.format(timesheet.getBatchdate()):"");
			    //amuont= empbonusObj.getBonusamount()!=null?empbonusObj.getBonusamount():0.0;
				StringBuffer buffer=new StringBuffer("");
				StringBuffer buffer1=new StringBuffer("");
				for(EmpBonusTypesList bonusTypesList:empbonusObj.getBonusTypesLists()){
					amuont+=bonusTypesList.getBonusamount();
					buffer.append(bonusTypesList.getBonusType().getTypename());
					buffer1.append(bonusTypesList.getNote());
					buffer1.append(",");
					buffer.append(",");
				}
				if(buffer.length()>0){
				int i=buffer.lastIndexOf(",");
				buffer.deleteCharAt(i);
				}
				if(buffer1.length()>0){
					int i1=buffer1.lastIndexOf(",");
					buffer1.deleteCharAt(i1);
					}
				output.setNotes(buffer1.toString());
				output.setBonustypes(buffer.toString());
				output.setAmounts(amuont);
				
				
				sumOftotAmount+=amuont;
				
				summarys.add(output);
			}
		}
		
		
		
	
	
		sumOftotAmount = MathUtil.roundUp(sumOftotAmount, 2);
		wrapper.setSumtotalAmount(sumOftotAmount);
		wrapper.setTotalRowCount(empBonus.size());
		System.out.println("\ngenerateEmployeeBonusData\n");
		return wrapper;
	}

	@Override
	public List<ProbationReportInput> generateProbationReport(
			SearchCriteria criteria, ProbationReportInput input) {
		// TODO Auto-generated method stub
		String company=input.getCompany();
		String terminal=input.getTerminal();
		String category=input.getCategory();
		String employee=input.getDriver();
		String dateProbationStart=input.getDateProbationStart();
		String dateProbationEnd=input.getDateProbationEnd();
		dateProbationStart=ReportDateUtil.getFromDate(dateProbationStart);
		dateProbationEnd=ReportDateUtil.getToDate(dateProbationEnd);
		
		StringBuffer query=new StringBuffer("");
		int q=0;
		query.append("select obj from Driver obj where 1=1");
		if (!StringUtils.isEmpty(employee)) {
			query.append("and  obj.id in ("+employee+")");
		}
		
		if (!StringUtils.isEmpty(category)) {
			query.append("and  obj.catagory in ("+category+")");
		   }
		
		if (!StringUtils.isEmpty(company)) {
			query.append("and  obj.company in ("+company+")");
			}
		if (!StringUtils.isEmpty(terminal)) {
				query.append("and  obj.terminal in ("+terminal+")");
			}
		if(!StringUtils.isEmpty(dateProbationStart)){
			query.append("and obj.dateProbationStart>='"+dateProbationStart+"'");
			q++;
		}
		if(!StringUtils.isEmpty(dateProbationEnd)){
			query.append("and obj.dateProbationEnd<='"+dateProbationEnd+"'");
			q++;
		}
		if(q==0){
			SimpleDateFormat mysqldf1 = new SimpleDateFormat("yyyy-MM-dd");
			Date d=DateUtil.get30day();
			query.append("and  obj.dateProbationEnd>=CURRENT_DATE and obj.dateProbationEnd<='"+mysqldf1.format(d)+"'");
		}
		query.append("order by obj.company.name asc,obj.terminal.name asc,obj.lastName asc");
		List<Driver> employees =genericDAO.executeSimpleQuery(query.toString());
		List<ProbationReportInput> out =new ArrayList<ProbationReportInput>();
		
		for(Driver emp:employees){
			ProbationReportInput probationReportInput=new ProbationReportInput();
			probationReportInput.setCategory(emp.getCatagory()!=null?emp.getCatagory().getName():"");
			probationReportInput.setCompany(emp.getCompany()!=null?emp.getCompany().getName():"");
			probationReportInput.setDateHired(emp.getDateHired()!=null? sdf.format(emp.getDateHired()):"");
			probationReportInput.setDateProbationStart(emp.getDateProbationStart()!=null? sdf.format(emp.getDateProbationStart()):"");
			probationReportInput.setDateProbationEnd(emp.getDateProbationEnd()!=null? sdf.format(emp.getDateProbationEnd()):"");
			probationReportInput.setDateTerminated(emp.getDateTerminated()!=null? sdf.format(emp.getDateTerminated()):"");
			probationReportInput.setDriver(emp.getFullName()!=null?emp.getFullName():"");
			probationReportInput.setProbationDays(emp.getProbationDays());
			probationReportInput.setStaffId(emp.getStaffId()!=null?emp.getStaffId():"");
			probationReportInput.setStatus(StaticDataUtil.getText("STATUS",""+emp.getStatus()));
			probationReportInput.setTerminal(emp.getTerminal()!=null?emp.getTerminal().getName():"");
			out.add(probationReportInput);
			
		}
		return out;
	}
	
	@Override
	public EmployeeWrapper generateEmployeeReportData(SearchCriteria criteria,EmployeeInput input)
	{
		String company = input.getCompany();
		String terminal = input.getTerminal();
		String employee = input.getDriver();
		String category = input.getCategory();
		String empstatus = input.getStatus();
		
		//String hireddatefrom=input.getDateHiredfrom();
		//String hireddateto=input.getDateHiredto();
	    String hireddatefrom=ReportDateUtil.getFromDate(input.getDateHiredfrom());
		String hireddateto=	ReportDateUtil.getFromDate(input.getDateHiredto());
		
		StringBuffer query = new StringBuffer("");
		StringBuffer queryCount = new StringBuffer("");
		query.append("select obj from Driver obj where 1=1");
		queryCount.append("select obj from Driver obj where 1=1 ");
		
		if (!StringUtils.isEmpty(company)) {
		query.append(" and  obj.company in (" + company + ")");
		queryCount.append(" and obj.company in (" + company + ")");
		}
		
		if (!StringUtils.isEmpty(terminal)) {
			query.append(" and  obj.terminal in (" + terminal + ")");
			queryCount.append(" and obj.terminal in (" + terminal + ")");
		}
		if (!StringUtils.isEmpty(employee)) {
			query.append(" and  obj.id in (" + employee + ")");
			queryCount.append(" and obj.id in (" + employee + ")");
		}
		
		if (!StringUtils.isEmpty(category)) {
			query.append("and  obj.catagory in (" + category + ")");
			queryCount.append(" and obj.catagory in (" + category + ")");
		}
		
		if(!StringUtils.isEmpty(hireddatefrom)){
			query.append("and obj.dateHired>='"+hireddatefrom+"'");
			queryCount.append(" and obj.dateHired>='"+hireddatefrom+"'");
		}
		if(!StringUtils.isEmpty(hireddateto)){
			query.append("and obj.dateHired<='"+hireddateto+"'");
			queryCount.append(" and obj.dateHired<='"+hireddateto+"'");
		}
		if(!StringUtils.isEmpty(empstatus)){
			query.append("and  obj.status in (" + empstatus + ")");
			queryCount.append(" and obj.status in (" + empstatus + ")");
		}
		
		
		System.out.println("\ntEmp Query=>" + query + "\n");
		List<Driver> emp = genericDAO.executeSimpleQuery(query.toString());
		System.out.println("\ntts.size()=>" + emp.size() + "\n");
		List<Driver> summarys = new ArrayList<Driver>();
		EmployeeWrapper wrapper=new EmployeeWrapper();
		wrapper.setDrivers(summarys);
		
		for (Driver empObj : emp) {
			
			Driver output = new Driver();
			
			output.setStaffId(empObj.getStaffId()!=null?empObj.getStaffId():"");
			output.setFullName(empObj.getFullName()!=null?empObj.getFullName():"");
			output.setCategories(empObj.getCatagory()!=null?empObj.getCatagory().getName():"");
			output.setCompanies(empObj.getCompany()!=null?empObj.getCompany().getName():"");
			output.setTerminals(empObj.getTerminal()!=null?empObj.getTerminal().getName():"");			
			output.setEmpshift(empObj.getShift().equals("1") ? "Day" : "Night");
			output.setDatesTerminated(empObj.getDateTerminated()!=null? sdf.format(empObj.getDateTerminated()):"");
			output.setFirstName(empObj.getFirstName()!=null?empObj.getFirstName():"");
			output.setLastName(empObj.getLastName()!=null?empObj.getLastName():"");
			output.setHiredDate(empObj.getDateHired()!=null? sdf.format(empObj.getDateHired()):"");
			output.setRehiredDate(empObj.getDateReHired()!=null? sdf.format(empObj.getDateReHired()):"");
			output.setProbationDays(empObj.getProbationDays());
			output.setProbationStartDate(empObj.getDateProbationStart()!=null? sdf.format(empObj.getDateProbationStart()):"");
			output.setProbationEndDate(empObj.getDateProbationEnd()!=null? sdf.format(empObj.getDateProbationEnd()):"");
			output.setEmpanniversaryDate(empObj.getAnniversaryDate()!=null? sdf.format(empObj.getAnniversaryDate()):"");			
			output.setEmpstatus(empObj.getStatus()==1 ? "Active": "Inactive");			
			summarys.add(output);				
		}
		
		
		return wrapper;
	}
	///***********************************************************
	///***********************************************************
	///***********************************************************
	@Override
	public DriverPayWrapper generateDriverPayHistory(SearchCriteria criteria,
			DriverPayHistoryInput input) {

		// TODO Auto-generated method stub
		Map criterias = new HashMap();
		List<String> str = new ArrayList<String>();
		int errorCount = 0;
		Map<String, Double> map=new HashMap<String, Double>();
		Map<String, Integer> map1=new HashMap<String, Integer>();		
		
		String payrollDate=input.getPayrollBatchDate();
		String driverid=input.getDrivers();
		String frombatch=input.getBatchDateFrom();
		String tobatch=input.getBatchDateTo();
		String company=input.getCompanies();
		String terminal=input.getTerminals();
		 String expire= (String) criteria.getSearchMap().get("expire");
		 String status=input.getPayrollstatus();
		 String sta=(String)criteria.getSearchMap().get("stat");
		 String driversmul=(String)criteria.getSearchMap().get("driversmul");
		
		frombatch=ReportDateUtil.getFromDate(frombatch);
		tobatch=ReportDateUtil.getFromDate(tobatch);		
		
		payrollDate=ReportDateUtil.getFromDate(payrollDate);
		 String sum= (String) criteria.getSearchMap().get("summary");
		 Location companylocation=null;
		 Location terminallocation=null;
		 String driverIds="";
		 if(!StringUtils.isEmpty(company)){
		    companylocation=genericDAO.getById(Location.class, Long.parseLong(company));
		 }
		 if(!StringUtils.isEmpty(terminal)){
			    terminallocation=genericDAO.getById(Location.class, Long.parseLong(terminal));
			}
		 
		 if(!StringUtils.isEmpty(company) && StringUtils.isEmpty(driverid)){
			 Map drivercriteria = new HashMap();
			 drivercriteria.clear();
			 drivercriteria.put("company.id",companylocation.getId());
			 List<Driver> drivers = genericDAO.findByCriteria(Driver.class, drivercriteria);
			 for(Driver driverObj:drivers){
				 if(driverIds.equals(""))
					 driverIds = driverObj.getId().toString();
				else
					driverIds = driverIds +","+driverObj.getId().toString();
			 }
		}
		 
		Driver driver=null;
		List<Driver> drivers=null;
		/*if(!StringUtils.isEmpty(driverid)){
		Driver employee= genericDAO.getById(Driver.class,Long.parseLong(driverid));
		criterias.put("fullName",employee.getFullName());
	    Driver driver=genericDAO.getByCriteria(Driver.class, criterias);
		}*/
		StringBuffer query=new StringBuffer("");
	
	    	query.append("select obj from Ticket obj where obj.status=1 and  obj.billBatch>='"+frombatch+
		"' and obj.billBatch<='"+tobatch+"'");
	   
        if(!StringUtils.isEmpty(driverid)){        	
        	query.append(" and obj.driver.fullName='"+driverid+"'");
        }
        
        if(!StringUtils.isEmpty(company) && !StringUtils.isEmpty(driverid)){
        	query.append(" and obj.driver.fullName='"+driverid+"'");
        }
        else if(!StringUtils.isEmpty(company) && StringUtils.isEmpty(driverid)){
        	query.append(" and obj.driver in (").append(driverIds).append(")");
        }
       
        if(!StringUtils.isEmpty(terminal)){
            query.append(" and obj.terminal="+terminal);
        }
        if(!StringUtils.isEmpty(driversmul)){
        	query.append(" and obj.driver not in ("+driversmul+")");
        }
		 if(!StringUtils.isEmpty(status)){
    		 query.append("and  obj.payRollStatus in ("+status+")");
    	 }
		 if(!StringUtils.isEmpty(payrollDate)){
			 query.append("and obj.payRollBatch='"+payrollDate+"'");
		 }
        
       /* if(StringUtils.isEmpty(driverid))*/
        if(StringUtils.contains(sum, "true")){
        	
        	StringBuffer driquery=new StringBuffer("");
        	driquery.append("select DISTINCT(obj.driver.fullName) from Ticket obj where obj.status=1 and  obj.billBatch>='"+frombatch+
   		"' and obj.billBatch<='"+tobatch+"' ");
        	
        	 if(!StringUtils.isEmpty(terminal)){
        		 driquery.append(" and obj.terminal="+terminal);
                 }
        	 
             
             if(!StringUtils.isEmpty(company) && !StringUtils.isEmpty(driverid)){
            	 driquery.append(" and obj.driver.fullName='"+driverid+"'");
             }
             else if(!StringUtils.isEmpty(company) && StringUtils.isEmpty(driverid)){
            	 driquery.append(" and obj.driver in (").append(driverIds).append(")");
             }
             
             if(!StringUtils.isEmpty(driverid)){        	
        		 driquery.append(" and obj.driver.fullName='"+driverid+"'");
             }
             
        	 if(!StringUtils.isEmpty(driversmul)){
        		 driquery.append(" and obj.driver not in ("+driversmul+")");
             }
        	
	        	 if(!StringUtils.isEmpty(status)){
	        		 driquery.append("and  obj.payRollStatus in ("+status+")");
	        	 }
	        	 if(!StringUtils.isEmpty(payrollDate)){
	        		 driquery.append("and obj.payRollBatch='"+payrollDate+"'");
	    		 }
	        	 driquery.append(" order by obj.driver.fullName");
	        	 	System.out.println("**************** test query is "+driquery.toString());
	        	 	drivers=genericDAO.executeSimpleQuery(driquery.toString());
	        	 	 Map criti = new HashMap();
	        	 	for(int i=0;i<drivers.size();i++){	
	    	        	
	    	        	
	    	        	String driverFullName = String.valueOf(drivers.get(i));	
	    	        	criti.clear();
	    	        	criti.put("fullName",driverFullName);
	    	        	Driver driver2 = genericDAO.getByCriteria(Driver.class, criti);
	               	 map.put(driver2.getFullName(),0.0);
	               	 map1.put(driver2.getFullName(),0);
	                }
	         }        
        
        
        query.append(" group by obj.origin,obj.destination");
        if(StringUtils.isEmpty(driverid)){
        	query.append(",obj.driver.fullName");
        }
        query.append(" order by obj.driver.fullName asc, obj.origin.name ,obj.destination.name asc");
        System.out.println("\n query-->"+query);
		List<Ticket> tickets=genericDAO.executeSimpleQuery(query.toString());
		DriverPayWrapper wrapper=new DriverPayWrapper();
		List<DriverPay> summarys=new ArrayList<DriverPay>();
		Map<String,Double> sumAmounts = new HashMap<String,Double>();
		wrapper.setDriverPays(summarys);
		double sumAmount=0.0;
		int totalcount=0;
		boolean expiredRate = false;
		List<String> driverNames = new ArrayList<String>();
		for(Ticket ticket:tickets){
			
			driverNames.add(ticket.getDriver().getFullName());
			
			StringBuffer countquery=new StringBuffer("");
			/*String*/ countquery.append("select count(obj) from Ticket obj where obj.status=1 and  obj.billBatch>='"+frombatch+
		    "' and obj.billBatch<='"+tobatch+"'  and obj.origin="+ticket.getOrigin().getId()+" and obj.destination="+ticket.getDestination().getId());
			 if(!StringUtils.isEmpty(driverid)){
				 countquery.append("and obj.driver.fullName='"+driverid+"'");
			 }
			 else{
				 countquery.append("and obj.driver.fullName='"+ticket.getDriver().getFullName()+"'");
			 }
			 
			 Long recordCount = (Long) genericDAO.getEntityManager()
			.createQuery(countquery.toString()).getSingleResult();
			 
			 
			 StringBuffer ticketquery=new StringBuffer("");
				/*String*/ ticketquery.append("select obj from Ticket obj where obj.status=1 and  obj.billBatch>='"+frombatch+
			    "' and obj.billBatch<='"+tobatch+"'  and obj.origin="+ticket.getOrigin().getId()+" and obj.destination="+ticket.getDestination().getId());
				 if(!StringUtils.isEmpty(driverid)){
					 ticketquery.append("and obj.driver.fullName='"+driverid+"'");
				 }
				 else{
					 ticketquery.append("and obj.driver.fullName='"+ticket.getDriver().getFullName()+"'");
				 }
				
			 List<Ticket> filtrdtickets = genericDAO.executeSimpleQuery(ticketquery.toString());  
			 int sundaycount = 0;
			 for(Ticket ticketObj : filtrdtickets) {
				 LocalDate unloadDate = new LocalDate(ticketObj.getUnloadDate());
				 
				 if(unloadDate.getDayOfWeek() == DateTimeConstants.SUNDAY)
					 sundaycount++;
			 }
			 
			
			 
			double amount=0.0;
			double sundayAmount = 0.0;
			boolean calculateOtherRow =  true;
			
			if(sundaycount > 0){
				DriverPay pay=new DriverPay();
				int diffCount = Integer.parseInt(recordCount.toString()) - sundaycount;
				pay.setNoOfLoad(sundaycount);
				if(diffCount == 0.0){
					calculateOtherRow = false;
				}
				pay.setOrigin(ticket.getOrigin().getName());
				pay.setDestination(ticket.getDestination().getName());
				if(ticket.getCompanyLocation()!=null)
					pay.setCompanyname(ticket.getCompanyLocation().getName());
				else
					pay.setCompanyname("");
				
				if(ticket.getDriver().getTerminal()!=null)
					pay.setTerminalname(ticket.getDriver().getTerminal().getName());
				else
					pay.setTerminalname("");
				
				try{
					Long destination_id;
					Location location = genericDAO.getById(Location.class, ticket
							.getDestination().getId());
					if (location.getName().equalsIgnoreCase("grows")
							|| location.getName().equalsIgnoreCase("tullytown")) {
	                        destination_id = 91l;
	               } else {
						destination_id = ticket.getDestination().getId();
					}
					String rateQuery = "select obj from DriverPayRate obj where obj.transferStation='"
							+ ticket.getOrigin().getId() + "' and obj.landfill='"
							/* + ticket.getDestination().getId() + "'"; */
							+ destination_id + "'";
				List<DriverPayRate>	fs = genericDAO.executeSimpleQuery(rateQuery);
				DriverPayRate payRate = null;
				if (fs != null && fs.size() > 0) {
					for (DriverPayRate rate : fs) {
						if (rate.getRateUsing() == null) {
							payRate = rate;
							break;
						} else if (rate.getRateUsing() == 1) {
							// calculation for a load date
							if ((ticket.getLoadDate().getTime() >= rate
									.getValidFrom().getTime())
									&& (ticket.getLoadDate().getTime() <= rate
											.getValidTo().getTime())) {
								payRate = rate;
								break;
							}
						} else if (rate.getRateUsing() == 2) {
							// calculation for a unload date
							if ((ticket.getUnloadDate().getTime() >= rate
									.getValidFrom().getTime())
									&& (ticket.getUnloadDate().getTime() <= rate
											.getValidTo().getTime())) {
								payRate = rate;
								break;
							}
						}
					}
					}
				if(payRate==null){
					pay.setAmount(0.0);
					sumAmount+=0.0;
					if(StringUtils.contains(expire, "1")){
					if (!expiredRate)
						str.add("<u>Rates Are Expired or not Available</u></br>");
					expiredRate = true;
					errorCount++;
					Location originName = genericDAO.getById(Location.class,
							ticket.getOrigin().getId());
					Location DestinationName = genericDAO.getById(
							Location.class, ticket.getDestination().getId());
					boolean cont = str.contains((originName.getName() + " - "
							+ DestinationName.getName() + "</br>"));
					String string = (originName.getName() + " - "
							+ DestinationName.getName() + "</br>");

					if (!cont)
						str.add(string);
					}
				
				}else{
					
					Map criti=new HashMap();
					criti.clear();
					criti.put("fullName",ticket.getDriver().getFullName() );
					Driver empObj=genericDAO.getByCriteria(Driver.class, criti);					
					double nofload=Double.parseDouble(pay.getNoOfLoad()+"");
					if(empObj.getId()!=null){
						if(empObj.getShift().equals("1")){							
							if(sundaycount > 0){
								double sundayRate = payRate.getPayRate() * payRate.getSundayRateFactor();
								sundayAmount = sundaycount * sundayRate;
								pay.setRate(payRate.getPayRate() * payRate.getSundayRateFactor());
							}						
						}
						else{
							if(sundaycount > 0){
								double sundayRate = payRate.getNightPayRate() * payRate.getSundayRateFactor();
								sundayAmount = sundaycount * sundayRate;
								pay.setRate(payRate.getNightPayRate() * payRate.getSundayRateFactor());
							}						
						}
					}
					else{
						if(sundaycount > 0){
							double sundayRate = payRate.getPayRate() * payRate.getSundayRateFactor();
							sundayAmount = sundaycount * sundayRate;
							pay.setRate(payRate.getPayRate() * payRate.getSundayRateFactor());
						}					
					}
					amount =  sundayAmount;
					sumAmount+=amount;
					amount=MathUtil.roundUp(amount, 2);
					pay.setAmount(amount);
					//pay.setRate(payRate.getPayRate());
				}
				pay.setNoOfLoad(sundaycount);
				//if(StringUtils.isEmpty(driverid))
				pay.setDrivername(ticket.getDriver().getFullName());
				//pay.setCompanyname(ticket.getDriver().getCompany().getName());
				totalcount+=pay.getNoOfLoad();
				}
				catch (Exception ex) {
					ex.printStackTrace();
				}
				summarys.add(pay);
				
			 }
			
				
			if(calculateOtherRow){
				DriverPay pay=new DriverPay();
				pay.setNoOfLoad(Integer.parseInt(recordCount.toString())-sundaycount);
				pay.setOrigin(ticket.getOrigin().getName());
				pay.setDestination(ticket.getDestination().getName());
				if(ticket.getCompanyLocation()!=null)
					pay.setCompanyname(ticket.getCompanyLocation().getName());
				else
					pay.setCompanyname("");
				
				if(ticket.getDriver().getTerminal()!=null)
					pay.setTerminalname(ticket.getDriver().getTerminal().getName());
				else
					pay.setTerminalname("");
				
				try{
					Long destination_id;
					Location location = genericDAO.getById(Location.class, ticket
						.getDestination().getId());
					if (location.getName().equalsIgnoreCase("grows")
						|| location.getName().equalsIgnoreCase("tullytown")) {
                        destination_id = 91l;
					} else {
						destination_id = ticket.getDestination().getId();
					}
					String rateQuery = "select obj from DriverPayRate obj where obj.transferStation='"
						+ ticket.getOrigin().getId() + "' and obj.landfill='"
						/* + ticket.getDestination().getId() + "'"; */
						+ destination_id + "'";
					List<DriverPayRate>	fs = genericDAO.executeSimpleQuery(rateQuery);
					DriverPayRate payRate = null;
					if (fs != null && fs.size() > 0) {
						for (DriverPayRate rate : fs) {
							if (rate.getRateUsing() == null) {
								payRate = rate;
								break;
							} else if (rate.getRateUsing() == 1) {
						// calculation for a load date
						if ((ticket.getLoadDate().getTime() >= rate
								.getValidFrom().getTime())
								&& (ticket.getLoadDate().getTime() <= rate
										.getValidTo().getTime())) {
							payRate = rate;
							break;
						}
					} else if (rate.getRateUsing() == 2) {
						// calculation for a unload date
						if ((ticket.getUnloadDate().getTime() >= rate
								.getValidFrom().getTime())
								&& (ticket.getUnloadDate().getTime() <= rate
										.getValidTo().getTime())) {
							payRate = rate;
							break;
						}
					}
				}
				}
			if(payRate==null){
				pay.setAmount(0.0);
				sumAmount+=0.0;
				if(StringUtils.contains(expire, "1")){
				if (!expiredRate)
					str.add("<u>Rates Are Expired or not Available</u></br>");
				expiredRate = true;
				errorCount++;
				Location originName = genericDAO.getById(Location.class,
						ticket.getOrigin().getId());
				Location DestinationName = genericDAO.getById(
						Location.class, ticket.getDestination().getId());
				boolean cont = str.contains((originName.getName() + " - "
						+ DestinationName.getName() + "</br>"));
				String string = (originName.getName() + " - "
						+ DestinationName.getName() + "</br>");

				if (!cont)
					str.add(string);
				}
			
			}else{
				
				Map criti=new HashMap();
				criti.clear();
				criti.put("fullName",ticket.getDriver().getFullName() );
				Driver empObj=genericDAO.getByCriteria(Driver.class, criti);
				
				double nofload=Double.parseDouble(pay.getNoOfLoad()+"");
				if(empObj.getId()!=null){
					if(empObj.getShift().equals("1")){						
						pay.setRate(payRate.getPayRate());						
						amount=nofload*payRate.getPayRate();
					}
					else{						
						pay.setRate(payRate.getNightPayRate());						
						amount= nofload*payRate.getNightPayRate();						
					}
				}
				else{
					pay.setRate(payRate.getPayRate());
					amount= nofload*payRate.getPayRate();					
				}				
				sumAmount+=amount;
				amount=MathUtil.roundUp(amount, 2);
				pay.setAmount(amount);
				//pay.setRate(payRate.getPayRate());
			}
			pay.setNoOfLoad(pay.getNoOfLoad());
			//if(StringUtils.isEmpty(driverid))
			pay.setDrivername(ticket.getDriver().getFullName());
			//pay.setCompanyname(ticket.getDriver().getCompany().getName());
			totalcount+=pay.getNoOfLoad();			
			
			if(sumAmounts.get(ticket.getDriver().getFullName()) != null ){
				double driveramount= sumAmounts.get(ticket.getDriver().getFullName());
				driveramount = driveramount + amount;
				sumAmounts.put(ticket.getDriver().getFullName(),driveramount);
			}else{
				sumAmounts.put(ticket.getDriver().getFullName(),amount);
			}
			
			
		
			}
			catch (Exception ex) {
				ex.printStackTrace();
			}
			summarys.add(pay);
		}
		}
		
		wrapper.setDriverNames(driverNames);
		wrapper.setSumAmountsMap(sumAmounts);
		sumAmount=MathUtil.roundUp(sumAmount, 2);
		wrapper.setTotalRowCount(totalcount);
		wrapper.setSumTotal(sumAmount);		
		wrapper.setBatchDateFrom(input.getPayrollBatchDate());
		wrapper.setBatchDateTo(input.getBatchDateTo());
		wrapper.setPayRollBatch(input.getPayrollBatchDate());
		if(!StringUtils.isEmpty(company)){
		wrapper.setCompany(companylocation.getName());
		wrapper.setCompanylocation(companylocation);
		}
		if(!StringUtils.isEmpty(terminal)){
		wrapper.setTerminal(terminallocation);
		}
		if(driver!=null){
		wrapper.setDriver(driver.getFullName());
		wrapper.setCompany(driver.getCompany().getName());
		}
		/*if(StringUtils.isEmpty(driverid))*/
		if(StringUtils.contains(sum, "true")){
			for(DriverPay driverPay:wrapper.getDriverPays()){
				Double amount=map.get(driverPay.getDrivername());
				if(amount==null){
				amount=0.0;	
				}
				Double totamount=amount+driverPay.getAmount();
				Integer count=map1.get(driverPay.getDrivername());
				if(count==null){
					count=0;
				}	
				Integer totcount=count+driverPay.getNoOfLoad();
				map1.put(driverPay.getDrivername(), totcount);
				map.put(driverPay.getDrivername(), totamount);
			}
			wrapper.getDriverPays().clear();
		}
		/*if(StringUtils.isEmpty(driverid))*/
		if(StringUtils.contains(sum, "true")){
		List<DriverPay> fields=new ArrayList<DriverPay>();
		wrapper.setDriverPays(fields);
		/*if(StringUtils.isEmpty(driverid))*/
		
		Map empmap=new HashMap();
		double TotalAmount=0.0;
		
		
		Map criti = new HashMap();
		String drivernames = "";
        for(int i=0;i<drivers.size();i++){
        	System.out.println("***** The driver is "+drivers.get(i));		        	
        	String driverFullName = String.valueOf(drivers.get(i));	
        	if(drivernames.equals("")){
        		drivernames ="'"+String.valueOf(drivers.get(i))+"'";	
        	}
        	else{
        		drivernames = drivernames+",'"+ String.valueOf(drivers.get(i))+"'";
        	}
        	criti.clear();
        	criti.put("fullName",driverFullName);
        	Driver driver3 = genericDAO.getByCriteria(Driver.class, criti);
       	
        		Double deductionAmount = 0.0;
				Double sickParsonalAmount=0.0;
				Double vacationAmount=0.0;
				Double bonusAmount=0.0;
				Double miscAmount=0.0;
				Double holidayAmount=0.0;
				DriverPay pay=new DriverPay();
				pay.setDrivername(driver3.getFullName());
				pay.setCompanyname(driver3.getCompany().getName());
				pay.setTerminalname(driver3.getTerminal().getName());
				Double amount=0.0;
				amount=(Double)(map.get(driver3.getFullName()));				
				empmap.clear();
				empmap.put("fullName", driver3.getFullName());
				empmap.put("status",1);
				Driver employee=genericDAO.getByCriteria(Driver.class, empmap);				
				Double miscamt=0.0;	
				Double reimburseAmount=0.0;	
				if(employee!=null){
				StringBuffer miscamountquery=new StringBuffer("select obj from MiscellaneousAmount obj where obj.driver.fullName='"+employee.getFullName()+"' and obj.miscNotes!='Reimbursement'");
				if(!StringUtils.isEmpty(frombatch)){
					miscamountquery.append(" and obj.batchFrom>='"+frombatch+"'");
				}
				if(!StringUtils.isEmpty(tobatch)){
					miscamountquery.append(" and obj.batchTo<='"+tobatch+"'");
				}			
				List<MiscellaneousAmount> miscamounts=genericDAO.executeSimpleQuery(miscamountquery.toString());
				for(MiscellaneousAmount miscamnt:miscamounts){
					miscamt+=miscamnt.getMisamount();					
				}	
				
				
				StringBuffer reimburseamountquery=new StringBuffer("select obj from MiscellaneousAmount obj where obj.driver.fullName='"+employee.getFullName()+"' and obj.miscNotes='Reimbursement'");
				if(!StringUtils.isEmpty(frombatch)){
					reimburseamountquery.append(" and obj.batchFrom>='"+frombatch+"'");
				}
				if(!StringUtils.isEmpty(tobatch)){
					reimburseamountquery.append(" and obj.batchTo<='"+tobatch+"'");
				}			
				List<MiscellaneousAmount> reimburseamounts=genericDAO.executeSimpleQuery(reimburseamountquery.toString());
				for(MiscellaneousAmount reimbursecamnt:reimburseamounts){
					reimburseAmount+=reimbursecamnt.getMisamount();					
				}
				
			    }
				
				
				pay.setTransportationAmount(amount);
				amount=amount+miscamt;				
				amount=MathUtil.roundUp(amount, 2);
				pay.setAmount(amount);
				pay.setMiscAmount(miscamt);
				pay.setReimburseAmount(reimburseAmount);
				pay.setNoOfLoad(map1.get(driver3.getFullName()));
				/*empmap.clear();
				empmap.put("fullName", driver3.getFullName());
				empmap.put("status",1);
				Driver employee=genericDAO.getByCriteria(Driver.class, empmap);*/
				if(employee!=null){
					StringBuffer ptodquery=new StringBuffer("select obj from Ptodapplication obj where obj.approvestatus=1 and obj.driver.fullName='"+employee.getFullName()+"' and obj.category=2");
					if(!StringUtils.isEmpty(frombatch)){
					    ptodquery.append(" and obj.batchdate>='"+frombatch+"'");
					}
					if(!StringUtils.isEmpty(tobatch)){
						ptodquery.append(" and obj.batchdate<='"+tobatch+"'");
					}
					List<Ptodapplication> ptodapplications= genericDAO.executeSimpleQuery(ptodquery.toString());
					for(Ptodapplication ptodapplication:ptodapplications){
						if(ptodapplication.getLeavetype().getId()==1){
							sickParsonalAmount=sickParsonalAmount+(ptodapplication.getAmountpaid())+(ptodapplication.getHourlyamountpaid());;
						}
						if(ptodapplication.getLeavetype().getId()==4){
							vacationAmount=vacationAmount+(ptodapplication.getAmountpaid())+(ptodapplication.getHourlyamountpaid());
							
						}
					}
					
					LocalDate dt= null;								
					if(!StringUtils.isEmpty(frombatch) && !StringUtils.isEmpty(tobatch)){
						if(frombatch.equalsIgnoreCase(tobatch)){
							try {											
								dt = new LocalDate(frombatch);
							} catch (Exception e) {
								System.out.println("Error Parsing Date");
							}
						}
						else{
							try {
								dt = new LocalDate(tobatch);
							} catch (Exception e) {
								System.out.println("Error Parsing Date");
							}
						}
					}
					else if (!StringUtils.isEmpty(frombatch) && StringUtils.isEmpty(tobatch)){
						try {
							dt = new LocalDate(frombatch);
						} catch (Exception e) {
							System.out.println("Error Parsing Date");
						}
					}
					else if (StringUtils.isEmpty(frombatch) && !StringUtils.isEmpty(tobatch)){
						try {
							dt = new LocalDate(tobatch);
						} catch (Exception e) {
							System.out.println("Error Parsing Date");
						}
					}				
					
					
					if(employee.getDateProbationEnd()!=null){
						if(new LocalDate(employee.getDateProbationEnd()).isAfter(dt)){
							double miscAndLoadAmt = amount + sickParsonalAmount+ vacationAmount;											
							deductionAmount =  miscAndLoadAmt * 0.10;
							if(deductionAmount > 100.0){
								deductionAmount = 100.0;
							}
						}	
					}
					deductionAmount=MathUtil.roundUp(deductionAmount, 2);
					
					StringBuffer bonusquery=new StringBuffer("select obj from EmployeeBonus obj where obj.driver.fullName='"+employee.getFullName()+"' and obj.category=2");
					if(!StringUtils.isEmpty(frombatch)){
						bonusquery.append(" and obj.batchFrom>='"+frombatch+"'");
					}
					if(!StringUtils.isEmpty(tobatch)){
						bonusquery.append(" and obj.batchTo<='"+tobatch+"'");
					}
						List<EmployeeBonus> bonuses=genericDAO.executeSimpleQuery(bonusquery.toString());
						for(EmployeeBonus bonus:bonuses){
							for(EmpBonusTypesList list:bonus.getBonusTypesLists()){
								bonusAmount+=list.getBonusamount();
								//miscAmount+=list.getMisamount();
							}
						}
					StringBuffer holidayquery=new StringBuffer("select obj from HolidayType obj where obj.paid=1 and obj.company="+employee.getCompany().getId()+" and obj.terminal="+employee.getTerminal().getId()+" and obj.catagory="+employee.getCatagory().getId()+" and obj.leaveType=3");
					if(!StringUtils.isEmpty(frombatch)){
						holidayquery.append(" and obj.batchdate='"+frombatch+"'");
						}
						/*if(!StringUtils.isEmpty(tobatch)){
							holidayquery.append(" and obj.batchdate<='"+tobatch+"'");
						}*/
						List<HolidayType> holidayTypes=genericDAO.executeSimpleQuery(holidayquery.toString());
						for(HolidayType type:holidayTypes){
							holidayAmount=holidayAmount+type.getAmount();
						}
					
				}
				
				pay.setProbationDeductionAmount(deductionAmount);
				pay.setBonusAmount(bonusAmount);
				pay.setSickPersonalAmount(sickParsonalAmount);
				pay.setVacationAmount(vacationAmount);
				pay.setHolidayAmount(holidayAmount);
				Double totalAmount=pay.getAmount()+pay.getSickPersonalAmount()+pay.getBonusAmount()+pay.getHolidayAmount()-pay.getProbationDeductionAmount();
				totalAmount=MathUtil.roundUp(totalAmount, 2);
				TotalAmount+=totalAmount;
				pay.setTotalAmount(totalAmount);
				fields.add(pay);
			}
		
        
        
        //******************************************************************
        List<Driver> driverWithOutTickets = null;
        if(!drivernames.equals("") && StringUtils.isEmpty(driverid)){
        	StringBuffer drivernameauery = new StringBuffer("select obj from Driver obj where obj.status=1 and obj.catagory=2 and  obj.fullName not in ("+drivernames+")");
        	if(!StringUtils.isEmpty(company)){
        		drivernameauery.append(" and obj.company="+company);
        	}
        	if(!StringUtils.isEmpty(terminal)){
        		drivernameauery.append(" and obj.terminal="+terminal);
             }
        	
        	 driverWithOutTickets = genericDAO.executeSimpleQuery(drivernameauery.toString());
        }
        else if(drivernames.equals("") && !StringUtils.isEmpty(driverid)){
        	StringBuffer drivernameauery = new StringBuffer("select obj from Driver obj where obj.status=1 and obj.catagory=2 and  obj.fullName in ('"+driverid+"')");
        	if(!StringUtils.isEmpty(company)){
        		drivernameauery.append(" and obj.company="+company);
        	}
        	if(!StringUtils.isEmpty(terminal)){
        		drivernameauery.append(" and obj.terminal="+terminal);
             }       	
        	
        	 driverWithOutTickets = genericDAO.executeSimpleQuery(drivernameauery.toString());
        }
       
        if(driverWithOutTickets!=null){
        for(Driver driverWithOutTicket: driverWithOutTickets){        
       	
        		boolean setDriver = false;
        		Double deductionAmount = 0.0;
				Double sickParsonalAmount=0.0;
				Double vacationAmount=0.0;
				Double bonusAmount=0.0;
				Double miscAmount=0.0;
				Double holidayAmount=0.0;
				DriverPay pay=new DriverPay();
				pay.setDrivername(driverWithOutTicket.getFullName());
				if(driverWithOutTicket.getCompany()!=null)
					pay.setCompanyname(driverWithOutTicket.getCompany().getName());
				else
					pay.setCompanyname("");
				
				pay.setTerminalname(driverWithOutTicket.getTerminal().getName());
				Double amount=0.0;
				//amount=(Double)(map.get(driverWithOutTicket.getFullName()));				
				
				Driver employee= driverWithOutTicket;				
				Double miscamt=0.0;	
				Double reimburseAmount=0.0;	
				if(employee!=null){
				StringBuffer miscamountquery=new StringBuffer("select obj from MiscellaneousAmount obj where obj.driver.fullName='"+employee.getFullName()+"' and obj.miscNotes!='Reimbursement'");
				if(!StringUtils.isEmpty(frombatch)){
					miscamountquery.append(" and obj.batchFrom>='"+frombatch+"'");
				}
				if(!StringUtils.isEmpty(tobatch)){
					miscamountquery.append(" and obj.batchTo<='"+tobatch+"'");
				}			
				List<MiscellaneousAmount> miscamounts=genericDAO.executeSimpleQuery(miscamountquery.toString());
				for(MiscellaneousAmount miscamnt:miscamounts){
					setDriver = true;
					miscamt+=miscamnt.getMisamount();					
				}	
				
				
				StringBuffer reimburseamountquery=new StringBuffer("select obj from MiscellaneousAmount obj where obj.driver.fullName='"+employee.getFullName()+"' and obj.miscNotes='Reimbursement'");
				if(!StringUtils.isEmpty(frombatch)){
					reimburseamountquery.append(" and obj.batchFrom>='"+frombatch+"'");
				}
				if(!StringUtils.isEmpty(tobatch)){
					reimburseamountquery.append(" and obj.batchTo<='"+tobatch+"'");
				}			
				List<MiscellaneousAmount> reimburseamounts=genericDAO.executeSimpleQuery(reimburseamountquery.toString());
				for(MiscellaneousAmount reimbursecamnt:reimburseamounts){
					setDriver = true;
					reimburseAmount+=reimbursecamnt.getMisamount();					
				}
				
			    }
				pay.setTransportationAmount(amount);
				amount=amount+miscamt;				
				amount=MathUtil.roundUp(amount, 2);
				pay.setAmount(amount);
				pay.setMiscAmount(miscamt);
				pay.setReimburseAmount(reimburseAmount);
				pay.setNoOfLoad(0);
				
				Driver employees=driverWithOutTicket;
				if(employees!=null){
					StringBuffer ptodquery=new StringBuffer("select obj from Ptodapplication obj where obj.approvestatus=1 and obj.driver.fullName='"+employees.getFullName()+"' and obj.category=2");
					if(!StringUtils.isEmpty(frombatch)){
					    ptodquery.append(" and obj.batchdate>='"+frombatch+"'");
					}
					if(!StringUtils.isEmpty(tobatch)){
						ptodquery.append(" and obj.batchdate<='"+tobatch+"'");
					}
					List<Ptodapplication> ptodapplications= genericDAO.executeSimpleQuery(ptodquery.toString());
					for(Ptodapplication ptodapplication:ptodapplications){
						if(ptodapplication.getLeavetype().getId()==1){
							setDriver = true;
							sickParsonalAmount=sickParsonalAmount+(ptodapplication.getAmountpaid())+(ptodapplication.getHourlyamountpaid());;
						}
						if(ptodapplication.getLeavetype().getId()==4){
							setDriver = true;
							vacationAmount=vacationAmount+(ptodapplication.getAmountpaid())+(ptodapplication.getHourlyamountpaid());
							
						}
					}
					
					LocalDate dt= null;								
					if(!StringUtils.isEmpty(frombatch) && !StringUtils.isEmpty(tobatch)){
						if(frombatch.equalsIgnoreCase(tobatch)){
							try {											
								dt = new LocalDate(frombatch);
							} catch (Exception e) {
								System.out.println("Error Parsing Date");
							}
						}
						else{
							try {
								dt = new LocalDate(tobatch);
							} catch (Exception e) {
								System.out.println("Error Parsing Date");
							}
						}
					}
					else if (!StringUtils.isEmpty(frombatch) && StringUtils.isEmpty(tobatch)){
						try {
							dt = new LocalDate(frombatch);
						} catch (Exception e) {
							System.out.println("Error Parsing Date");
						}
					}
					else if (StringUtils.isEmpty(frombatch) && !StringUtils.isEmpty(tobatch)){
						try {
							dt = new LocalDate(tobatch);
						} catch (Exception e) {
							System.out.println("Error Parsing Date");
						}
					}				
					
					
					if(employee.getDateProbationEnd()!=null){
						if(new LocalDate(employee.getDateProbationEnd()).isAfter(dt)){
							
						}
						else{
							
						}	
					}
					
					
					StringBuffer bonusquery=new StringBuffer("select obj from EmployeeBonus obj where obj.driver.fullName='"+employee.getFullName()+"' and obj.category=2");
					if(!StringUtils.isEmpty(frombatch)){
						bonusquery.append(" and obj.batchFrom>='"+frombatch+"'");
					}
					if(!StringUtils.isEmpty(tobatch)){
						bonusquery.append(" and obj.batchTo<='"+tobatch+"'");
					}
						List<EmployeeBonus> bonuses=genericDAO.executeSimpleQuery(bonusquery.toString());
						for(EmployeeBonus bonus:bonuses){
							for(EmpBonusTypesList list:bonus.getBonusTypesLists()){
								setDriver = true;
								bonusAmount+=list.getBonusamount();
								//miscAmount+=list.getMisamount();
							}
						}
					StringBuffer holidayquery=new StringBuffer("select obj from HolidayType obj where obj.paid=1 and obj.company="+employee.getCompany().getId()+" and obj.terminal="+employee.getTerminal().getId()+" and obj.catagory="+employee.getCatagory().getId()+" and obj.leaveType=3");
					if(!StringUtils.isEmpty(frombatch)){
						holidayquery.append(" and obj.batchdate='"+frombatch+"'");
						}
						if(!StringUtils.isEmpty(tobatch)){
							holidayquery.append(" and obj.batchdate<='"+tobatch+"'");
						}
						List<HolidayType> holidayTypes=genericDAO.executeSimpleQuery(holidayquery.toString());
						for(HolidayType type:holidayTypes){
							setDriver = true;
							holidayAmount=holidayAmount+type.getAmount();
						}
					
				}
				
				pay.setProbationDeductionAmount(0.0);
				pay.setBonusAmount(bonusAmount);
				pay.setSickPersonalAmount(sickParsonalAmount);
				pay.setVacationAmount(vacationAmount);
				pay.setHolidayAmount(holidayAmount);
				Double totalAmount=pay.getAmount()+pay.getSickPersonalAmount()+pay.getBonusAmount()+pay.getHolidayAmount()-pay.getProbationDeductionAmount();
				totalAmount=MathUtil.roundUp(totalAmount, 2);
				
				
				if(setDriver) {
					TotalAmount+=totalAmount;
					pay.setTotalAmount(totalAmount);
					fields.add(pay);			
				}
        	
        }
		}
        //************************************************************
		wrapper.setSumAmount(TotalAmount);
		
		
		
		}
		wrapper.setList(str);
		return wrapper;
	
	}
	
	
	///***********************************************************
	///***********************************************************
	///***********************************************************
	
	
	
	//@Override
	//public DriverPayWrapper generateDriverPayHistory(SearchCriteria criteria,
			//DriverPayHistoryInput input) {
		/*
	}
		// TODO Auto-generated method stub
		String driversinput=input.getDrivers();
		String companies=input.getCompanies();
		String terminals=input.getTerminals();
		String batchDateFrom=input.getBatchDateFrom();
		String batchDateTo=input.getBatchDateTo();
		String payrollBatchDate=input.getPayrollBatchDate();
		batchDateFrom=ReportDateUtil.getFromDate(batchDateFrom);
		batchDateTo=ReportDateUtil.getToDate(batchDateTo);
		payrollBatchDate=ReportDateUtil.getFromDate(payrollBatchDate);
		String payrollstatus=input.getPayrollstatus();
		Map<String, Double> map=new HashMap<String, Double>();
		Map<String, Integer> map1=new HashMap<String, Integer>();
		StringBuffer query=new StringBuffer("");
		StringBuffer driverids=new StringBuffer("");
		Map criterias=new HashMap();
		if(!StringUtils.isEmpty(driversinput)){
			String[] driverinput=driversinput.split(",");
			for(String driverstr:driverinput){
				Driver employee=genericDAO.getById(Driver.class,Long.parseLong(driverstr));
				criterias.put("fullName", employee.getFullName());
				Driver driver=genericDAO.getByCriteria(Driver.class,criterias);
				if(driver!=null){
					driverids.append(driver.getId());
					driverids.append(",");
				}
			}
			int d=driverids.lastIndexOf(",");
			if(d>0){
				driverids.deleteCharAt(d);
			}
		}
		query.append("select obj from Ticket obj where obj.status=1 and  obj.billBatch>='"+batchDateFrom+
    			"' and obj.billBatch<='"+batchDateTo+"'");
		if(!StringUtils.isEmpty(companies)){
			query.append(" and obj.companyLocation in ("+companies+")");
		}
		if(!StringUtils.isEmpty(terminals)){
			query.append(" and obj.terminal in ("+terminals+")");
		}
		if(!StringUtils.isEmpty(driversinput)){
			query.append(" and obj.driver in ("+driverids+")");
		}
		 if(!StringUtils.isEmpty(payrollstatus)){
    		 query.append("and  obj.payRollStatus in ("+payrollstatus+")");
    	 }
		 if(!StringUtils.isEmpty(payrollBatchDate)){
			 query.append("and obj.payRollBatch='"+payrollBatchDate+"'");
		 }
			StringBuffer query1=new StringBuffer("");
	    	query1.append("select DISTINCT(obj.driver) from Ticket obj where obj.status=1 and  obj.billBatch>='"+batchDateFrom+
	    	   		"' and obj.billBatch<='"+batchDateTo+"'");
    	        	if(!StringUtils.isEmpty(companies)){
    	        		  query1.append("and obj.companyLocation in ("+companies+")");
    	                }
    	        	 if(!StringUtils.isEmpty(terminals)){
    	        		  query1.append(" and obj.terminal in ("+terminals+")");
    	                 }
    	        	 if(!StringUtils.isEmpty(driversinput)){
    	        		  query1.append("and obj.driver in ("+driverids+")");
    	        	        }
    	        	 if(!StringUtils.isEmpty(payrollstatus)){
		        		 query1.append("and  obj.payRollStatus in ("+payrollstatus+")");
		        	 }
    	        	 if(!StringUtils.isEmpty(payrollBatchDate)){
    	    			 query1.append("and obj.payRollBatch='"+payrollBatchDate+"'");
    	    		 }
    	        	 	  query1.append(" order by obj.driver.fullName");
    	        	 	List<Driver>  drivers=genericDAO.executeSimpleQuery(query1.toString());
    	                  for(Driver driver2:drivers){
    	                 	 map.put(driver2.getFullName(),0.0);
    	                 	 map1.put(driver2.getFullName(),0);
    	                  }
    	                  query.append(" group by obj.origin,obj.destination");
    	                  query.append(",obj.driver");
    	                  query.append(" order by obj.driver.fullName asc, obj.origin.name ,obj.destination.name asc");
    	                  System.out.println("\n query-->"+query);
    	          		List<Ticket> tickets=genericDAO.executeSimpleQuery(query.toString());
    	          		DriverPayWrapper wrapper=new DriverPayWrapper();
    	        		List<DriverPay> summarys=new ArrayList<DriverPay>();
    	        		wrapper.setDriverPays(summarys);
    	        		double sumAmount=0.0;
    	        		int totalcount=0;
    	        		for(Ticket ticket:tickets){
    	        			StringBuffer countquery=new StringBuffer("");
    	        			countquery.append("select count(obj) from Ticket obj where obj.status=1 and  obj.billBatch>='"+batchDateFrom+
    	        		    "' and obj.billBatch<='"+batchDateTo+"'  and obj.origin="+ticket.getOrigin().getId()+" and obj.destination="+ticket.getDestination().getId());
    	        			 countquery.append("and obj.driver="+ticket.getDriver().getId());
    	        			 if(!StringUtils.isEmpty(payrollstatus)){
    	        				 countquery.append("and  obj.payRollStatus in ("+payrollstatus+")");
    			        	 }
    	        			 if(!StringUtils.isEmpty(payrollBatchDate)){
    	        				 countquery.append("and obj.payRollBatch='"+payrollBatchDate+"'");
    	        			 }
    	        			Long recordCount = (Long) genericDAO.getEntityManager()
    	        			.createQuery(countquery.toString()).getSingleResult();
    	        			double amount=0.0;
    	        			DriverPay pay=new DriverPay();
    	        			pay.setNoOfLoad(Integer.parseInt(recordCount.toString()));
    	        			pay.setOrigin(ticket.getOrigin().getName());
    	        			pay.setDestination(ticket.getDestination().getName());
    	        			try{
    	        				Long destination_id;
    	        				Location location = genericDAO.getById(Location.class, ticket
    	        						.getDestination().getId());
    	        				if (location.getName().equalsIgnoreCase("grows")
    	        						|| location.getName().equalsIgnoreCase("tullytown")) {
    	                                destination_id = 91l;
    	                       } else {
    	        					destination_id = ticket.getDestination().getId();
    	        				}
    	        				String rateQuery = "select obj from DriverPayRate obj where obj.transferStation='"
    	        						+ ticket.getOrigin().getId() + "' and obj.landfill='"
    	        						 + ticket.getDestination().getId() + "'"; 
    	        						+ destination_id + "'";
    	        			List<DriverPayRate>	fs = genericDAO.executeSimpleQuery(rateQuery);
    	        			DriverPayRate payRate = null;
    	        			if (fs != null && fs.size() > 0) {
    	        				for (DriverPayRate rate : fs) {
    	        					if (rate.getRateUsing() == null) {
    	        						payRate = rate;
    	        						break;
    	        					} else if (rate.getRateUsing() == 1) {
    	        						// calculation for a load date
    	        						if ((ticket.getLoadDate().getTime() >= rate
    	        								.getValidFrom().getTime())
    	        								&& (ticket.getLoadDate().getTime() <= rate
    	        										.getValidTo().getTime())) {
    	        							payRate = rate;
    	        							break;
    	        						}
    	        					} else if (rate.getRateUsing() == 2) {
    	        						// calculation for a unload date
    	        						if ((ticket.getUnloadDate().getTime() >= rate
    	        								.getValidFrom().getTime())
    	        								&& (ticket.getUnloadDate().getTime() <= rate
    	        										.getValidTo().getTime())) {
    	        							payRate = rate;
    	        							break;
    	        						}
    	        					}
    	        				}
    	        				}
    	        			if(payRate==null){
    	        				pay.setAmount(0.0);
    	        				sumAmount+=0.0;
    	        			}else{
    	        				double nofload=Double.parseDouble(pay.getNoOfLoad()+"");
    	        				amount= nofload*payRate.getPayRate();
    	        				sumAmount+=amount;
    	        				amount=MathUtil.roundUp(amount, 2);
    	        				pay.setAmount(amount);
    	        				pay.setRate(payRate.getPayRate());
    	        			}
    	        			
    	        			
    	        			if(payRate==null){
    	        				pay.setAmount(0.0);
    	        				sumAmount+=0.0;
    	        			}else{ 	        				
    	        				Map criti=new HashMap();
    	        				criti.clear();
    	        				criti.put("fullName",ticket.getDriver().getFullName() );
    	        				Driver empObj=genericDAO.getByCriteria(Driver.class, criti);  	        				
    	        				double nofload=Double.parseDouble(pay.getNoOfLoad()+"");
    	        				if(empObj.getId()!=null){
    	        					if(empObj.getShift().equals("1")){	    	        						
    	        						amount= nofload*payRate.getPayRate();
    	        						pay.setRate(payRate.getPayRate());
    	        					}
    	        					else{    	        						
    	        						amount= nofload*payRate.getNightPayRate();
    	        						pay.setRate(payRate.getNightPayRate());
    	        					}
    	        				}
    	        				else{					
    	        					amount= nofload*payRate.getPayRate();
    	        					pay.setRate(payRate.getPayRate());
    	        				}    	        				
    	        				//amount= nofload*payRate.getPayRate();
    	        				sumAmount+=amount;
    	        				amount=MathUtil.roundUp(amount, 2);
    	        				pay.setAmount(amount);
    	        				//pay.setRate(payRate.getPayRate())
    	        			}   	        			
    	        			
    	        			pay.setDrivername(ticket.getDriver().getFullName());
    	        			pay.setCompanyname(ticket.getDriver().getCompany().getName());
    	        			totalcount+=pay.getNoOfLoad();
    	        			}
    	        			catch (Exception ex) {
    	        				ex.printStackTrace();
    	        			}
    	        			summarys.add(pay);
    	        		}
    	        		sumAmount=MathUtil.roundUp(sumAmount, 2);
    	        		wrapper.setTotalRowCount(totalcount);
    	        		wrapper.setSumTotal(sumAmount);
    	        		wrapper.setBatchDateFrom(input.getBatchDateFrom());
    	        		wrapper.setBatchDateTo(input.getBatchDateTo());
    	        		wrapper.setPayRollBatch(input.getPayrollBatchDate());
    	        		for(DriverPay driverPay:wrapper.getDriverPays()){
    	    				Double amount=map.get(driverPay.getDrivername());
    	    				Double totamount=amount+driverPay.getAmount();
    	    				Integer count=map1.get(driverPay.getDrivername());
    	    				Integer totcount=count+driverPay.getNoOfLoad();
    	    				map1.put(driverPay.getDrivername(), totcount);
    	    				map.put(driverPay.getDrivername(), totamount);
    	    			}
    	    			wrapper.getDriverPays().clear();
    	    			List<DriverPay> fields=new ArrayList<DriverPay>();
    	    			wrapper.setDriverPays(fields);
    	    			Map empmap=new HashMap();
    	    			double TotalAmount=0.0;
    	    			{
    	    				for(Driver driver3:drivers){
    	    					Double sickParsonalAmount=0.0;
    	    					Double vacationAmount=0.0;
    	    					Double bonusAmount=0.0;
    	    					Double holidayAmount=0.0;
    	    					DriverPay pay=new DriverPay();
    	    					pay.setDrivername(driver3.getFullName());
    	    					pay.setCompanyname(driver3.getCompany().getName());
    	    					pay.setAmount(map.get(driver3.getFullName()));
    	    					pay.setNoOfLoad(map1.get(driver3.getFullName()));
    	    					empmap.clear();
    	    					empmap.put("fullName", driver3.getFullName());
    	    					Driver employee=genericDAO.getByCriteria(Driver.class, empmap);
    	    					if(employee!=null){
    	    						StringBuffer ptodquery=new StringBuffer("select obj from Ptodapplication obj where obj.driver="+employee.getId()+" and obj.category=2");
    	    						if(!StringUtils.isEmpty(batchDateFrom)){
    	    						ptodquery.append(" and obj.batchdate>='"+batchDateFrom+"'");
    	    						}
    	    						if(!StringUtils.isEmpty(batchDateTo)){
    	    							ptodquery.append(" and obj.batchdate<='"+batchDateTo+"'");
    	    						}
    	    						List<Ptodapplication> ptodapplications= genericDAO.executeSimpleQuery(ptodquery.toString());
    	    						for(Ptodapplication ptodapplication:ptodapplications){
    	    							if(ptodapplication.getLeavetype().getId()==1){
    	    								sickParsonalAmount=sickParsonalAmount+(ptodapplication.getAmountpaid())+(ptodapplication.getHourlyamountpaid());;
    	    							}
    	    							if(ptodapplication.getLeavetype().getId()==4){
    	    								vacationAmount=vacationAmount+(ptodapplication.getAmountpaid())+(ptodapplication.getHourlyamountpaid());
    	    							}
    	    						}
    	    						StringBuffer bonusquery=new StringBuffer("select obj from EmployeeBonus obj where obj.driver="+employee.getId()+" and obj.category=2");
    	    						if(!StringUtils.isEmpty(batchDateFrom)){
    	    							bonusquery.append(" and obj.batchFrom>='"+batchDateFrom+"'");
    	    							}
    	    							if(!StringUtils.isEmpty(batchDateTo)){
    	    								bonusquery.append(" and obj.batchTo<='"+batchDateTo+"'");
    	    							}
    	    							List<EmployeeBonus> bonuses=genericDAO.executeSimpleQuery(bonusquery.toString());
    	    							for(EmployeeBonus bonus:bonuses){
    	    								for(EmpBonusTypesList list:bonus.getBonusTypesLists()){
    	    									bonusAmount+=list.getBonusamount();
    	    								}
    	    							}
    	    							StringBuffer holidayquery=new StringBuffer("select obj from HolidayType obj where obj.paid=1 and obj.company="+employee.getCompany().getId()+" and obj.terminal="+employee.getTerminal().getId()+" and obj.catagory="+employee.getCatagory().getId()+" and obj.leaveType=3");
    	    							if(!StringUtils.isEmpty(batchDateFrom)){
    	    								holidayquery.append(" and obj.batchdate<='"+batchDateFrom+"'");
    	    								}
    	    								if(!StringUtils.isEmpty(batchDateTo)){
    	    									holidayquery.append(" and obj.batchdate<='"+batchDateTo+"'");
    	    								}
    	    								List<HolidayType> holidayTypes=genericDAO.executeSimpleQuery(holidayquery.toString());
    	    								for(HolidayType type:holidayTypes){
    	    									holidayAmount=holidayAmount+type.getAmount();
    	    								}		
    	    							
    	    					}
    	    					pay.setBonusAmount(bonusAmount);
    	    					pay.setSickPersonalAmount(sickParsonalAmount);
    	    					pay.setVacationAmount(vacationAmount);
    	    					pay.setHolidayAmount(holidayAmount);
    	    					Double totalAmount=pay.getAmount()+pay.getSickPersonalAmount()+pay.getVacationAmount()+pay.getBonusAmount()+pay.getHolidayAmount();
    	    					totalAmount=MathUtil.roundUp(totalAmount, 2);
    	    					TotalAmount+=totalAmount;
    	    					pay.setTotalAmount(totalAmount);
    	    					fields.add(pay);
    	    				}
    	    			}
    	    			wrapper.setSumAmount(TotalAmount);
    	    			return wrapper;
	*///}

	@Override
	public DriverPayWrapper generateDriverPayHistoryDetail(
			SearchCriteria criteria, DriverPayHistoryInput input) {
		// TODO Auto-generated method stub
		String driversinput=input.getDrivers();
		String companies=input.getCompanies();
		String terminals=input.getTerminals();
		String batchDateFrom=input.getBatchDateFrom();
		String batchDateTo=input.getBatchDateTo();
		String payrollBatchDate=input.getPayrollBatchDate();
		batchDateFrom=ReportDateUtil.getFromDate(batchDateFrom);
		batchDateTo=ReportDateUtil.getToDate(batchDateTo);
		payrollBatchDate=ReportDateUtil.getFromDate(payrollBatchDate);
		String payrollstatus=input.getPayrollstatus();
		Map<String, Double> map=new HashMap<String, Double>();
		Map<String, Integer> map1=new HashMap<String, Integer>();
		StringBuffer query=new StringBuffer("");
		StringBuffer driverids=new StringBuffer("");
		Map criterias=new HashMap();
		if(!StringUtils.isEmpty(driversinput)){
			String[] driverinput=driversinput.split(",");
			for(String driverstr:driverinput){
				Driver employee=genericDAO.getById(Driver.class,Long.parseLong(driverstr));
				criterias.put("fullName", employee.getFullName());
				Driver driver=genericDAO.getByCriteria(Driver.class,criterias);
				if(driver!=null){
					driverids.append(driver.getId());
					driverids.append(",");
				}
			}
			int d=driverids.lastIndexOf(",");
			if(d>0){
				driverids.deleteCharAt(d);
			}
		}
						query.append("select obj from Ticket obj where obj.status=1 and  obj.billBatch>='"+batchDateFrom+
				    			"' and obj.billBatch<='"+batchDateTo+"'");
						if(!StringUtils.isEmpty(companies)){
							query.append(" and obj.companyLocation in ("+companies+")");
						}
						if(!StringUtils.isEmpty(terminals)){
							query.append(" and obj.terminal in ("+terminals+")");
						}
						if(!StringUtils.isEmpty(driversinput)){
							query.append(" and obj.driver in ("+driverids+")");
						}
						 if(!StringUtils.isEmpty(payrollstatus)){
			        		 query.append("and  obj.payRollStatus in ("+payrollstatus+")");
			        	 }
						 if(!StringUtils.isEmpty(payrollBatchDate)){
							 query.append("and obj.payRollBatch='"+payrollBatchDate+"'");
	        			 }
						  query.append(" group by obj.origin,obj.destination");
    	                  query.append(",obj.driver");
    	                  query.append(" order by obj.driver.fullName asc, obj.origin.name ,obj.destination.name asc");
    	                  System.out.println("\n query-->"+query);
    	          		List<Ticket> tickets=genericDAO.executeSimpleQuery(query.toString());
    	          		DriverPayWrapper wrapper=new DriverPayWrapper();
    	        		List<DriverPay> summarys=new ArrayList<DriverPay>();
    	        		wrapper.setDriverPays(summarys);
    	        		double sumAmount=0.0;
    	        		int totalcount=0;
    	        		for(Ticket ticket:tickets){
    	        			StringBuffer countquery=new StringBuffer("");
    	        			countquery.append("select count(obj) from Ticket obj where obj.status=1 and  obj.billBatch>='"+batchDateFrom+
    	        		    "' and obj.billBatch<='"+batchDateTo+"'  and obj.origin="+ticket.getOrigin().getId()+" and obj.destination="+ticket.getDestination().getId());
    	        			 countquery.append("and obj.driver="+ticket.getDriver().getId());
    	        			 if(!StringUtils.isEmpty(payrollstatus)){
    	        				 countquery.append("and  obj.payRollStatus in ("+payrollstatus+")");
    	    	        	 }
    						 if(!StringUtils.isEmpty(payrollBatchDate)){
    							 countquery.append("and obj.payRollBatch='"+payrollBatchDate+"'");
    	        			 }
    	        			Long recordCount = (Long) genericDAO.getEntityManager()
    	        			.createQuery(countquery.toString()).getSingleResult();
    	        			double amount=0.0;
    	        			DriverPay pay=new DriverPay();
    	        			pay.setNoOfLoad(Integer.parseInt(recordCount.toString()));
    	        			pay.setOrigin(ticket.getOrigin().getName());
    	        			pay.setDestination(ticket.getDestination().getName());
    	        			try{
    	        				Long destination_id;
    	        				Location location = genericDAO.getById(Location.class, ticket
    	        						.getDestination().getId());
    	        				if (location.getName().equalsIgnoreCase("grows")
    	        						|| location.getName().equalsIgnoreCase("tullytown")) {
    	                                destination_id = 91l;
    	                       } else {
    	        					destination_id = ticket.getDestination().getId();
    	        				}
    	        				String rateQuery = "select obj from DriverPayRate obj where obj.transferStation='"
    	        						+ ticket.getOrigin().getId() + "' and obj.landfill='"
    	        						/* + ticket.getDestination().getId() + "'"; */
    	        						+ destination_id + "'";
    	        			List<DriverPayRate>	fs = genericDAO.executeSimpleQuery(rateQuery);
    	        			DriverPayRate payRate = null;
    	        			if (fs != null && fs.size() > 0) {
    	        				for (DriverPayRate rate : fs) {
    	        					if (rate.getRateUsing() == null) {
    	        						payRate = rate;
    	        						break;
    	        					} else if (rate.getRateUsing() == 1) {
    	        						// calculation for a load date
    	        						if ((ticket.getLoadDate().getTime() >= rate
    	        								.getValidFrom().getTime())
    	        								&& (ticket.getLoadDate().getTime() <= rate
    	        										.getValidTo().getTime())) {
    	        							payRate = rate;
    	        							break;
    	        						}
    	        					} else if (rate.getRateUsing() == 2) {
    	        						// calculation for a unload date
    	        						if ((ticket.getUnloadDate().getTime() >= rate
    	        								.getValidFrom().getTime())
    	        								&& (ticket.getUnloadDate().getTime() <= rate
    	        										.getValidTo().getTime())) {
    	        							payRate = rate;
    	        							break;
    	        						}
    	        					}
    	        				}
    	        				}
    	        			if(payRate==null){
    	        				pay.setAmount(0.0);
    	        				sumAmount+=0.0;
    	        			}else{ 	        				
    	        				Map criti=new HashMap();
    	        				criti.clear();
    	        				criti.put("fullName",ticket.getDriver().getFullName() );
    	        				Driver empObj=genericDAO.getByCriteria(Driver.class, criti);  	        				
    	        				double nofload=Double.parseDouble(pay.getNoOfLoad()+"");
    	        				if(empObj.getId()!=null){
    	        					if(empObj.getShift().equals("1")){	    	        						
    	        						amount= nofload*payRate.getPayRate();
    	        						pay.setRate(payRate.getPayRate());
    	        					}
    	        					else{    	        						
    	        						amount= nofload*payRate.getNightPayRate();
    	        						pay.setRate(payRate.getNightPayRate());
    	        					}
    	        				}
    	        				else{					
    	        					amount= nofload*payRate.getPayRate();
    	        					pay.setRate(payRate.getPayRate());
    	        				}    	        				
    	        				//amount= nofload*payRate.getPayRate();
    	        				sumAmount+=amount;
    	        				amount=MathUtil.roundUp(amount, 2);
    	        				pay.setAmount(amount);
    	        				//pay.setRate(payRate.getPayRate())
    	        			}
    	        			pay.setDrivername(ticket.getDriver().getFullName());
    	        			pay.setCompanyname(ticket.getDriver().getCompany().getName());
    	        			totalcount+=pay.getNoOfLoad();
    	        			}
    	        			catch (Exception ex) {
    	        				ex.printStackTrace();
    	        			}
    	        			summarys.add(pay);
    	        		}
    	        		sumAmount=MathUtil.roundUp(sumAmount, 2);
    	        		wrapper.setTotalRowCount(totalcount);
    	        		wrapper.setSumTotal(sumAmount);
    	        		wrapper.setBatchDateFrom(input.getBatchDateFrom());
    	        		wrapper.setBatchDateTo(input.getBatchDateTo());
    	        		wrapper.setPayRollBatch(input.getPayrollBatchDate());
    	        		return wrapper;
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public void deleteEmployeePayrollData(HourlyPayrollInvoice invoice)
			throws Exception {
		Map params = new HashMap();
		Location companyObj = genericDAO.getById(Location.class,Long.valueOf(invoice.getCompany()));
		List<HourlyPayrollInvoiceDetails> datas=null;
		params.put("date", new SimpleDateFormat("yyyy-MM-dd").format(invoice.getPayrollinvoicedate()));
		params.put("company", companyObj.getName());
		
		System.out.println("****************** date and company is "+new SimpleDateFormat("MM-dd-yyyy").format(invoice.getPayrollinvoicedate())+" and "+companyObj.getName());
		datas = genericDAO.findByCriteria(HourlyPayrollInvoiceDetails.class, params);
		if (datas != null && datas.size() > 0) {
			for(HourlyPayrollInvoiceDetails details:datas){
				TimeSheet sheet=genericDAO.getById(TimeSheet.class, details.getTimesheet().getId());
				sheet.setHourlypayrollinvoiceNumber(null);
				sheet.setHourlypayrollinvoiceDate(null);
				sheet.setHourlypayrollstatus(1);
				genericDAO.saveOrUpdate(sheet);
				genericDAO.delete(details);
				
				
			}
			genericDAO.delete(invoice);
		}
		// TODO Auto-generated method stub
		
	}

	@Override
	public WeeklypayWrapper generateWeeklyPayrollData(SearchCriteria criteria) {
		// TODO Auto-generated method stub
		String employee=(String)criteria.getSearchMap().get("driver");
		String company=(String)criteria.getSearchMap().get("company");
		String terminal=(String)criteria.getSearchMap().get("terminal");
		String payrollDate=(String)criteria.getSearchMap().get("payrollDate");
		String payrollNumber=(String)criteria.getSearchMap().get("checkDate");
		String driversmul=(String)criteria.getSearchMap().get("driversmul");
		payrollNumber = ReportDateUtil.getFromDate(payrollNumber);
		payrollDate=ReportDateUtil.getFromDate(payrollDate);
		Date paydate = null;
		Date checkDate=null;
		Location companyid=null;
		Location terminalid=null;
		try {
			paydate = new SimpleDateFormat("MM-dd-yyyy")
			.parse((String)criteria.getSearchMap().get("payrollDate"));
			checkDate  = new SimpleDateFormat("MM-dd-yyyy")
			.parse((String)criteria.getSearchMap().get("checkDate"));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		StringBuffer query=new StringBuffer("select obj from Driver obj where obj.status=1 and obj.payTerm='3'");
		if(!StringUtils.isEmpty(company)){
			query.append(" and obj.company="+company);
			companyid=genericDAO.getById(Location.class, Long.parseLong(company));
		}
      
        if(!StringUtils.isEmpty(terminal)){
			query.append(" and obj.terminal="+terminal);
			terminalid=genericDAO.getById(Location.class, Long.parseLong(terminal));
			
		}
        if(!StringUtils.isEmpty(employee)){
        	query.append(" and obj.fullName ='"+employee+"'");
		}
        
       
        if(!StringUtils.isEmpty(driversmul)){
        	query.append(" and obj.id not in ("+driversmul+")");
        }
        
        if(!StringUtils.isEmpty(payrollDate)){
			
		}
        query.append(" order by obj.company.name asc, obj.terminal.name asc, obj.catagory.name asc, obj.fullName asc");
        
        List<Driver> employees=genericDAO.executeSimpleQuery(query.toString());
        
        WeeklypayWrapper wrapper=new WeeklypayWrapper();
        List<WeeklyPayDetail> summary=new ArrayList<WeeklyPayDetail>();
        wrapper.setDetails(summary);
        double sumTotal=0.0;
        double sumAmount=0.0;
        for(Driver employee2:employees){
        	double sickParsonalAmount=0.0;
        	double vacationAmount=0.0;
        	double bonusAmount=0.0;
        	double holidayAmount=0.0;
        	Double miscamt=0.0;
			Double reimburseamt=0.0;
        	String query1="select obj from WeeklySalary obj where obj.driver.fullName='"+employee2.getFullName()+"' and obj.catagory="+employee2.getCatagory().getId()+" and obj.company="+employee2.getCompany().getId()+" and obj.terminal="+employee2.getTerminal().getId()+"and '"+payrollDate+"' BETWEEN obj.validFrom and obj.validTo";
			List<WeeklySalary> salaries=genericDAO.executeSimpleQuery(query1);
			double weeklysalary=0.0;
			if(!salaries.isEmpty()){
				WeeklySalary salary=salaries.get(0);
				if(salary.getWeeklySalary()!=null){
					weeklysalary=salary.getWeeklySalary();
				}
			}
			WeeklyPayDetail detail=new WeeklyPayDetail();
			detail.setCheckDate(checkDate);
			detail.setDriver(employee2.getFullName());
			detail.setCompanyname(employee2.getCompany().getName());
			detail.setCategory(employee2.getCatagory().getName());
			detail.setTerminalName(employee2.getTerminal().getName());
			detail.setAmount(weeklysalary);
			StringBuffer ptodquery=new StringBuffer("select obj from Ptodapplication obj where obj.approvestatus=1 and obj.driver.fullName='"+employee2.getFullName()+"' and obj.category="+employee2.getCatagory().getId());
			if(!StringUtils.isEmpty(payrollDate)){
			ptodquery.append(" and obj.batchdate='"+payrollDate+"'");
			}
			
			List<Ptodapplication> ptodapplications= genericDAO.executeSimpleQuery(ptodquery.toString());
			for(Ptodapplication ptodapplication:ptodapplications){
				if(ptodapplication.getLeavetype().getId()==1){
					sickParsonalAmount=sickParsonalAmount+(ptodapplication.getAmountpaid())+(ptodapplication.getHourlyamountpaid());;
				}
				if(ptodapplication.getLeavetype().getId()==4){
					vacationAmount=vacationAmount+(ptodapplication.getAmountpaid())+(ptodapplication.getHourlyamountpaid());
					
				}
			}
			detail.setVacationAmount(vacationAmount);
			detail.setSickPersonalAmount(sickParsonalAmount);
			StringBuffer bonusquery=new StringBuffer("select obj from EmployeeBonus obj where obj.driver.fullName='"+employee2.getFullName()+"' and obj.category="+employee2.getCatagory().getId());
			if(!StringUtils.isEmpty(payrollDate)){
				ptodquery.append(" and obj.batchFrom='"+payrollDate+"'");
				}
				
				List<EmployeeBonus> bonuses=genericDAO.executeSimpleQuery(bonusquery.toString());
				for(EmployeeBonus bonus:bonuses){
					for(EmpBonusTypesList list:bonus.getBonusTypesLists()){
						bonusAmount+=list.getBonusamount();
					}
				}
				detail.setBonusAmount(bonusAmount);
				
				
				
				StringBuffer miscamountquery=new StringBuffer("select obj from MiscellaneousAmount obj where obj.driver.fullName='"+employee2.getFullName()+"' and obj.miscNotes!='Reimbursement'");
				if(!StringUtils.isEmpty(payrollDate)){
					miscamountquery.append(" and obj.batchFrom='"+payrollDate+"'");
				}
			
			
				List<MiscellaneousAmount> miscamounts=genericDAO.executeSimpleQuery(miscamountquery.toString());
				int count=0;
				
				for(MiscellaneousAmount miscamnt:miscamounts){
					miscamt+=miscamnt.getMisamount();
				}
				
				detail.setMiscAmount(miscamt);
				
				
				
				StringBuffer reimburseamountquery=new StringBuffer("select obj from MiscellaneousAmount obj where obj.driver.fullName='"+employee2.getFullName()+"' and obj.miscNotes ='Reimbursement'");
				if(!StringUtils.isEmpty(payrollDate)){
					reimburseamountquery.append(" and obj.batchFrom='"+payrollDate+"'");
				}
			
			
				List<MiscellaneousAmount> reimburseamounts=genericDAO.executeSimpleQuery(reimburseamountquery.toString());
				int reimbursecount=0;
				for(MiscellaneousAmount reimburseamount:reimburseamounts){
					reimburseamt+=reimburseamount.getMisamount();
				}
				
				detail.setReimburseAmount(reimburseamt);
				
				
				
				
				StringBuffer holidayquery=new StringBuffer("select obj from HolidayType obj where obj.paid=1 and obj.company="+employee2.getCompany().getId()+" and obj.terminal="+employee2.getTerminal().getId()+" and obj.catagory="+employee2.getCatagory().getId()+" and obj.leaveType=3");
				if(!StringUtils.isEmpty(payrollDate)){
					holidayquery.append(" and obj.batchdate='"+payrollDate+"'");
					}
					
					List<HolidayType> holidayTypes=genericDAO.executeSimpleQuery(holidayquery.toString());
					for(HolidayType type:holidayTypes){
						holidayAmount=holidayAmount+type.getAmount();
					}
					detail.setHolidayAmount(holidayAmount);
					sumTotal+=detail.getAmount();
					double totalamount=detail.getAmount()+detail.getSickPersonalAmount()+detail.getMiscAmount()+detail.getBonusAmount()+detail.getHolidayAmount();
					totalamount=MathUtil.roundUp(totalamount, 2);
					sumAmount+=totalamount;
					detail.setTotalAmount(totalamount);
					detail.setCompany(employee2.getCompany());
					detail.setTerminal(employee2.getTerminal());
					detail.setPayRollBatch(paydate);
					summary.add(detail);
        }
        wrapper.setSumAmount(sumAmount);
        wrapper.setPayRollBatch((String)criteria.getSearchMap().get("payrollDate"));
        wrapper.setSumTotal(sumTotal);
        wrapper.setTotalRowCount(employees.size());
        wrapper.setPayrollNumber((String)criteria.getSearchMap().get("payrollNumber"));        
        if(companyid!=null){
        wrapper.setCompanylocation(companyid);
        wrapper.setCompany(companyid.getName());
        }
        if(terminalid!=null){
        wrapper.setTerminall(terminalid);
        wrapper.setTerminal(terminalid.getName());
        }
		return wrapper;
	}

	@Override
	public void saveWeeklyPayData(HttpServletRequest request,
			SearchCriteria criteria) throws Exception {
		// TODO Auto-generated method stub
		
		WeeklypayWrapper wrapper=generateWeeklyPayrollData(criteria);
		WeeklyPay pay=new WeeklyPay();
		pay.setSumAmount(wrapper.getSumAmount());
		pay.setSumTotal(wrapper.getSumTotal());
		pay.setCompany(wrapper.getCompanylocation());
		Date checkdate = new SimpleDateFormat("MM-dd-yyyy")
		.parse((String)criteria.getSearchMap().get("checkDate"));
		pay.setCheckDate(checkdate);
		if(wrapper.getTerminall()!=null)
		pay.setTerminal(wrapper.getTerminall());
		pay.setTotalRowCount(wrapper.getTotalRowCount());
		 Date paydate = new SimpleDateFormat("MM-dd-yyyy")
			.parse((String)criteria.getSearchMap().get("payrollDate"));
		pay.setPayRollBatch(paydate);
		if(wrapper.getDetails().size()>0){
			for(WeeklyPayDetail detail:wrapper.getDetails()){
				genericDAO.saveOrUpdate(detail);
			}
		genericDAO.saveOrUpdate(pay);
			
		}		
	}

	@Override
	public void deleteWeeklyPayrollData(WeeklyPay pay) throws Exception {
		// TODO Auto-generated method stub
		Map criteria = new HashMap();
		Map params = new HashMap();
		List<WeeklyPayDetail> datas=null;
		criteria.put("company", pay.getCompany());
		criteria.put("payRollBatch", pay.getPayRollBatch());
		criteria.put("checkDate", pay.getCheckDate());
		if(pay.getTerminal()!=null)
		criteria.put("terminal", pay.getTerminal());
		datas=genericDAO.findByCriteria(WeeklyPayDetail.class, criteria);
		if (datas != null && datas.size() > 0) {
			for(WeeklyPayDetail detail:datas){
				genericDAO.delete(detail);
			}
			genericDAO.delete(pay);
		}
	}

	@Override
	public List<PayChexDetail> generatePaychexData(SearchCriteria criteria) {
		// TODO Auto-generated method stub
		String companyid=(String)criteria.getSearchMap().get("company");
		String terminalid=(String)criteria.getSearchMap().get("terminal");
		String payrollDate=(String)criteria.getSearchMap().get("payrollDate");
		String actualpayrollDate=(String)criteria.getSearchMap().get("payrollDate");
		payrollDate=ReportDateUtil.getFromDate(payrollDate);
		System.out.println("Date format for paychex "+payrollDate);
		Location company=null;
		Location terminal=null;
		if(!StringUtils.isEmpty(companyid)){
			company=genericDAO.getById(Location.class,Long.parseLong(companyid));
			
		}
		if(!StringUtils.isEmpty(terminalid)){
			terminal=genericDAO.getById(Location.class, Long.parseLong(terminalid));
		}
		StringBuffer driverquery=new StringBuffer("");
		StringBuffer timequery=new StringBuffer("");
		StringBuffer weeklyquery=new StringBuffer("");
		weeklyquery.append("select obj from WeeklyPayDetail obj where 1=1");
		driverquery.append("select obj from DriverPay obj where 1=1");
		timequery.append("select obj from HourlyPayrollInvoiceDetails obj where 1=1");
		if(!StringUtils.isEmpty(payrollDate)){
			driverquery.append(" and obj.payRollBatch='"+payrollDate+"'");
			timequery.append(" and obj.date='"+payrollDate+"'");
			weeklyquery.append(" and obj.checkDate='"+payrollDate+"'");			
		}
		if(!StringUtils.isEmpty(companyid)){
			driverquery.append(" and obj.company="+companyid);
			timequery.append(" and obj.company='"+company.getName()+"'");
			weeklyquery.append(" and obj.company="+companyid);
		}
		if(!StringUtils.isEmpty(terminalid)){
			driverquery.append(" and obj.terminal="+terminalid);
			timequery.append(" and obj.terminal='"+terminal.getName()+"'");
			weeklyquery.append(" and obj.terminal="+terminalid);
		}
			
		List<DriverPay> driverPays=genericDAO.executeSimpleQuery(driverquery.toString());
		List<WeeklyPayDetail> payDetails=genericDAO.executeSimpleQuery(weeklyquery.toString());
		List<HourlyPayrollInvoiceDetails> hourlyPayrollInvoiceDetails=genericDAO.executeSimpleQuery(timequery.toString());
		List<PayChexDetail> summary= new ArrayList<PayChexDetail>();
		Map criterias=new HashMap();
		for(WeeklyPayDetail payDetail:payDetails){
			PayChexDetail detail=new PayChexDetail();
			criterias.clear();
			criterias.put("fullName",payDetail.getDriver());
			criterias.put("company.id", payDetail.getCompany().getId());
			Driver employee=genericDAO.getByCriteria(Driver.class, criterias);
			if(employee!=null){
				criterias.clear();
				criterias.put("terminal.id",employee.getTerminal().getId());
				criterias.put("company.id", employee.getCompany().getId());
				Terminal empterminal=genericDAO.getByCriteria(Terminal.class, criterias);
				if(empterminal!=null)
					if(empterminal.getHomeBranch()!=null)
						detail.setHomeBr(empterminal.getHomeBranch().toString());
				detail.setHomeDpt(employee.getCatagory().getCode());
				detail.setEeNo(employee.getStaffId());
				detail.setLastName(employee.getLastName());
				detail.setFirstName(employee.getFirstName());
				detail.setVacationAmount(payDetail.getVacationAmount());
				detail.setSalary(payDetail.getAmount());
				detail.setMiscAmount(payDetail.getMiscAmount());
				detail.setReimburseAmount(payDetail.getReimburseAmount());
				detail.setBonusAmount(payDetail.getBonusAmount());
				detail.setHolidayAmount(payDetail.getHolidayAmount());
				detail.setPersonalSickAmount(payDetail.getSickPersonalAmount());
				
			}else{
				continue;
			}
			summary.add(detail);
		}
		for(DriverPay driverPay:driverPays){
			PayChexDetail detail =new PayChexDetail();
			criterias.clear();
			criterias.put("fullName", driverPay.getDrivername());
			criterias.put("company.id", driverPay.getCompany().getId());
			Driver employee=genericDAO.getByCriteria(Driver.class, criterias);
			if(employee!=null){
				criterias.clear();
				criterias.put("terminal.id",employee.getTerminal().getId());
				criterias.put("company.id", employee.getCompany().getId());
				Terminal empterminal=genericDAO.getByCriteria(Terminal.class, criterias);
				if(empterminal!=null)
					if(empterminal.getHomeBranch()!=null)
						detail.setHomeBr(empterminal.getHomeBranch().toString());
				detail.setHomeDpt(employee.getCatagory().getCode());
				detail.setEeNo(employee.getStaffId());
				detail.setLastName(employee.getLastName());
				detail.setFirstName(employee.getFirstName());
				detail.setVacationAmount(driverPay.getVacationAmount());
				detail.setPersonalSickAmount(driverPay.getSickPersonalAmount());
				detail.setMiscAmount(driverPay.getMiscAmount());
				detail.setReimburseAmount(driverPay.getReimburseAmount());
				detail.setTransportDriverAmount(driverPay.getAmount());
				detail.setBonusAmount(driverPay.getBonusAmount());
				detail.setHolidayAmount(driverPay.getHolidayAmount());
				
			}else{
				continue;
			}
			summary.add(detail);
		}
		for(HourlyPayrollInvoiceDetails invoiceDetails:hourlyPayrollInvoiceDetails){
			PayChexDetail detail=new PayChexDetail();
			criterias.clear();			
			if(invoiceDetails.getDriver()!=null){
			criterias.put("fullName", invoiceDetails.getDriver());
			criterias.put("company.name", invoiceDetails.getCompany());
			Driver employee=genericDAO.getByCriteria(Driver.class, criterias);
			if(employee!=null){
				criterias.clear();
				criterias.put("terminal.id",employee.getTerminal().getId());
				criterias.put("company.id", employee.getCompany().getId());
				Terminal empterminal=genericDAO.getByCriteria(Terminal.class, criterias);
				if(empterminal!=null)
					if(empterminal.getHomeBranch()!=null)
						detail.setHomeBr(empterminal.getHomeBranch().toString());
				detail.setHomeDpt(employee.getCatagory().getCode());
				detail.setEeNo(employee.getStaffId());
				detail.setLastName(employee.getLastName());
				detail.setFirstName(employee.getFirstName());
				detail.setVacationAmount(invoiceDetails.getVacationAmount());
				detail.setPersonalSickAmount(invoiceDetails.getSickParsanolAmount());
				detail.setBonusAmount(invoiceDetails.getBonusAmounts());
				detail.setHolidayAmount(invoiceDetails.getHolidayAmount());
				detail.setMiscAmount(invoiceDetails.getMiscAmount());
				detail.setReimburseAmount(invoiceDetails.getReimburseAmount());
				detail.setOverTimeHour(invoiceDetails.getOthours());
				detail.setRegularHour(invoiceDetails.getTimesheet()!=null?invoiceDetails.getTimesheet().getRegularhours():null);
				detail.setRate(invoiceDetails.getRegularrate());
				detail.setOvRate(invoiceDetails.getOtrate());
			}else{
				continue;
			}
			}
			else{
				continue;
			}
			summary.add(detail);
		}
		Comparator<PayChexDetail> comparator=new Comparator<PayChexDetail>() {
			@Override
			public int compare(PayChexDetail o1, PayChexDetail o2) {
				return  o1.getLastName().compareTo(o2.getLastName());
			}
		};
		Comparator<PayChexDetail> comparator2=new Comparator<PayChexDetail>() {
			@Override
			public int compare(PayChexDetail o1, PayChexDetail o2) {
				return  o1.getFirstName().compareTo(o2.getFirstName());
			}
		};
		ComparatorChain chain = new ComparatorChain();  
		chain.addComparator(comparator);
		chain.addComparator(comparator2);
		Collections.sort(summary, chain); 
		return summary;
	}

	@Override
	public List<SalaryDetail> generateSalaryData(SearchCriteria criteria) {
		// TODO Auto-generated method stub
		
		String companyid=(String)criteria.getSearchMap().get("company");
		String terminalid=(String)criteria.getSearchMap().get("terminal");
		String payrollDateFrom=(String)criteria.getSearchMap().get("payrollDateFrom");
		String payrollDateTo=(String)criteria.getSearchMap().get("payrollDateTo");
		payrollDateTo=ReportDateUtil.getToDate(payrollDateTo);
		payrollDateFrom=ReportDateUtil.getFromDate(payrollDateFrom);
		Location company=null;
		Location terminal=null;
		if(!StringUtils.isEmpty(companyid)){
			company=genericDAO.getById(Location.class,Long.parseLong(companyid));
			
		}
		if(!StringUtils.isEmpty(terminalid)){
			terminal=genericDAO.getById(Location.class, Long.parseLong(terminalid));
		}
		StringBuffer driverquery=new StringBuffer("");
		StringBuffer timequery=new StringBuffer("");
		StringBuffer weeklyquery=new StringBuffer("");
		weeklyquery.append("select obj from WeeklyPayDetail obj where 1=1");
		driverquery.append("select obj from DriverPay obj where 1=1");
		timequery.append("select obj from HourlyPayrollInvoiceDetails obj where 1=1");
		if(!StringUtils.isEmpty(payrollDateFrom)){
			driverquery.append(" and obj.payRollBatch>='"+payrollDateFrom+"'");
			timequery.append(" and obj.date>='"+payrollDateFrom+"'");
			weeklyquery.append(" and obj.checkDate>='"+payrollDateFrom+"'");
			
		}
		if(!StringUtils.isEmpty(payrollDateTo)){
			driverquery.append(" and obj.payRollBatch<='"+payrollDateTo+"'");
			timequery.append(" and obj.date<='"+payrollDateTo+"'");
			weeklyquery.append(" and obj.checkDate<='"+payrollDateTo+"'");			
		}
		if(!StringUtils.isEmpty(companyid)){
			driverquery.append(" and obj.company="+companyid);
			timequery.append(" and obj.company='"+company.getName()+"'");
			weeklyquery.append(" and obj.company="+companyid);
		}
		if(!StringUtils.isEmpty(terminalid)){
			driverquery.append(" and obj.terminal="+terminalid);
			timequery.append(" and obj.terminal='"+terminal.getName()+"'");
			weeklyquery.append(" and obj.terminal="+terminalid);
		}
			
		List<DriverPay> driverPays=genericDAO.executeSimpleQuery(driverquery.toString());
		List<WeeklyPayDetail> payDetails=genericDAO.executeSimpleQuery(weeklyquery.toString());
		List<HourlyPayrollInvoiceDetails> hourlyPayrollInvoiceDetails=genericDAO.executeSimpleQuery(timequery.toString());
		List<SalaryDetail> summary= new ArrayList<SalaryDetail>();
		Map criterias=new HashMap();
		for(DriverPay pay:driverPays){
			SalaryDetail detail=new SalaryDetail();
			detail.setDriver(pay.getDrivername());
			detail.setCategory("driver");
			detail.setCompanyname(pay.getCompanyname());
			detail.setAmount(pay.getTransportationAmount());
			detail.setVacationAmount(pay.getVacationAmount());
			detail.setSickPersonalAmount(pay.getSickPersonalAmount());
			detail.setBonusAmount(pay.getBonusAmount());
			detail.setHolidayAmount(pay.getHolidayAmount());
			detail.setTotalAmount(pay.getTotalAmount());
			detail.setMiscAmount(pay.getMiscAmount());
			detail.setReimburseAmount(pay.getReimburseAmount());
			detail.setProbationDetection(pay.getProbationDeductionAmount());
			Map driverCriteria = new HashMap();
			driverCriteria.clear();
			driverCriteria.put("fullName",pay.getDrivername());
			driverCriteria.put("status",1);
			Driver drvObj = genericDAO.getByCriteria(Driver.class, driverCriteria);
			if(drvObj!=null)
				detail.setTerminalName(drvObj.getTerminal().getName());
			else{
				driverCriteria.clear();
				driverCriteria.put("fullName",pay.getDrivername());
				Driver drvsObj = genericDAO.getByCriteria(Driver.class, driverCriteria);
				if(drvsObj!=null)
					detail.setTerminalName(drvsObj.getTerminal().getName());
				else
					detail.setTerminalName("");
			}
			summary.add(detail);
		}
		for(WeeklyPayDetail payDetail:payDetails){
			SalaryDetail detail=new SalaryDetail();
			detail.setDriver(payDetail.getDriver());
			detail.setCategory(payDetail.getCategory());
			detail.setCompanyname(payDetail.getCompanyname());
			detail.setAmount(payDetail.getAmount());
			detail.setVacationAmount(payDetail.getVacationAmount());
			detail.setSickPersonalAmount(payDetail.getSickPersonalAmount());
			detail.setBonusAmount(payDetail.getBonusAmount());
			detail.setHolidayAmount(payDetail.getHolidayAmount());
			detail.setTotalAmount(payDetail.getTotalAmount());
			detail.setMiscAmount(payDetail.getMiscAmount());
			detail.setReimburseAmount(payDetail.getReimburseAmount());
			Map driverCriteria = new HashMap();
			driverCriteria.clear();
			driverCriteria.put("fullName",payDetail.getDriver());
			driverCriteria.put("status",1);
			Driver drvObj = genericDAO.getByCriteria(Driver.class, driverCriteria);
			if(drvObj!=null)
				detail.setTerminalName(drvObj.getTerminal().getName());
			else{
				driverCriteria.clear();
				driverCriteria.put("fullName",payDetail.getDriver());
				Driver drvsObj = genericDAO.getByCriteria(Driver.class, driverCriteria);
				if(drvsObj!=null)
					detail.setTerminalName(drvsObj.getTerminal().getName());
				else
					detail.setTerminalName("");
			}
			summary.add(detail);
		}
		for(HourlyPayrollInvoiceDetails invoiceDetails:hourlyPayrollInvoiceDetails){
			SalaryDetail detail=new SalaryDetail();
			detail.setDriver(invoiceDetails.getDriver());
			detail.setCategory(invoiceDetails.getCategory());
			detail.setCompanyname(invoiceDetails.getCompany());
			detail.setAmount(invoiceDetails.getSumamount());
			detail.setVacationAmount(invoiceDetails.getVacationAmount());
			detail.setSickPersonalAmount(invoiceDetails.getSickParsanolAmount());
			detail.setBonusAmount(invoiceDetails.getBonusAmounts());
			detail.setHolidayAmount(invoiceDetails.getHolidayAmount());
			detail.setTotalAmount(invoiceDetails.getSumOfTotVacSicBonus());
			detail.setMiscAmount(invoiceDetails.getMiscAmount());
			detail.setReimburseAmount(invoiceDetails.getReimburseAmount());
			Map driverCriteria = new HashMap();
			driverCriteria.clear();
			driverCriteria.put("fullName",invoiceDetails.getDriver());
			driverCriteria.put("status",1);
			Driver drvObj = genericDAO.getByCriteria(Driver.class, driverCriteria);
			if(drvObj!=null)
				detail.setTerminalName(drvObj.getTerminal().getName());
			else{
				driverCriteria.clear();
				driverCriteria.put("fullName",invoiceDetails.getDriver());
				Driver drvsObj = genericDAO.getByCriteria(Driver.class, driverCriteria);
				if(drvsObj!=null)
					detail.setTerminalName(drvsObj.getTerminal().getName());
				else
					detail.setTerminalName("");
			}
			summary.add(detail);
		}
		
		Comparator<SalaryDetail> comparator=new Comparator<SalaryDetail>() {
			@Override
			public int compare(SalaryDetail o1, SalaryDetail o2) {
				return  o1.getCompanyname().compareTo(o2.getCompanyname());
			}
		};
		Comparator<SalaryDetail> comparator1=new Comparator<SalaryDetail>() {
			@Override
			public int compare(SalaryDetail o1, SalaryDetail o2) {
				return  o1.getTerminalName().compareTo(o2.getTerminalName());
			}
		};
		
		
		Comparator<SalaryDetail> comparator2=new Comparator<SalaryDetail>() {
			@Override
			public int compare(SalaryDetail o1, SalaryDetail o2) {
				return  o1.getDriver().compareTo(o2.getDriver());
			}
		};
		ComparatorChain chain = new ComparatorChain();  
		chain.addComparator(comparator);
		chain.addComparator(comparator1);
		chain.addComparator(comparator2);
		Collections.sort(summary, chain); 
		return summary;
	}
}