package com.primovision.lutransport.service;

import java.io.ByteArrayOutputStream;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import net.sf.jasperreports.engine.JasperPrint;

import com.primovision.lutransport.core.tags.IColumnTag;
import com.primovision.lutransport.model.SearchCriteria;

/**
 * Returns the outputstream containing report generated by the jasper report
 * 
 * @author gaurav
 */
@SuppressWarnings("unchecked")
public interface DynamicReportService {

    /**
     * @param reportName
     *            Name of the report
     * @param type
     *            Type of the file <p> Note : Currently supporting pdf, csv, xls, rtf and html only </p>
     * @param entityClass
     *            Entity class
     * @param columnPropertyList
     *            List of property name obtained from datatable to be included in the report
     * @param criteria
     *            Search criteria for the report data to be generated
     * @param request
     *            HttpServletRequest
     * @return
     */
    public ByteArrayOutputStream exportReport(String reportName, String type, Class entityClass, List<IColumnTag> columnPropertyList,
	    SearchCriteria criteria, HttpServletRequest request);

    /**
     * @param reportName
     *            Name of the report
     * @param type
     *            Type of the file <p> Note : Currently supporting pdf, csv, xls, rtf and html only </p>
     * @param entityClass
     *            Model class
     * @param columnPropertyList
     *            List of property name obtained from datatable to be included in the report
     * @param criteria
     *            Search criteria for the report data to be generated
     * @param request
     *            HttpServletRequest
     * @param objectDAO
     *            Entity specific DAO
     * @param clazz
     * @return
     */
    public ByteArrayOutputStream exportReport(String reportName, String type, Class entityClass, List<IColumnTag> columnPropertyList,
	    SearchCriteria criteria, HttpServletRequest request, Object objectDAO, Class clazz);

    /**
     * @param <T>
     * @param reportName
     *            Name of the report
     * @param type
     *            Type of the file <p> Note : Currently supporting pdf, csv, xls, rtf and html only </p>
     * @param entityClass
     *            Model class
     * @param list
     *            List of beans to be populated to the report
     * @param columnPropertyList
     *            List of property name obtained from datatable to be included in the report
     * @param request
     *            HttpServletRequest
     * @return
     */
    public <T> ByteArrayOutputStream exportReport(String reportName, String type, Class<T> entityClass, List<T> list,
	    List<IColumnTag> columnPropertyList, HttpServletRequest request);

    /**
     * @param <T>
     * @param list
     * @param reportName
     *            Name of the report
     * @param type
     *            Type of the file <p> Note : Currently supporting pdf, csv, xls, rtf and html only </p>
     * @param entityClass
     *            Model class
     * @param propertyList
     *            List of property names to be included in the report
     * @param request
     *            HttpServletRequest
     * @return
     */
    //public <T> ByteArrayOutputStream exportReport(List<T> list, String reportName, String type, Class<T> entityClass, List<String> propertyList,
	//    HttpServletRequest request);

    /**
     * @param reportName
     *            Name of the report
     * @param datas
     *            List of beans to be populated to the report
     * @param params
     *            Map of parameters to be passed to the JRXML
     * @param type
     *            Type of the file <p> Note : Currently supporting pdf, csv, xls, rtf and html only </p>
     * @param request
     *            HttpServletRequest
     * @return
     */
    public ByteArrayOutputStream generateStaticReport(String reportName, List<?> datas, Map params, String type, HttpServletRequest request);
    
    public JasperPrint getJasperPrintFromFile(String reportName, List datas, Map params, HttpServletRequest request);
}
