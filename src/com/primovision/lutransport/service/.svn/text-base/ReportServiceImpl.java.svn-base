package com.primovision.lutransport.service;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.apache.jasper.tagplugins.jstl.core.ForEach;
import org.hibernate.bytecode.buildtime.ExecutionException;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.ModelMap;

import com.primovision.lutransport.core.dao.GenericDAO;
import com.primovision.lutransport.core.tags.StaticDataUtil;
import com.primovision.lutransport.core.util.MathUtil;
import com.primovision.lutransport.core.util.ReportDateUtil;
import com.primovision.lutransport.model.BillingRate;
import com.primovision.lutransport.model.Driver;
import com.primovision.lutransport.model.EzToll;
import com.primovision.lutransport.model.FuelLog;
import com.primovision.lutransport.model.FuelSurchargePadd;
import com.primovision.lutransport.model.FuelSurchargeWeeklyRate;
import com.primovision.lutransport.model.Invoice;
import com.primovision.lutransport.model.Location;
import com.primovision.lutransport.model.SearchCriteria;
import com.primovision.lutransport.model.SubContractor;
import com.primovision.lutransport.model.SubcontractorInvoice;
import com.primovision.lutransport.model.SubcontractorRate;
import com.primovision.lutransport.model.Ticket;
import com.primovision.lutransport.model.User;
import com.primovision.lutransport.model.Vehicle;
import com.primovision.lutransport.model.report.Billing;
import com.primovision.lutransport.model.report.BillingHistoryInput;
import com.primovision.lutransport.model.report.BillingWrapper;
import com.primovision.lutransport.model.report.Billing_New;
import com.primovision.lutransport.model.report.EztollReportInput;
import com.primovision.lutransport.model.report.EztollReportWrapper;
import com.primovision.lutransport.model.report.FuelLogReportInput;
import com.primovision.lutransport.model.report.FuelLogReportWrapper;
import com.primovision.lutransport.model.report.NetReportInput;
import com.primovision.lutransport.model.report.NetReportWrapper;
import com.primovision.lutransport.model.report.SubcontractorBilling;
import com.primovision.lutransport.model.report.SubcontractorBillingNew;
import com.primovision.lutransport.model.report.SubcontractorBillingWrapper;
import com.primovision.lutransport.model.report.SubcontractorReportInput;
import com.primovision.lutransport.model.report.Summary;
import com.primovision.lutransport.model.TollCompany;
import com.primovision.lutransport.model.Customer;

@Transactional(readOnly = false)
public class ReportServiceImpl implements ReportService {

	public static SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy");
	public static SimpleDateFormat mysqldf = new SimpleDateFormat("yyyy-MM-dd");
	
	public static SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd 00:00:00.0");	
	public static SimpleDateFormat tdff = new SimpleDateFormat("yyyy-MM-dd");	

	@Autowired
	private GenericDAO genericDAO;

	public void setGenericDAO(GenericDAO genericDAO) {
		this.genericDAO = genericDAO;
	}

	@Override
	public BillingWrapper generateBillingData(SearchCriteria searchCriteria) {
		
		String fromDateStr = (String) searchCriteria.getSearchMap().get(
				"fromDate");
		String toDateStr = (String) searchCriteria.getSearchMap().get("toDate");
		String fromloadDate = (String) searchCriteria.getSearchMap().get(
				"fromloadDate");
		String toloadDate = (String) searchCriteria.getSearchMap().get(
				"toloadDate");
		String fromunloadDate = (String) searchCriteria.getSearchMap().get(
				"fromunloadDate");
		String tounloadDate = (String) searchCriteria.getSearchMap().get(
				"tounloadDate");
		fromDateStr = ReportDateUtil.getFromDate(fromDateStr);
		toDateStr = ReportDateUtil.getToDate(toDateStr);
		fromloadDate = ReportDateUtil.getFromDate(fromloadDate);
		toloadDate = ReportDateUtil.getToDate(toloadDate);
		fromunloadDate = ReportDateUtil.getFromDate(fromunloadDate);
		tounloadDate = ReportDateUtil.getToDate(tounloadDate);

		String origin = (String) searchCriteria.getSearchMap().get("origin");
		String destination = (String) searchCriteria.getSearchMap().get(
				"destination");

		StringBuffer query = new StringBuffer("");
		/*
		 * query.append(
		 * "select obj from Ticket obj where obj.status=1 and obj.ticketStatus=1 and obj.billBatch between '"
		 * + fromDateStr + "'and '" + toDateStr + "'");
		 */
		query.append("select obj from Ticket obj where obj.status=1 and obj.ticketStatus=1 ");

		/*
		 * if (!StringUtils.isEmpty(fromDateStr) &&
		 * !StringUtils.isEmpty(toDateStr)) {
		 * query.append("and  obj.billBatch between '" + fromDateStr + "' and '"
		 * + toDateStr + "'"); }
		 */

		if (!StringUtils.isEmpty(fromDateStr)) {
			query.append(" and  obj.billBatch>='").append(fromDateStr + "'");
		}
		if (!StringUtils.isEmpty(toDateStr)) {
			query.append(" and  obj.billBatch<='").append(toDateStr + "'");
		}

		if (!StringUtils.isEmpty(fromloadDate)
				&& !StringUtils.isEmpty(toloadDate)) {
			query.append("and  obj.loadDate between '" + fromloadDate
					+ "' and '" + toloadDate + "'");
		}
		if (!StringUtils.isEmpty(fromunloadDate)
				&& !StringUtils.isEmpty(tounloadDate)) {
			query.append("and  obj.unloadDate between '" + fromunloadDate
					+ "' and '" + tounloadDate + "'");
		}

		if (!StringUtils.isEmpty(origin)) {
			query.append("and  obj.origin=").append(origin);
		}
		/*
		 * if (!StringUtils.isEmpty(destination)) {
		 * query.append("and  obj.destination=").append(destination); }
		 */

		if (!StringUtils.isEmpty(destination)) {
			if (destination.equalsIgnoreCase("91")) {
				Map criterias = new HashMap();
				criterias.put("name", "Grows");
				criterias.put("type", 2);
				Location grows = genericDAO.getByCriteria(Location.class,
						criterias);
				criterias.clear();
				criterias.put("name", "Tullytown");
				criterias.put("type", 2);
				Location tullyTown = genericDAO.getByCriteria(Location.class,
						criterias);

				query.append("and  obj.destination in(" + grows.getId() + ","
						+ tullyTown.getId() + ")");
			} else {

				query.append("and  obj.destination=").append(destination);
			}
		}
		if (!StringUtils.isEmpty(origin) && !StringUtils.isEmpty(destination)) {
			String rateQuery = "select obj from BillingRate obj where obj.transferStation="
					+ origin + " and obj.landfill=" + destination;
			List<BillingRate> fs = genericDAO.executeSimpleQuery(rateQuery);
			BillingRate billingRate = null;
			if (fs != null && fs.size() > 0) {
				billingRate = fs.get(0);
			}
			if (billingRate != null) {
				int sortBy = (billingRate.getSortBy() == null) ? 1
						: billingRate.getSortBy();
				if (sortBy == 1) {
					query.append(" order by obj.originTicket");
				} else {
					query.append(" order by obj.destinationTicket");
				}
			}
		} else {
			query.append(" order by obj.billBatch desc");
		}
		System.out.println(query);
		List<Ticket> tickets = genericDAO.executeSimpleQuery(query.toString());
		return processTickets(tickets, new HashMap());
	}

	@Override
	public BillingWrapper generateBillingHistoryData(
			SearchCriteria searchCriteria, BillingHistoryInput input) {
		String fromDateInvoiceStr = ReportDateUtil.getFromDate(input
				.getFromInvoiceDate());
		String toDateInvoiceStr = ReportDateUtil.getToDate(input
				.getInvoiceDateTo());
		String invoiceNumberFrom = input.getInvoiceNumberFrom();
		String invoiceNumberTo = input.getInvoiceNumberTo();

		String fuelSurchargeFrom1 = input.getFuelSurchargeFrom();
		String fuelSurchargeTo1 = input.getFuelSurchargeTo();

		String tonnagePremiumFrom = input.getTonnagePremiumFrom();
		String tonnagePremiumTo = input.getTonnagePremiumTo();

		String demurrageChargeFrom = input.getDemurrageChargeFrom();
		String demurrageChargeTo = input.getDemurrageChargeTo();

		String amountFrom = input.getAmountFrom();
		String amountTo = input.getAmountTo();

		String totAmtFrom = input.getTotAmtFrom();
		String totAmtTo = input.getTotAmtTo();

		String totalAmtTo = input.getTotalAmtTo();
		String totalAmtFrom = input.getTotalAmtFrom();

		String rateFrom = input.getRateFrom();
		String rateTo = input.getRateTo();

		boolean useInvoice = false;
		StringBuffer ticketIds = new StringBuffer("-1,");
		if ( (!StringUtils.isEmpty(invoiceNumberFrom))
				|| (!StringUtils.isEmpty(invoiceNumberTo))
				|| (!StringUtils.isEmpty(input.getFuelSurchargeFrom()))
				|| (!StringUtils.isEmpty(input.getFuelSurchargeTo()))
				|| (!StringUtils.isEmpty(tonnagePremiumFrom))
				|| (!StringUtils.isEmpty(tonnagePremiumTo))
				|| (!StringUtils.isEmpty(demurrageChargeFrom))
				|| (!StringUtils.isEmpty(demurrageChargeTo))
				|| (!StringUtils.isEmpty(amountFrom))
				|| (!StringUtils.isEmpty(amountTo))
				|| (!StringUtils.isEmpty(totAmtFrom))
				|| (!StringUtils.isEmpty(totAmtFrom))
				|| (!StringUtils.isEmpty(totalAmtTo))
				|| (!StringUtils.isEmpty(totalAmtFrom))//
				|| (!StringUtils.isEmpty(input.getRateFrom()))
				|| (!StringUtils.isEmpty(input.getRateTo()))) {
			StringBuffer query2 = new StringBuffer(
					"select bill.ticket from Invoice inv, Billing bill where 1=1 and bill.invoiceNo = inv.invoiceNumber and bill.origin=inv.transferStation.name and ((bill.destination=inv.landfill.name AND bill.destination not in ('Grows','Tullytown')) OR bill.destination in ('Grows','Tullytown'))");

			if (!StringUtils.isEmpty(input.getRateFrom())) {

				query2.append(" and bill.rate>=").append(rateFrom);
			}
			if (!StringUtils.isEmpty(input.getRateTo())) {

				query2.append(" and bill.rate<=").append(rateTo);
			}

			if (!StringUtils.isEmpty(fromDateInvoiceStr)) {
				query2.append(" and  inv.invoiceDate>='").append(
						fromDateInvoiceStr + "'");
			}
			if (!StringUtils.isEmpty(toDateInvoiceStr)) {
				query2.append(" and  inv.invoiceDate<='").append(
						toDateInvoiceStr + "'");
			}
			if (!StringUtils.isEmpty(invoiceNumberFrom)) {
				query2.append(" and  bill.invoiceNo>='").append(
						invoiceNumberFrom + "'");
			}
			if (!StringUtils.isEmpty(invoiceNumberTo)) {
				query2.append(" and  bill.invoiceNo<='").append(
						invoiceNumberTo + "'");
			}

			if (!StringUtils.isEmpty(fuelSurchargeFrom1)) {
				query2.append(" and bill.fuelSurcharge >= '").append(
						fuelSurchargeFrom1 + "'");
			}
			if (!StringUtils.isEmpty(fuelSurchargeTo1)) {
				query2.append(" and bill.fuelSurcharge <= '").append(
						fuelSurchargeTo1 + "'");
			}
			// /hereeee

			if (!StringUtils.isEmpty(tonnagePremiumFrom)) {
				query2.append(" and bill.tonnagePremium >= ").append(
						tonnagePremiumFrom);
			}
			if (!StringUtils.isEmpty(tonnagePremiumTo)) {
				query2.append(" and bill.tonnagePremium <= ").append(
						tonnagePremiumTo);
			}

			if (!StringUtils.isEmpty(demurrageChargeFrom)) {
				query2.append(" and bill.demurrageCharge >= ").append(
						demurrageChargeFrom);
			}
			if (!StringUtils.isEmpty(demurrageChargeTo)) {
				query2.append(" and bill.demurrageCharge <= ").append(
						demurrageChargeTo);
			}
			if (!StringUtils.isEmpty(amountFrom)) {
				query2.append(" and bill.amount >= ").append(amountFrom);
			}
			if (!StringUtils.isEmpty(amountTo)) {
				query2.append(" and bill.amount <= ").append(amountTo);
			}
			if (!StringUtils.isEmpty(totalAmtFrom)) {
				query2.append(" and bill.totAmt >= ").append(totalAmtFrom);
			}
			if (!StringUtils.isEmpty(totalAmtTo)) {
				query2.append(" and bill.totAmt <= ").append(totalAmtTo);
			}
			if (!StringUtils.isEmpty(totAmtFrom)) {
				query2.append(" and inv.sumTotal >= ").append(totAmtFrom);
			}
			if (!StringUtils.isEmpty(totAmtTo)) {
				query2.append(" and inv.sumTotal <= ").append(totAmtTo);
			}

			useInvoice = true;
			List<Ticket> tickets = genericDAO.executeSimpleQuery(query2
					.toString());
			System.out.println("\nquery2.toString()===>" + query2.toString()
					+ "\n");
			System.out.println("\ntickets.size===>" + tickets.size() + "\n");
			if (tickets != null && tickets.size() > 0) {
				for (Ticket tkt : tickets) {
					ticketIds.append(tkt.getId()).append(",");
				}
			}
			if (ticketIds.indexOf(",") != -1) {
				ticketIds.deleteCharAt(ticketIds.length() - 1);
			}
		}
		Map<String, String> params = new HashMap<String, String>();
		String batchDateFrom = ReportDateUtil.getFromDate(input
				.getBatchDateFrom());
		String batchDateTo = ReportDateUtil.getToDate(input.getBatchDateTo());
		String loadDateFrom = ReportDateUtil.getFromDate(input.getLoadedFrom());
		String loadDateTo = ReportDateUtil.getToDate(input.getLoadedTo());
		String unloadDateFrom = ReportDateUtil.getFromDate(input
				.getUnloadedFrom());
		String unloadDateTo = ReportDateUtil.getToDate(input.getUnloadedTo());

		String ticketStatus = input.getTicketStatus();
		String terminal = input.getTerminal();
		String createdBy = input.getCreatedBy();
		String origin = input.getOrigin();
		String destination = input.getDestination();
		String driver = input.getDriver();
		String truck = input.getTruck();
		String trailer = input.getTrailer();
		String subcontractor = input.getSubcontractor();

		String originTicketFrom = input.getOriginTicketFrom();
		String destinationTicketFrom = input.getDestinationTicketFrom();
		String originGrossWtFrom = input.getOriginGrossWtFrom();
		String originTareWtFrom = input.getOriginTareWtFrom();
		String originTonWtFrom = input.getOriginTonsWtFrom();
		String landfillGrossWtFrom = input.getLandfillGrossWtFrom();
		String landfillTareWtFrom = input.getLandfillTareWtFrom();
		String landfillTonWtFrom = input.getLandfillTonsWtFrom();

		String transferTimeInFrom = input.getTransferTimeInFrom();
		String transferTimeInTo = input.getTransferTimeInTo();
		String transferTimeOutFrom = input.getTransferTimeOutFrom();
		String transferTimeOutTo = input.getTransferTimeOutTo();

		String landfillTimeInFrom = input.getLandfillTimeInFrom();
		String landfillTimeInTo = input.getLandfillTimeInTo();
		String landfillTimeOutFrom = input.getLandfillTimeOutFrom();
		String landfillTimeOutTo = input.getLandfillTimeOutTo();

		String originTicketTo = input.getOriginTicketTo();
		String destinationTicketTo = input.getDestinationTicketTo();
		String originGrossWtTo = input.getOriginGrossWtTo();
		String originTareWtTo = input.getOriginTareWtTo();
		String originTonWtTo = input.getOriginTonsWtTo();
		String landfillGrossWtTo = input.getLandfillGrossWtTo();
		String landfillTareWtTo = input.getLandfillTareWtTo();
		String landfillTonWtTo = input.getLandfillTonsWtTo();

		/* String */rateFrom = input.getRateFrom();
		params.put("rateFrom", rateFrom);
		// String amountFrom=input.getAmountFrom();
		params.put("amountFrom", amountFrom);
		String fuelSurchargeFrom = input.getFuelSurchargeFrom();
		params.put("fuelSurchargeFrom", fuelSurchargeFrom);
		// String tonnagePremiumFrom=input.getTonnagePremiumFrom();
		params.put("tonnagePremiumFrom", tonnagePremiumFrom);
		// String demurrageChargeFrom=input.getDemurrageChargeFrom();
		params.put("demurrageChargeFrom", demurrageChargeFrom);
		// String totAmtFrom=input.getTotAmtFrom();
		params.put("totAmtFrom", totAmtFrom);

		/* String */rateTo = input.getRateTo();
		params.put("rateTo", rateTo);
		// String amountTo=input.getAmountTo();
		params.put("amountTo", amountTo);
		String fuelSurchargeTo = input.getFuelSurchargeTo();
		params.put("fuelSurchargeTo", fuelSurchargeTo);
		// String demurrageChargeTo=input.getDemurrageChargeTo();
		params.put("demurrageChargeTo", demurrageChargeTo);
		// String tonnagePremiumTo=input.getTonnagePremiumTo();
		params.put("tonnagePremiumTo", tonnagePremiumTo);
		// String totAmtTo=input.getTotAmtTo();
		params.put("totAmtTo", totAmtTo);
		String company = input.getCompany();
		params.put("company", company);
		params.put("customer", input.getCustomer());

		/*
		 * boolean rate=false; StringBuffer ticketIds1 = new
		 * StringBuffer("-1,"); if((!StringUtils.isEmpty(input.getCompany())) ||
		 * (!StringUtils.isEmpty(input.getCustomer())) ){ StringBuffer query3 =
		 * new StringBuffer(
		 * "select tic from Ticket tic,BillingRate bill where tic.status =1 and 1=1 and tic.billBatch between '"
		 * +batchDateFrom+"' and '"+batchDateTo+"'"+
		 * "and (tic.origin= bill.transferStation and tic.destination= bill.landfill)"
		 * ); StringBuffer query3 = new StringBuffer(
		 * "select tic from Ticket tic,BillingRate bill where tic.status =1 and 1=1 and (tic.origin= bill.transferStation and tic.destination= bill.landfill)"
		 * ); if(!StringUtils.isEmpty(input.getRateFrom())){
		 * 
		 * query3.append(" and bill.value>=").append(rateFrom); }
		 * if(!StringUtils.isEmpty(input.getRateTo())){
		 * 
		 * query3.append(" and bill.value<=").append(rateTo); }
		 * if(!StringUtils.isEmpty(input.getCompany())){
		 * 
		 * query3.append(" and bill.companyLocation.id in (").append(company).append
		 * (")"); }
		 * 
		 * if(!StringUtils.isEmpty(input.getCustomer())){
		 * 
		 * query3.append(" and bill.customername.id in (").append(input.getCustomer
		 * ()).append(")"); } rate=true;
		 * 
		 * List<Ticket> tickets =
		 * genericDAO.executeSimpleQuery(query3.toString());
		 * 
		 * if (tickets!=null && tickets.size()>0) {
		 * 
		 * for(Ticket tkt:tickets) {
		 * 
		 * ticketIds1.append(tkt.getId()).append(","); } } if
		 * (ticketIds1.indexOf(",")!=-1) {
		 * ticketIds1.deleteCharAt(ticketIds1.length()-1); } }
		 */

		StringBuffer query = new StringBuffer("");
		StringBuffer countQuery = new StringBuffer("");
		/*
		 * query.append(
		 * "select obj from Ticket obj where obj.status=1 and obj.billBatch between '"
		 * +batchDateFrom+"' and '"+batchDateTo+"'");
		 */
		query.append("select obj from Ticket obj where (obj.status=1 OR obj.status=3) ");
		/*
		 * countQuery.append(
		 * "select count(obj) from Ticket obj where obj.status=1 and obj.billBatch between '"
		 * +batchDateFrom+"' and '"+batchDateTo+"'");
		 */
		countQuery
				.append("select count(obj) from Ticket obj where (obj.status=1 OR obj.status=3)");
		if (useInvoice) {
			query.append(" and obj.id in (" + ticketIds.toString() + ")");
			countQuery.append(" and obj.id in (" + ticketIds.toString() + ")");
		}

		/*
		 * if (rate) {
		 * query.append(" and obj.id in ("+ticketIds1.toString()+")");
		 * countQuery.append(" and obj.id in ("+ticketIds1.toString()+")"); }
		 */
		//
		if (!StringUtils.isEmpty(input.getCompany())) {

			query.append(" and obj.companyLocation.id in (").append(company)
					.append(")");
			countQuery.append(" and obj.companyLocation.id in (")
					.append(company).append(")");
		}

		if (!StringUtils.isEmpty(input.getCustomer())) {

			query.append(" and obj.customer.id in (")
					.append(input.getCustomer()).append(")");
			countQuery.append(" and obj.customer.id in (")
					.append(input.getCustomer()).append(")");
		}

		//
		if (!StringUtils.isEmpty(batchDateTo)) {
			query.append(" and  obj.billBatch<='").append(batchDateTo + "'");
			countQuery.append(" and  obj.billBatch<='").append(
					batchDateTo + "'");
		}
		if (!StringUtils.isEmpty(batchDateFrom)) {
			query.append(" and  obj.billBatch>='").append(batchDateFrom + "'");
			countQuery.append(" and  obj.billBatch>='").append(
					batchDateFrom + "'");
		}

		if (!StringUtils.isEmpty(ticketStatus)) {
			query.append(" and  obj.ticketStatus in (").append(ticketStatus)
					.append(")");
			countQuery.append(" and  obj.ticketStatus in (")
					.append(ticketStatus).append(")");
		}
		if (!StringUtils.isEmpty(fromDateInvoiceStr)) {
			query.append(" and  obj.invoiceDate>='").append(
					fromDateInvoiceStr + "'");
			countQuery.append(" and  obj.invoiceDate>='").append(
					fromDateInvoiceStr + "'");
		}
		if (!StringUtils.isEmpty(toDateInvoiceStr)) {
			query.append(" and  obj.invoiceDate<='").append(
					toDateInvoiceStr + "'");
			countQuery.append(" and  obj.invoiceDate<='").append(
					toDateInvoiceStr + "'");
		}
		/*
		 * if (!StringUtils.isEmpty(terminal)) {
		 * query.append(" and  obj.driver.terminal.id in ("
		 * ).append(terminal).append(")");
		 * countQuery.append(" and  obj.driver.terminal.id in ("
		 * ).append(terminal).append(")"); }
		 */
		if (!StringUtils.isEmpty(terminal)) {
			// System.out.println("\nTerminal===>"+terminal+"\n");
			query.append(" and  obj.terminal in (").append(terminal)
					.append(")");
			countQuery.append(" and  obj.terminal in (").append(terminal)
					.append(")");
		}
		if (!StringUtils.isEmpty(createdBy)) {
			query.append(" and  obj.createdBy in (").append(createdBy)
					.append(")");
			countQuery.append(" and  obj.createdBy in (").append(createdBy)
					.append(")");
		}
		if (!StringUtils.isEmpty(origin)) {
			query.append(" and  obj.origin.id in (").append(origin).append(")");
			countQuery.append(" and  obj.origin.id in (").append(origin)
					.append(")");
		}

		StringUtils.contains("194", destination);
		System.out.println("\n 194-->"
				+ StringUtils.contains("194", destination));
		System.out.println("\n destination-->" + destination);
		if (!StringUtils.isEmpty(destination)) {
			String[] elements = destination.split(",");

			boolean isGrowsTullyTown = false;
			for (int i = 0; i < elements.length; i++) {
				System.out.println(elements[i]);
				if (elements[i].contains("91")) {
					isGrowsTullyTown = true;
					/*
					 * Map criterias = new HashMap(); criterias.put("name",
					 * "Grows"); criterias.put("type", 2); Location grows=
					 * genericDAO.getByCriteria(Location.class, criterias);
					 * criterias.clear(); criterias.put("name", "Tullytown");
					 * criterias.put("type", 2); Location tullyTown=
					 * genericDAO.getByCriteria(Location.class, criterias);
					 * query
					 * .append(" and  obj.destination.id in(").append(destination
					 * +","+grows.getId()+","+tullyTown.getId()).append(")");
					 * countQuery
					 * .append(" and  obj.destination.id in (").append(
					 * destination
					 * +","+grows.getId()+","+tullyTown.getId()).append(")");
					 */
				}
			}
			if (isGrowsTullyTown) {
				Map criterias = new HashMap();
				criterias.put("name", "Grows");
				criterias.put("type", 2);
				Location grows = genericDAO.getByCriteria(Location.class,
						criterias);
				criterias.clear();
				criterias.put("name", "Tullytown");
				criterias.put("type", 2);
				Location tullyTown = genericDAO.getByCriteria(Location.class,
						criterias);
				query.append(" and  obj.destination.id in(")
						.append(destination + "," + grows.getId() + ","
								+ tullyTown.getId()).append(")");
				countQuery
						.append(" and  obj.destination.id in (")
						.append(destination + "," + grows.getId() + ","
								+ tullyTown.getId()).append(")");
			}

			else {
				query.append(" and  obj.destination.id in(")
						.append(destination).append(")");
				countQuery.append(" and  obj.destination.id in (")
						.append(destination).append(")");
			}

			/*
			 * query.append(" and  obj.destination.id in(").append(destination).
			 * append(")");
			 * countQuery.append(" and  obj.destination.id in (").append
			 * (destination).append(")");
			 */
		}
		if (!StringUtils.isEmpty(originTicketFrom)) {
			query.append(" and obj.originTicket >= ").append(originTicketFrom);
			countQuery.append(" and obj.originTicket >= ").append(
					originTicketFrom);
		}
		if (!StringUtils.isEmpty(originTicketTo)) {
			query.append(" and obj.originTicket <= ").append(originTicketTo);
			countQuery.append(" and obj.originTicket <= ").append(
					originTicketTo);
		}
		if (!StringUtils.isEmpty(destinationTicketFrom)) {
			query.append(" and obj.destinationTicket >= ").append(
					destinationTicketFrom);
			countQuery.append(" and obj.destinationTicket >= ").append(
					destinationTicketFrom);
		}
		if (!StringUtils.isEmpty(destinationTicketTo)) {
			query.append(" and obj.destinationTicket <= ").append(
					destinationTicketTo);
			countQuery.append(" and obj.destinationTicket <= ").append(
					destinationTicketTo);
		}
		if (!StringUtils.isEmpty(driver)) {
			query.append(" and  obj.driver.id in (").append(driver).append(")");
			countQuery.append(" and  obj.driver.id in (").append(driver)
					.append(")");
		}
		if (!StringUtils.isEmpty(truck)) {
			
			String vehiclequery="select obj from Vehicle obj where obj.type=1 and obj.unit in ("
				+truck
				+")";
			
			
			
			List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
			String truckIds="";
			if(vehicleLists!=null && vehicleLists.size()>0){				
				int count=0;
			for(Vehicle vehicleObj : vehicleLists) {
				if(count==0){
					count++;
					truckIds=String.valueOf(vehicleObj.getId());
				}
				else{
				truckIds=truckIds+","+String.valueOf(vehicleObj.getId());
				}
			}
			}
			
			query.append(" and  obj.vehicle.id in (").append(truckIds).append(")");
			;
			countQuery.append(" and  obj.vehicle.id in (").append(truckIds)
					.append(")");
			;
		}
		
		
		if (!StringUtils.isEmpty(trailer)) {
			
			String vehiclequery="select obj from Vehicle obj where obj.type=2 and obj.unit in ("
				+trailer
				+")";
			
			
			
			List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
			String trailerIds="";
			if(vehicleLists!=null && vehicleLists.size()>0){				
				int count=0;
			for(Vehicle vehicleObj : vehicleLists) {
				if(count==0){
					count++;
					trailerIds=String.valueOf(vehicleObj.getId());
				}
				else{
					trailerIds=trailerIds+","+String.valueOf(vehicleObj.getId());
				}
			}
			}			
			
			
			query.append(" and  obj.trailer.id in (").append(trailerIds)
					.append(")");
			;
			countQuery.append(" and  obj.trailer.id in (").append(trailerIds)
					.append(")");
			;
		}
		
		
		if (!StringUtils.isEmpty(subcontractor)) {
			query.append(" and  obj.subcontractor.id in (")
					.append(subcontractor).append(")");
			;
			countQuery.append(" and  obj.subcontractor.id in (")
					.append(subcontractor).append(")");
			;
		}
		if (!StringUtils.isEmpty(originGrossWtFrom)) {
			query.append(" and  obj.transferGross>=").append(originGrossWtFrom);
			countQuery.append(" and  obj.transferGross>=").append(
					originGrossWtFrom);
		}
		if (!StringUtils.isEmpty(originGrossWtTo)) {
			query.append(" and  obj.transferGross<=").append(originGrossWtTo);
			countQuery.append(" and  obj.transferGross<=").append(
					originGrossWtTo);
		}
		if (!StringUtils.isEmpty(originTareWtFrom)) {
			query.append(" and  obj.transferTare>=").append(originTareWtFrom);
			countQuery.append(" and  obj.transferTare>=").append(
					originTareWtFrom);
		}
		if (!StringUtils.isEmpty(originTareWtTo)) {
			query.append(" and  obj.transferTare<=").append(originTareWtTo);
			countQuery.append(" and  obj.transferTare<=")
					.append(originTareWtTo);
		}
		if (!StringUtils.isEmpty(originTonWtFrom)) {
			query.append(" and  obj.transferTons>=").append(originTonWtFrom);
			countQuery.append(" and  obj.transferTons>=").append(
					originTonWtFrom);
		}
		if (!StringUtils.isEmpty(originTonWtTo)) {
			query.append(" and  obj.transferTons<=").append(originTonWtTo);
			countQuery.append(" and  obj.transferTons<=").append(originTonWtTo);
		}
		if (!StringUtils.isEmpty(landfillGrossWtFrom)) {
			query.append(" and  obj.landfillGross>=").append(
					landfillGrossWtFrom);
			countQuery.append(" and  obj.landfillGross>=").append(
					landfillGrossWtFrom);
		}
		if (!StringUtils.isEmpty(landfillGrossWtTo)) {
			query.append(" and  obj.landfillGross<=").append(landfillGrossWtTo);
			countQuery.append(" and  obj.landfillGross<=").append(
					landfillGrossWtTo);
		}
		if (!StringUtils.isEmpty(landfillTareWtFrom)) {
			query.append(" and  obj.landfillTare>=").append(landfillTareWtFrom);
			countQuery.append(" and  obj.landfillTare>=").append(
					landfillTareWtFrom);
		}
		if (!StringUtils.isEmpty(landfillTareWtTo)) {
			query.append(" and  obj.landfillTare<=").append(landfillTareWtTo);
			countQuery.append(" and  obj.landfillTare<=").append(
					landfillTareWtTo);
		}
		if (!StringUtils.isEmpty(landfillTonWtFrom)) {
			query.append(" and  obj.landfillTons>=").append(landfillTonWtFrom);
			countQuery.append(" and  obj.landfillTons>=").append(
					landfillTonWtFrom);
		}
		if (!StringUtils.isEmpty(landfillTonWtTo)) {
			query.append(" and  obj.landfillTons<=").append(landfillTonWtTo);
			countQuery.append(" and  obj.landfillTons<=").append(
					landfillTonWtTo);
		}
		if (!StringUtils.isEmpty(loadDateFrom)) {
			query.append(" and  obj.loadDate>='").append(loadDateFrom + "'");
			countQuery.append(" and  obj.loadDate>='").append(
					loadDateFrom + "'");

		}
		if (!StringUtils.isEmpty(loadDateTo)) {
			query.append(" and  obj.loadDate<='").append(loadDateTo + "'");
			countQuery.append(" and  obj.loadDate<='").append(loadDateTo + "'");

		}
		if (!StringUtils.isEmpty(unloadDateFrom)) {
			query.append(" and  obj.unloadDate>='")
					.append(unloadDateFrom + "'");
			countQuery.append(" and  obj.unloadDate>='").append(
					unloadDateFrom + "'");

		}
		if (!StringUtils.isEmpty(unloadDateTo)) {
			query.append(" and  obj.unloadDate<='").append(unloadDateTo + "'");
			countQuery.append(" and  obj.unloadDate<='").append(
					unloadDateTo + "'");
		}

		if (!StringUtils.isEmpty(transferTimeInFrom)
				&& !StringUtils.isEmpty(transferTimeInTo)) {
			query.append(" and  obj.transferTimeIn Between '")
					.append(transferTimeInFrom + "'").append(" and '")
					.append(transferTimeInTo + "'");
			countQuery.append(" and  obj.transferTimeIn Between '")
					.append(transferTimeInFrom + "'").append(" and '")
					.append(transferTimeInTo + "'");

		}
		if (!StringUtils.isEmpty(transferTimeOutFrom)
				&& !StringUtils.isEmpty(transferTimeOutTo)) {
			query.append(" and  obj.transferTimeOut Between '")
					.append(transferTimeOutFrom + "'").append(" and '")
					.append(transferTimeOutTo + "'");
			countQuery.append(" and  obj.transferTimeOut Between '")
					.append(transferTimeOutFrom + "'").append(" and '")
					.append(transferTimeOutTo + "'");
		}

		if (!StringUtils.isEmpty(landfillTimeInFrom)
				&& !StringUtils.isEmpty(landfillTimeInTo)) {
			query.append(" and  obj.landfillTimeIn Between '")
					.append(landfillTimeInFrom + "'").append(" and '")
					.append(landfillTimeInTo + "'");
			countQuery.append(" and  obj.landfillTimeIn Between '")
					.append(landfillTimeInFrom + "'").append(" and '")
					.append(landfillTimeInTo + "'");

		}
		if (!StringUtils.isEmpty(landfillTimeOutFrom)
				&& !StringUtils.isEmpty(landfillTimeOutTo)) {
			query.append(" and  obj.landfillTimeOut Between '")
					.append(landfillTimeOutFrom + "'").append(" and '")
					.append(landfillTimeOutTo + "'");
			countQuery.append(" and  obj.landfillTimeOut Between '")
					.append(landfillTimeOutFrom + "'").append(" and '")
					.append(landfillTimeOutTo + "'");
		}

		System.out.println("\nquery.toString()=>" + query.toString() + "\n");
		Long recordCount = (Long) genericDAO.getEntityManager()
				.createQuery(countQuery.toString()).getSingleResult();
		searchCriteria.setRecordCount(recordCount.intValue());
		System.out.println("\nrecordCount=>" + recordCount.intValue() + "\n");
		query.append(" order by billBatch desc, id");
		List<Ticket> tickets = (List<Ticket>) genericDAO
				.getEntityManager()
				.createQuery(query.toString())
				.setMaxResults(searchCriteria.getPageSize())
				.setFirstResult(
						searchCriteria.getPage() * searchCriteria.getPageSize())
				.getResultList();
		// ticketIds1=null;
		ticketIds = null;
		return processTicketsNew(tickets, params);

		
	}
	
	
	
	private BillingWrapper processTicketsNew(List<Ticket> tickets,Map<String, String> params) {
		
		List<Billing_New> summarys = new ArrayList<Billing_New>();
		BillingWrapper wrapper = new BillingWrapper();
		double sumGallon = 0.0;
		double sumNet = 0.0;
		double sumBillableTon = 0.0;
		double sumOriginTon = 0.0;
		double sumDestinationTon = 0.0;
		double sumAmount = 0.0;
		double sumFuelSurcharge = 0.0;
		double sumTonnage = 0.0;
		double sumDemmurage = 0.0;
		double sumTotal = 0.0;	
		
		
		
		
		 StringBuffer ticketIds = new StringBuffer("-1,");
			for (Ticket tkt : tickets) {
				ticketIds.append(tkt.getId()).append(",");
			}
			if (ticketIds.indexOf(",") != -1) {
				ticketIds.deleteCharAt(ticketIds.length() - 1);
			}			
			
			String query="select obj from Billing_New obj where obj.ticket in ("
				+ticketIds.toString()+")";
			 summarys=genericDAO.executeSimpleQuery(query);			
			
			 String sum_query="select sum(obj.effectiveNetWt),sum(obj.effectiveTonsWt),sum(obj.originTonsWt),sum(obj.destinationTonsWt),sum(obj.amount),sum(obj.fuelSurcharge),sum(obj.tonnagePremium),sum(obj.demurrageCharge) from Billing_New obj where obj.ticket in ("
				+ticketIds.toString()+")";
			 
			 List<Billing_New> sum_list=genericDAO.executeSimpleQuery(sum_query);
			
			 if(sum_list!=null && sum_list.size()>0){
			 for(Object obj:sum_list){
				 Object[] objarry=(Object[])obj;
				if(objarry!=null){
				if(objarry[0] !=null)	
				 sumNet=Double.parseDouble(objarry[0].toString());
				if(objarry[1] !=null)
				 sumBillableTon=Double.parseDouble(objarry[1].toString());
				if(objarry[2] !=null)
				 sumOriginTon=Double.parseDouble(objarry[2].toString());
				if(objarry[3] !=null)
				 sumDestinationTon=Double.parseDouble(objarry[3].toString());
				if(objarry[4] !=null)
				 sumAmount=Double.parseDouble(objarry[4].toString());
				if(objarry[5] !=null)
				 sumFuelSurcharge=Double.parseDouble(objarry[5].toString());
				if(objarry[6] !=null)
				 sumTonnage=Double.parseDouble(objarry[6].toString());
				if(objarry[7] !=null)
				 sumDemmurage=Double.parseDouble(objarry[7].toString());
				}
			 }
			 }		
		
		
	    wrapper.setBillings(summarys);	     
		sumBillableTon = MathUtil.roundUp(sumBillableTon, 2);
		sumOriginTon = MathUtil.roundUp(sumOriginTon, 2);
		sumDestinationTon = MathUtil.roundUp(sumDestinationTon, 2);
		sumNet = MathUtil.roundUp(sumNet, 2);
		sumAmount = MathUtil.roundUp(sumAmount, 2);
		sumFuelSurcharge = MathUtil.roundUp(sumFuelSurcharge, 2);
		sumDemmurage = MathUtil.roundUp(sumDemmurage, 2);
		sumTonnage = MathUtil.roundUp(sumTonnage, 2);
		sumGallon = MathUtil.roundUp(sumGallon, 2);		

		sumTotal = sumAmount + sumFuelSurcharge + sumDemmurage + sumTonnage;
		wrapper.setSumBillableTon(sumBillableTon);
		wrapper.setSumOriginTon(sumOriginTon);
		wrapper.setSumDestinationTon(sumDestinationTon);
		wrapper.setSumTonnage(sumTonnage);
		wrapper.setSumNet(sumNet);
		wrapper.setSumAmount(sumAmount);
		wrapper.setSumFuelSurcharge(sumFuelSurcharge);
		wrapper.setSumTotal(sumTotal);
		wrapper.setSumGallon(sumGallon);
		wrapper.setTotalRowCount(tickets.size());
		return wrapper;
	}
		
		
		
	
	
	

	private BillingWrapper processTickets(List<Ticket> tickets,
			Map<String, String> params) {
		List<Billing> summarys = new ArrayList<Billing>();
		BillingWrapper wrapper = new BillingWrapper();

		wrapper.setBilling(summarys);
		double sumGallon = 0.0;
		double sumNet = 0.0;
		double sumBillableTon = 0.0;
		double sumOriginTon = 0.0;
		double sumDestinationTon = 0.0;
		double sumAmount = 0.0;
		double sumFuelSurcharge = 0.0;
		double sumTonnage = 0.0;
		double sumDemmurage = 0.0;
		double sumTotal = 0.0;
		Map<String, List<BillingRate>> billingMap = new HashMap<String, List<BillingRate>>();
		for (Ticket ticket : tickets) {

			Billing billing = new Billing();
			// Billing invoice=null;
			Map criterias = new HashMap();
			if (ticket.getTicketStatus() == 2) {
				Billing invoice = null;
				criterias.put("ticket.id", ticket.getId());
				invoice = genericDAO.getByCriteria(Billing.class, criterias);
				if (invoice == null)
					continue;

				billing = invoice;

				sumNet += (Double) billing.getEffectiveNetWt();
				sumBillableTon += (Double) billing.getEffectiveTonsWt();

				sumOriginTon += (Double) billing.getOriginTonsWt();
				sumDestinationTon += (Double) billing.getDestinationTonsWt();

				sumAmount += billing.getAmount();
				sumFuelSurcharge += billing.getFuelSurcharge();
				sumTonnage += billing.getTonnagePremium();
				sumDemmurage += billing.getDemurrageCharge();
				// sumTotal+=billing.getTotAmt();
				if (ticket.getCreatedBy() != null) {
					User user = genericDAO.getById(User.class,
							ticket.getCreatedBy());
					if (user != null) {
						billing.setEnteredBy(user.getUsername());
					}
				}
				billing.setTransferTimeIn(ticket.getTransferTimeIn());
				billing.setTransferTimeOut(ticket.getTransferTimeOut());
				billing.setLandfillTimeIn(ticket.getLandfillTimeIn());
				billing.setLandfillTimeOut(ticket.getLandfillTimeOut());
				billing.setProcessStatus(StaticDataUtil.getText(
						"TICKET_STATUS", "" + ticket.getTicketStatus()));
				if (ticket.getCompanyLocation() != null)
					billing.setCompany((ticket.getCompanyLocation() != null) ? ticket
							.getCompanyLocation().getName() : "");
				if (ticket.getCustomer() != null)
					billing.setCustomer((ticket.getCustomer() != null) ? ticket
							.getCustomer().getName() : "");
				

				if (ticket.getTrailer() != null) {
					billing.setTrailer("" + ticket.getTrailer().getUnit());
				}

			

				billing.setSubcontractor((ticket.getSubcontractor() != null) ? ticket
						.getSubcontractor().getName() : "");
				billing.setInvoiceDate((ticket.getInvoiceDate() != null) ? (sdf
						.format(ticket.getInvoiceDate())) : null);
				//
				billing.setLoaded(sdf.format(ticket.getLoadDate()));
				if (ticket.getVehicle() != null) {
					billing.setUnit("" + ticket.getVehicle().getUnit());
				}
				if (ticket.getTrailer() != null) {
					billing.setTrailer("" + ticket.getTrailer().getUnit());
				}
				billing.setTerminal((ticket.getTerminal() != null) ? ticket
						.getTerminal().getName() : "");
				billing.setDriver((ticket.getDriver() != null) ? ticket
						.getDriver().getFullName() : "");
				billing.setUnloaded(sdf.format(ticket.getUnloadDate()));
				billing.setOriginTicket(String.valueOf(ticket.getOriginTicket()));
				billing.setDestinationTicket(String.valueOf(ticket
						.getDestinationTicket()));
				summarys.add(billing);
				System.out.println("\n continue");
				continue;

			}
			billing.setTicket(ticket);
			billing.setLoaded(sdf.format(ticket.getLoadDate()));
			if (ticket.getVehicle() != null) {
				billing.setUnit("" + ticket.getVehicle().getUnit());
			}
			if (ticket.getTrailer() != null) {
				billing.setTrailer("" + ticket.getTrailer().getUnit());
			}
			billing.setDate(sdf.format(ticket.getBillBatch()));
			billing.setDriver((ticket.getDriver() != null) ? ticket.getDriver()
					.getFullName() : "");
			billing.setSubcontractor((ticket.getSubcontractor() != null) ? ticket
					.getSubcontractor().getName() : "");
			billing.setOrigin((ticket.getOrigin() != null) ? ticket.getOrigin()
					.getName() : "");
			billing.setDestination((ticket.getDestination() != null) ? ticket
					.getDestination().getName() : "");
			
			billing.setTerminal((ticket.getTerminal() != null) ? ticket
					.getTerminal().getName() : "");
			
			if (ticket.getCreatedBy() != null) {
				User user = genericDAO.getById(User.class,
						ticket.getCreatedBy());
				if (user != null) {
					billing.setEnteredBy(user.getUsername());
				}
			}
			billing.setUnloaded(sdf.format(ticket.getUnloadDate()));
			billing.setOriginTicket(String.valueOf(ticket.getOriginTicket()));
			billing.setDestinationTicket(String.valueOf(ticket
					.getDestinationTicket()));
			billing.setOriginGrossWt(ticket.getTransferGross());
			billing.setOriginTareWt(ticket.getTransferTare());
			billing.setOriginNetWt(ticket.getTransferNet());
			billing.setOriginTonsWt(ticket.getTransferTons());
			billing.setDestinationGrossWt(ticket.getLandfillGross());
			billing.setDestinationTareWt(ticket.getLandfillTare());
			billing.setDestinationNetWt(ticket.getLandfillNet());
			billing.setDestinationTonsWt(ticket.getLandfillTons());
			billing.setInvoiceDate((ticket.getInvoiceDate() != null) ? (sdf
					.format(ticket.getInvoiceDate())) : null);
			billing.setInvoiceNo(ticket.getInvoiceNumber());
			billing.setTransferTimeIn(ticket.getTransferTimeIn());
			billing.setTransferTimeOut(ticket.getTransferTimeOut());
			billing.setLandfillTimeIn(ticket.getLandfillTimeIn());
			billing.setLandfillTimeOut(ticket.getLandfillTimeOut());
			billing.setProcessStatus(StaticDataUtil.getText("TICKET_STATUS", ""
					+ ticket.getTicketStatus()));
			BillingRate billingRate = null;
			try {
				Long destination_id;
				Location location = genericDAO.getById(Location.class, ticket
						.getDestination().getId());
				if (location.getName().equalsIgnoreCase("grows")
						|| location.getName().equalsIgnoreCase("tullytown")) {

					destination_id = 91l;

				} else {
					destination_id = ticket.getDestination().getId();
				}
				String rateQuery = "select obj from BillingRate obj where obj.transferStation='"
						+ ticket.getOrigin().getId() + "' and obj.landfill='"
						/* + ticket.getDestination().getId() + "'"; */
						+ destination_id + "'";
				String key = ticket.getOrigin().getId() + "_" + destination_id;
				
				List<BillingRate> fs = null;
				fs = billingMap.get(key);
				if (fs == null) {
					fs = genericDAO.executeSimpleQuery(rateQuery);
					billingMap.put(key, fs);
				}
				if (fs != null && fs.size() > 0) {
					for (BillingRate rate : fs) {
						if (rate.getRateUsing() == null) {
							billingRate = rate;
							break;
						} else if (rate.getRateUsing() == 1) {
							// calculation for a load date
							if ((ticket.getLoadDate().getTime() >= rate
									.getValidFrom().getTime())
									&& (ticket.getLoadDate().getTime() <= rate
											.getValidTo().getTime())) {
								billingRate = rate;
								break;
							}
						} else if (rate.getRateUsing() == 2) {
							// calculation for a unload date
							if ((ticket.getUnloadDate().getTime() >= rate
									.getValidFrom().getTime())
									&& (ticket.getUnloadDate().getTime() <= rate
											.getValidTo().getTime())) {
								billingRate = rate;
								break;
							}
						}
					}
					if (!StringUtils.isEmpty(params.get("company"))) {
						String[] companies = params.get("company").split(",");
						boolean sameCompany = false;
						for (String cmp : companies) {
							if (cmp.equalsIgnoreCase(billingRate
									.getCompanyLocation().getId().toString())) {
								sameCompany = true;
								break;
							}
						}
						if (!sameCompany)
							continue;
					}
					if ((billingRate.getCompanyLocation()) != null)
						billing.setCompany(billingRate.getCompanyLocation()
								.getName());
					if ((billingRate.getCompanyLocation()) != null)
						billing.setCompanyId(billingRate.getCompanyLocation());
					if (!StringUtils.isEmpty(params.get("customer"))) {
						String[] customers = params.get("customer").split(",");
						boolean sameCustomer = false;
						for (String cmp : customers) {
							if (cmp.equalsIgnoreCase(billingRate
									.getCustomername().getId().toString())) {
								sameCustomer = true;
								break;
							}
						}
						if (!sameCustomer)
							continue;
					}

					if ((billingRate.getCustomername()) != null)
						billing.setCustomer(billingRate.getCustomername()
								.getName());
					if ((billingRate.getCustomername()) != null)
						billing.setCustomerId(billingRate.getCustomername());
					if (billingRate.getBilledby().equals("bygallon")) {
						billing.setGallon(ticket.getTransferNet()/8.34);
					} else {
						billing.setGallon(0.0);
					}
				}
			} catch (Exception ex) {
				ex.printStackTrace();
			}
			if (billingRate != null) {
				// billing.setCustomer(billingRate.getCustomername().getName());
				int billUsing = (billingRate.getBillUsing() == null) ? 1
						: billingRate.getBillUsing();
				int rateType = billingRate.getRateType();
				if (billUsing == 1) {
					billing.setBillUsing("Transfer");
				}
				if (billUsing == 2) {
					billing.setBillUsing("Landfill");
				}
				if (billUsing == 1) {
					if (rateType == 2 || rateType == 3) {
						Double minbilgrosswt = billingRate
								.getMinbillablegrossWeight();
						if (minbilgrosswt != null
								&& ticket.getTransferGross() < minbilgrosswt) {
							billing.setEffectiveGrossWt(minbilgrosswt);
							billing.setMinimumbillablegrossweight(minbilgrosswt);
							billing.setEffectiveTareWt(ticket.getTransferTare());
							Double originNetWt = minbilgrosswt
									- ticket.getTransferTare();
							billing.setEffectiveNetWt(originNetWt);
							billing.setEffectiveTonsWt(originNetWt / 2000.0);
						} else {
							billing.setEffectiveGrossWt(ticket
									.getTransferGross());
							billing.setMinimumbillablegrossweight(minbilgrosswt);
							billing.setEffectiveTareWt(ticket.getTransferTare());
							billing.setEffectiveNetWt(ticket.getTransferNet());
							billing.setEffectiveTonsWt(ticket.getTransferTons());
						}
					}
				} else {
					if (rateType == 2 || rateType == 3) {
						Double minbilgrosswt = billingRate
								.getMinbillablegrossWeight();
						if (minbilgrosswt != null
								&& ticket.getLandfillGross() < minbilgrosswt) {
							billing.setEffectiveGrossWt(minbilgrosswt);
							billing.setMinimumbillablegrossweight(minbilgrosswt);
							billing.setEffectiveTareWt(ticket.getLandfillTare());
							Double destinationNetWt = minbilgrosswt
									- ticket.getLandfillTare();
							billing.setEffectiveNetWt(destinationNetWt);
							billing.setEffectiveTonsWt(destinationNetWt / 2000.0);

						} else {
							billing.setEffectiveGrossWt(ticket
									.getLandfillGross());
							billing.setMinimumbillablegrossweight(minbilgrosswt);
							billing.setEffectiveTareWt(ticket.getLandfillTare());
							billing.setEffectiveNetWt(ticket.getLandfillNet());
							billing.setEffectiveTonsWt(ticket.getLandfillTons());
						}
					}
				}
				// int rateType = billingRate.getRateType();
				if (rateType == 1) {
					if (billUsing == 1) {
						Double minbilgrosswt = billingRate
								.getMinbillablegrossWeight();
						if (minbilgrosswt != null
								&& ticket.getTransferGross() < minbilgrosswt) {
							billing.setEffectiveGrossWt(minbilgrosswt);
							billing.setMinimumbillablegrossweight(minbilgrosswt);
							billing.setEffectiveTareWt(ticket.getTransferTare());
							Double originNetWt = minbilgrosswt
									- ticket.getTransferTare();
							billing.setEffectiveNetWt(originNetWt);
						} else {
							billing.setEffectiveGrossWt(ticket
									.getTransferGross());
							billing.setMinimumbillablegrossweight(minbilgrosswt);
							billing.setEffectiveTareWt(ticket.getTransferTare());
							billing.setEffectiveNetWt(ticket.getTransferNet());
						}
					} else {
						Double minbilgrosswt = billingRate
								.getMinbillablegrossWeight();
						if (minbilgrosswt != null
								&& ticket.getLandfillGross() < minbilgrosswt) {
							billing.setEffectiveGrossWt(minbilgrosswt);
							billing.setMinimumbillablegrossweight(minbilgrosswt);
							billing.setEffectiveTareWt(ticket.getLandfillTare());
							Double destinationNetWt = minbilgrosswt
									- ticket.getLandfillTare();
							billing.setEffectiveNetWt(destinationNetWt);
						} else {
							billing.setEffectiveGrossWt(ticket
									.getLandfillGross());
							billing.setMinimumbillablegrossweight(minbilgrosswt);
							billing.setEffectiveTareWt(ticket.getLandfillTare());
							billing.setEffectiveNetWt(ticket.getLandfillNet());
						}
					}
					billing.setRate(billingRate.getValue());
					billing.setAmount((billing.getEffectiveNetWt() / 8.34)
							* billingRate.getValue());
				} else if (rateType == 2) {
					// per load
					billing.setRate(billingRate.getValue());
					billing.setAmount(billingRate.getValue());
				} else if (rateType == 3) {
					// per tonne
					billing.setRate(billingRate.getValue());
					billing.setAmount(billing.getEffectiveTonsWt()
							* billingRate.getValue());
				}
				sumGallon += billing.getGallon();
				sumBillableTon += billing.getEffectiveTonsWt();
				sumOriginTon += billing.getOriginTonsWt();
				sumDestinationTon += billing.getDestinationTonsWt();
				sumNet += billing.getEffectiveNetWt();
				sumAmount += billing.getAmount();
				billing.setAmount(MathUtil.roundUp(billing.getAmount(), 2));
				String fuelSurchargeType = billingRate.getFuelSurchargeType();
				Double fuelSurcharge = 0.0;
				if ("N".equalsIgnoreCase(fuelSurchargeType)) {
					fuelSurcharge = 0.0;
				}
				if ("M".equalsIgnoreCase(fuelSurchargeType)) {
					Double fuelSurchargePerTon = billingRate
							.getSurchargePerTon();
					Double surchargeAmount = billingRate.getSurchargeAmount();
					if (fuelSurchargePerTon == null && surchargeAmount == null)
						fuelSurcharge = 0.0;
					else if (fuelSurchargePerTon != null) {
						fuelSurcharge = billing.getEffectiveTonsWt()
								* fuelSurchargePerTon;
					} else {
						fuelSurcharge = surchargeAmount;
					}
				}
				
				if ("A".equalsIgnoreCase(fuelSurchargeType)) {
					FuelSurchargePadd currentPadd = billingRate.getPadd();
					if (currentPadd != null) {
						Integer paddUsing = billingRate.getPaddUsing();
						Double padd = 0.0;
						StringBuffer paddBuffer = new StringBuffer(
								"select obj from FuelSurchargePadd obj where obj.code='"
										+ currentPadd.getCode() + "'");
						Date effectiveDate = null;
						if (paddUsing != null) {
							if (paddUsing == 1) {
								effectiveDate = ticket.getLoadDate();
							} else if (paddUsing == 2) {
								effectiveDate = ticket.getUnloadDate();
							} else if (paddUsing == 3) {
								effectiveDate = ticket.getBillBatch();
							}
						}
						if (effectiveDate != null) {
							paddBuffer.append(" and obj.validTo>='"
									+ mysqldf.format(effectiveDate)
									+ "' and obj.validFrom<='"
									+ mysqldf.format(effectiveDate) + "'");
						}
						List<FuelSurchargePadd> padds = genericDAO
								.executeSimpleQuery(paddBuffer.toString());
						if (padds != null && padds.size() > 0) {
							padd = padds.get(0).getAmount();
						}
						if ((padd != -1) && (billingRate.getPeg() != null)
								&& (billingRate.getMiles() != null)) {
							int sign = 1;
							if ((padd - billingRate.getPeg()) < 0) {
								sign = -1;
							}
							
							//System.out.println("***** The tet value is "+MathUtil.roundUp(padd - billingRate.getPeg(),3));
							double term = Math.floor(sign
									* (MathUtil.roundUp(padd - billingRate.getPeg(),3))/ 0.05);
							fuelSurcharge = sign * term
									* billingRate.getMiles() * 0.01;
						}
						if ((padd != -1) && (billingRate.getPeg() != null)
								&& (billingRate.getMiles() == null)) {
							double percentage = Math.floor((MathUtil.roundUp(padd - billingRate
									.getPeg(),3)) / 0.08);
							if (rateType == 2) {
								fuelSurcharge = percentage
										* billingRate.getValue() * 0.01;
							} else if (rateType == 3) {
								// per tonne
								fuelSurcharge = billing.getEffectiveTonsWt()
										* billingRate.getValue() * percentage
										* 0.01;
							}
						}
					}
					// Weekly fuel surcharge calculation
					int wfsr = billingRate.getFuelsurchargeweeklyRate();
					if (wfsr == 1) {
						StringBuffer weeklyRateQuery = new StringBuffer(
								"select obj from FuelSurchargeWeeklyRate obj where obj.transferStations="
										+ ticket.getOrigin().getId()
										+ " and obj.landfillStations="
										+ ticket.getDestination().getId() + " ");
						FuelSurchargeWeeklyRate fuelsurchargeweeklyrate = null;
						Date effectiveDatePadd = null;
						if (billingRate.getWeeklyRateUsing() != null) {
							if (billingRate.getWeeklyRateUsing() == 1) {
								effectiveDatePadd = ticket.getLoadDate();
							}
							if (billingRate.getWeeklyRateUsing() == 2) {
								effectiveDatePadd = ticket.getUnloadDate();
							}
							if (billingRate.getWeeklyRateUsing() == 3) {
								effectiveDatePadd = ticket.getBillBatch();
							}
							weeklyRateQuery.append(" and obj.fromDate <= '"
									+ mysqldf.format(effectiveDatePadd)
									+ "' and obj.toDate >= '"
									+ mysqldf.format(effectiveDatePadd) + "'");
						}
						List<FuelSurchargeWeeklyRate> listfswr = genericDAO
								.executeSimpleQuery(weeklyRateQuery.toString());
						if (listfswr != null && listfswr.size() > 0) {
							fuelsurchargeweeklyrate = listfswr.get(0);
						}
						if (fuelsurchargeweeklyrate != null) {
							int fswrateType = fuelsurchargeweeklyrate
									.getRateType();
							if (fswrateType == 3) {
								fuelSurcharge = billing.getEffectiveTonsWt()
										* fuelsurchargeweeklyrate
												.getFuelSurchargeRate();
							}
							if (fswrateType == 2) {
								fuelSurcharge = fuelsurchargeweeklyrate
										.getFuelSurchargeRate();
							}

							if (fswrateType == 5) {
								fuelSurcharge = fuelsurchargeweeklyrate
										.getFuelSurchargeRate()
										* billing.getAmount();
							}

							if (fswrateType == 1) {
								fuelSurcharge = (billing.getEffectiveNetWt() / 8.34)
										* fuelsurchargeweeklyrate
												.getFuelSurchargeRate();
							}
						}
					}
				}// end of Weekly fuel surcharge calculation
				sumFuelSurcharge += fuelSurcharge;
				fuelSurcharge = MathUtil.roundUp(fuelSurcharge, 2);
				billing.setFuelSurcharge(fuelSurcharge);

				// if (billingRate.getTonnagePremium() != null) {
				if (billingRate.getTonnagePremium().getCode() != null) {
					Double premiumTonne = billingRate.getTonnagePremium()
							.getPremiumTonne();
					Double rate = billingRate.getTonnagePremium().getRate();
					if (billing.getEffectiveTonsWt() > premiumTonne) {
						billing.setTonnagePremium((billing.getEffectiveTonsWt() - premiumTonne)
								* rate);
					}
				} else {
					billing.setTonnagePremium(0.0);
				}
				sumTonnage += billing.getTonnagePremium();
				billing.setTonnagePremium(MathUtil.roundUp(
						billing.getTonnagePremium(), 2));
				
				if(billingRate.getDemmurageCharge()!=null){
				if (billingRate.getDemmurageCharge().getDemurragecode() != null) {
					Integer chargeAfterTime = billingRate.getDemmurageCharge().getChargeAfter();							
					Integer incrementTime = billingRate.getDemmurageCharge().getTimeIncrements();
					Double rate = billingRate.getDemmurageCharge().getDemurragerate();
					if(billingRate.getDemmurageCharge().getTimesUsed().equals("1")){
						String[] landfillInhourMin = ticket.getLandfillTimeIn().split(":");
					    int landfillInhour = Integer.parseInt(landfillInhourMin[0]);
					    int landfillInmins = Integer.parseInt(landfillInhourMin[1]);
					    int landfillInhoursInMins = landfillInhour * 60;
					    int landfilltimein = landfillInhoursInMins+landfillInmins;
					    
					    String[] landfillOuthourMin = ticket.getLandfillTimeOut().split(":");
					    int landfillOuthour = Integer.parseInt(landfillOuthourMin[0]);
					    int landfillOutmins = Integer.parseInt(landfillOuthourMin[1]);
					    int landfillOuthoursInMins = landfillOuthour * 60;
					    int landfilltimeout = landfillOuthoursInMins+landfillOutmins;
					    
					    int diffTime = landfilltimeout - landfilltimein;
					    if(diffTime < 0){
					    	diffTime = 1440+diffTime;
					    }
					    
					    double minCharge = 0.0;
					    if(diffTime > chargeAfterTime){
					    	minCharge = rate;
					    	
					    	int timeRemaining = diffTime - (chargeAfterTime+incrementTime);
					    	double numberOfIteration = (double)timeRemaining /(double) incrementTime;	
					    	
					    	for(int i=0;i<numberOfIteration;i++){					    		
					    		//if(timeRemaining > incrementTime){
					    			minCharge = minCharge + rate;
					    			timeRemaining = timeRemaining - incrementTime;
					    		//}
					    	}					    	
					    }	
					    billing.setDemurrageCharge(minCharge);
					}
					else if(billingRate.getDemmurageCharge().getTimesUsed().equals("2")){
						String[] landfillInhourMin = ticket.getTransferTimeIn().split(":");
					    int landfillInhour = Integer.parseInt(landfillInhourMin[0]);
					    int landfillInmins = Integer.parseInt(landfillInhourMin[1]);
					    int landfillInhoursInMins = landfillInhour * 60;
					    int landfilltimein = landfillInhoursInMins+landfillInmins;
					    
					    String[] landfillOuthourMin = ticket.getTransferTimeOut().split(":");
					    int landfillOuthour = Integer.parseInt(landfillOuthourMin[0]);
					    int landfillOutmins = Integer.parseInt(landfillOuthourMin[1]);
					    int landfillOuthoursInMins = landfillOuthour * 60;
					    int landfilltimeout = landfillOuthoursInMins+landfillOutmins;
					   
					    int diffTime = landfilltimeout - landfilltimein;
					    if(diffTime < 0){
					    	diffTime = 1440+diffTime;
					    }
					    
					    double minCharge = 0.0;
					    if(diffTime > chargeAfterTime){
					    	minCharge = rate;
					    	
					    	int timeRemaining = diffTime - (chargeAfterTime+incrementTime);
					    	double numberOfIteration = (double)timeRemaining /(double) incrementTime;	
					    	
					    	for(int i=0;i<numberOfIteration;i++){					    		
					    		//if(timeRemaining > incrementTime){
					    			minCharge = minCharge + rate;
					    			timeRemaining = timeRemaining - incrementTime;
					    		//}
					    	}
					    	
					    }
					    billing.setDemurrageCharge(minCharge);
					}
					
				} 
				else {
					billing.setDemurrageCharge(0.0);
				}				
			}
			else{
				billing.setDemurrageCharge(0.0);
			}
				sumDemmurage += billing.getDemurrageCharge();
				billing.setDemurrageCharge(MathUtil.roundUp(billing.getDemurrageCharge(), 2));

			} else {
				billing.setRate(0.0);
				billing.setFuelSurcharge(0.0);
			}
			double amount = billing.getAmount() + billing.getFuelSurcharge()
					+ billing.getDemurrageCharge()
					+ billing.getTonnagePremium();
			
			billing.setTotAmt(amount);
			summarys.add(billing);
		}
		billingMap.clear();
		billingMap = null;
		sumBillableTon = MathUtil.roundUp(sumBillableTon, 2);
		sumOriginTon = MathUtil.roundUp(sumOriginTon, 2);
		sumDestinationTon = MathUtil.roundUp(sumDestinationTon, 2);
		sumNet = MathUtil.roundUp(sumNet, 2);
		sumAmount = MathUtil.roundUp(sumAmount, 2);
		sumFuelSurcharge = MathUtil.roundUp(sumFuelSurcharge, 2);
		sumDemmurage = MathUtil.roundUp(sumDemmurage, 2);
		sumTonnage = MathUtil.roundUp(sumTonnage, 2);
		sumGallon = MathUtil.roundUp(sumGallon, 2);

		sumTotal = sumAmount + sumFuelSurcharge + sumDemmurage + sumTonnage;
		wrapper.setSumBillableTon(sumBillableTon);
		wrapper.setSumOriginTon(sumOriginTon);
		wrapper.setSumDestinationTon(sumDestinationTon);
		wrapper.setSumTonnage(sumTonnage);
		wrapper.setSumDemmurage(sumDemmurage);
		wrapper.setSumNet(sumNet);
		wrapper.setSumAmount(sumAmount);
		wrapper.setSumFuelSurcharge(sumFuelSurcharge);
		wrapper.setSumTotal(sumTotal);
		wrapper.setSumGallon(sumGallon);
		wrapper.setTotalRowCount(tickets.size());
		return wrapper;
	}

	
	
	
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public void saveBillingData(HttpServletRequest request,
			SearchCriteria criteria) throws Exception {
		Location origin = null;
		Location destination = null;
		Long destinationInput=0L;
		Long originInput=0L;
		// List<Billing> data = generateBillingData(criteria);
		
		String invoiceNumber = (String) criteria.getSearchMap().get(
				"invoiceNumber");
		
		if(!StringUtils.isEmpty((String) criteria.getSearchMap().get("destination"))){
		destinationInput = Long.parseLong((String) criteria.getSearchMap()
				.get("destination"));
	}else{
		request.getSession().setAttribute("error",
		"Please Select Both Origin and Destination");
throw new Exception("origin and destindation is empty");
		}
		
		if(!StringUtils.isEmpty((String) criteria.getSearchMap().get("origin"))){
		originInput = Long.parseLong((String) criteria.getSearchMap().get(
				"origin"));
		}
		else{
			request.getSession().setAttribute("error",
			"Please Select Both Origin and Destination");
	throw new Exception("origin and destindation is empty");
		}
		if (invoiceNumber.isEmpty()) {
			request.getSession().setAttribute("error",
					"Please Enter Invoice Number");
			throw new Exception("invoice number null");
		}
		/*
		 * String query =
		 * "select obj from Invoice obj where obj.transferStation="
		 * +originInput+" and obj.landfill="
		 * +destinationInput+" and obj.invoiceNumber="+invoiceNumber;
		 * List<Invoice> list=genericDAO.executeSimpleQuery(query);
		 */
		
		BillingWrapper wrapper = generateBillingData(criteria);
		List<Billing> billList=wrapper.getBilling();
		String startdate="";
		String enddate="";
		Date startDate=null;
		Date endDate=null;
		if (billList.size() > 0) {			
			    Collections.sort(billList, new Comparator<Billing>() {
			        @Override
			        public int compare(final Billing object1, final Billing object2) {
			            return object1.getLoaded().compareTo(object2.getLoaded());
			        }					
			       } );
			    
			    int lstindex=billList.size()-1;
				startdate=billList.get(0).getLoaded();
				enddate=billList.get(lstindex).getLoaded();
				
				startDate=sdf.parse(startdate);
				endDate=sdf.parse(enddate);	
				
				startdate=mysqldf.format(startDate);
				enddate=mysqldf.format(endDate);
				
				
		}		
		String query = "select obj from BillingRate obj where obj.transferStation="
				+ originInput + " and obj.landfill=" + destinationInput+ " and obj.validFrom<='"+startdate+"' and obj.validTo >='"+enddate+"'";
		
		Location company =null;
		List<BillingRate> billingRates = genericDAO.executeSimpleQuery(query);
		if(!billingRates.isEmpty() && billingRates.size()>0){
			company = billingRates.get(0).getCompanyLocation();
		}
		else
		{
			String query1 = "select obj from BillingRate obj where obj.transferStation="
				+ originInput + " and obj.landfill=" + destinationInput+ "order by obj.validFrom desc";
			List<BillingRate> billingRates1 = genericDAO.executeSimpleQuery(query1);
			company = billingRates1.get(0).getCompanyLocation();
		}	
		
		
         
		String queryinvoice = "select obj from Billing_New obj where obj.company='"
				+company.getName()
				+ "' and obj.invoiceNo='"
				+invoiceNumber+"'";			
		 
		List<Invoice> invoices = genericDAO.executeSimpleQuery(queryinvoice);	

		/*
		 * Invoice invoice = genericDAO.getByUniqueAttribute(Invoice.class,
		 * "invoiceNumber", invoiceNumber);
		 */
		if (!StringUtils
				.isEmpty((String) criteria.getSearchMap().get("origin"))) {
			origin = genericDAO.getById(
					Location.class,
					Long.parseLong((String) criteria.getSearchMap().get(
							"origin")));
		} else {
			throw new Exception("Invalid transfer location");
		}
		if (!StringUtils.isEmpty((String) criteria.getSearchMap().get(
				"destination"))) {
			destination = genericDAO.getById(
					Location.class,
					Long.parseLong((String) criteria.getSearchMap().get(
							"destination")));
		} else {
			throw new Exception("Invalid landfill location");
		}
		if (invoices.isEmpty()) {
			Invoice invoice = new Invoice();
			String invoiceDate = (String) criteria.getSearchMap().get(
					"invoiceDate");
			if (!invoiceDate.isEmpty()) {
				Date invDate = new SimpleDateFormat("MM-dd-yyyy")
						.parse(invoiceDate);
				invoice.setInvoiceDate(invDate);
			} else {
				invoice.setInvoiceDate(Calendar.getInstance().getTime());
			}
			User user = (User) request.getSession().getAttribute("userInfo");
			invoice.setInvoiceNumber(invoiceNumber);
			invoice.setTransferStation(origin);
			invoice.setLandfill(destination);
			invoice.setSumBillableTon(wrapper.getSumBillableTon());
			invoice.setSumOriginTon(wrapper.getSumOriginTon());
			invoice.setSumDestinationTon(wrapper.getSumDestinationTon());
			invoice.setSumNet(wrapper.getSumNet());
			invoice.setSumFuelSurcharge(wrapper.getSumFuelSurcharge());
			invoice.setSumTonnage(wrapper.getSumTonnage());
			invoice.setSumDemmurage(wrapper.getSumDemmurage());
			invoice.setSumTotal(wrapper.getSumTotal());
			invoice.setSumAmount(wrapper.getSumAmount());
			invoice.setCreatedBy(user.getId());
			invoice.setSumGallon(wrapper.getSumGallon());
			genericDAO.saveOrUpdate(invoice);

			for (Billing billing : wrapper.getBilling()) {
				Ticket ticket = genericDAO.getById(Ticket.class, billing
						.getTicket().getId());
				ticket.setCustomer((billing.getCustomerId() != null) ? billing
						.getCustomerId() : null);
				ticket.setCompanyLocation((billing.getCompanyId() != null) ? billing
						.getCompanyId() : null);
				ticket.setTicketStatus(2);
				ticket.setInvoiceNumber(invoiceNumber);
				ticket.setInvoiceDate(invoice.getInvoiceDate());
				genericDAO.saveOrUpdate(ticket);
				billing.setCompany(ticket.getCompanyLocation().getName());
				billing.setCreatedBy(user.getId());
				billing.setInvoiceNo(invoiceNumber);
				billing.setInvoice_Date(invoiceDate);
				boolean duplicateTicket = ckeckTicketDuplicate(billing
						.getTicket().getId());

				if (duplicateTicket)
					genericDAO.saveOrUpdate(billing);

			}
		} else {
			request.getSession().setAttribute("error",
					"Invoice Number already exists. Please choose another number");
			throw new Exception(

			"Invoice Number already exists. Please choose another number");
		}
	}

	public boolean ckeckTicketDuplicate(Long ticketId) {

		String query = "select obj from Billing obj where ticket.id="
				+ ticketId;
		List<Billing> billing = genericDAO.executeSimpleQuery(query);
		if (billing.isEmpty()) {
			return true;
		}
		return false;

	}

	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	@Override
	public void saveSubcontractorBillingData(HttpServletRequest request,
			SearchCriteria criteria) throws Exception {
		Location origin = null;
		Location destination = null;
		Long destinationInput = null;
		Long originInput = null;
		String destinationStr = (String) criteria.getSearchMap().get(
				"destination");
		String originStr = (String) criteria.getSearchMap().get("origin");
		String voucherNo = (String) criteria.getSearchMap()
				.get("invoiceNumber");
		String company = (String) criteria.getSearchMap().get("company");
		if (!StringUtils.isEmpty(destinationStr))
			destinationInput = Long.parseLong(destinationStr);
		if (!StringUtils.isEmpty(originStr))
			originInput = Long.parseLong(originStr);
		String subcontractorId = (String) criteria.getSearchMap().get(
				"subcontractorName");
		Long subcontractorid = Long.valueOf(Long.parseLong(subcontractorId));
		SubContractor subContractor = (SubContractor) genericDAO.getById(
				SubContractor.class, (subcontractorid));
		if (voucherNo.isEmpty()) {
			request.getSession().setAttribute("error",
					"Please Enter voucher  Number");
			throw new Exception("Voucher number null");
		}
		if (!StringUtils.isEmpty(originStr)) {
			origin = genericDAO.getById(Location.class, originInput);
		}
		if (!StringUtils.isEmpty(destinationStr)) {
			destination = genericDAO.getById(Location.class, destinationInput);
		}

		String query = "select obj from SubcontractorInvoice obj where obj.subContractorId.id="
				+ subcontractorId
				+ " and obj.voucherNumber='"
				+ voucherNo
				+ "' and  obj.companyLocationId.id=" + company;
		List<SubcontractorInvoice> subcontractorInvoices = genericDAO
				.executeSimpleQuery(query);
		if (!subcontractorInvoices.isEmpty()) {
			request.getSession()
					.setAttribute("error",
							"Voucher number already exists. Please choose another number");
			throw new ExecutionException("Voucher number already exists");
		}

		SubcontractorBillingWrapper wrapper = generateSubcontractorBillingData(criteria);
		if (subcontractorInvoices.isEmpty()) {
			SubcontractorInvoice invoice = new SubcontractorInvoice();

			String invoiceDate = (String) criteria.getSearchMap().get(
					"invoiceDate");
			if (!invoiceDate.isEmpty()) {
				Date voucherDate = new SimpleDateFormat("MM-dd-yyyy")
						.parse(invoiceDate);
				invoice.setVoucherDate(voucherDate);
			} else {
				invoice.setVoucherDate(Calendar.getInstance().getTime());
			}

			User user = (User) request.getSession().getAttribute("userInfo");
			invoice.setCreatedBy(user.getId());
			invoice.setVoucherNumber(voucherNo);
			invoice.setTransferStation(origin);
			invoice.setLandfill(destination);
			invoice.setSubContractorId(subContractor);
			invoice.setSumBillableTon(wrapper.getSumBillableTon());
			invoice.setSumOriginTon(wrapper.getSumOriginTon());
			invoice.setSumDestinationTon(wrapper.getSumDestinationTon());
			invoice.setSumAmount(wrapper.getSumAmount());
			invoice.setSumFuelSurcharge(wrapper.getSumFuelSurcharge());
			invoice.setSumOtherCharges(wrapper.getSumOtherCharges());
			invoice.setSumTotal(wrapper.getSumTotal());
			invoice.setGrandTotal(wrapper.getGrandTotal());
			invoice.setMiscelleneousNote(wrapper.getMiscelleneousNote());
			invoice.setMiscelleneousCharges(wrapper.getMiscelleneousCharges());
			invoice.setCompanyLocationId(wrapper.getCompanyLocationId());
			// invoice.setCompanyname(wrapper.getCompany());
			invoice.setSubcontractorname(wrapper.getSubcontractorname());
			invoice.setAddress1(wrapper.getAddress1());
			invoice.setAddress2(wrapper.getAddress2());
			invoice.setCity(wrapper.getCity());
			invoice.setZipcode(wrapper.getZipcode());
			invoice.setPhone(wrapper.getPhone());
			invoice.setFax(wrapper.getFax());
			invoice.setState(wrapper.getState());
			genericDAO.saveOrUpdate(invoice);

			for (SubcontractorBilling billing : wrapper
					.getSubcontractorBillings()) {
				Ticket ticket = genericDAO.getById(Ticket.class, billing
						.getTicket().getId());
				ticket.setVoucherStatus(2);
				ticket.setVoucherNumber(invoice.getVoucherNumber());
				ticket.setVoucherDate(invoice.getVoucherDate());

				genericDAO.saveOrUpdate(ticket);
				billing.setCreatedBy(user.getId());
				billing.setInvoiceNo(voucherNo);
				billing.setMiscelleneousCharges(wrapper.getMiscelleneousCharges());

				genericDAO.saveOrUpdate(billing);

			}
		} else {
			request.getSession()
					.setAttribute("error",
							"Voucher number already exists. Please choose another number");
			throw new ExecutionException("Voucher number already exists");
		}

	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public void deleteBillingData(Invoice invoice) throws Exception {
		try {
			Map params = new HashMap();
			/*
			 * params.put("invoiceNo", invoice.getInvoiceNumber());
			 * params.put("origin", invoice.getTransferStation().getName());
			 * params.put("destination",invoice.getLandfill().getName());
			 */
			/*
			 * List<Billing> datas = genericDAO.findByCriteria(Billing.class,
			 * params);
			 */
			List<Billing> datas = null;
			if (invoice.getLandfill().getName()
					.equalsIgnoreCase("Grows/Tullytown")) {
				Location grows = null;
				Location tullyTown = null;

				Map criterias = new HashMap();
				criterias.put("name", "Grows");
				criterias.put("type", 2);
				grows = genericDAO.getByCriteria(Location.class, criterias);
				criterias.clear();
				criterias.put("name", "Tullytown");
				criterias.put("type", 2);
				tullyTown = genericDAO.getByCriteria(Location.class, criterias);
				String query = " select obj from Billing obj where obj.invoiceNo='"
						+ invoice.getInvoiceNumber()
						+ "' and obj.origin='"
						+ invoice.getTransferStation().getName()
						+ "' and obj.destination in ('"
						+ grows.getName()
						+ "','" + tullyTown.getName() + "')";
				datas = genericDAO.executeSimpleQuery(query);
			}

			else {
				params.put("invoiceNo", invoice.getInvoiceNumber());
				params.put("origin", invoice.getTransferStation().getName());
				params.put("destination", invoice.getLandfill().getName());
				datas = genericDAO.findByCriteria(Billing.class, params);
			}
			if (datas != null && datas.size() > 0) {
				for (Billing billing : datas) {
					Ticket ticket = genericDAO.getById(Ticket.class, billing
							.getTicket().getId());
					ticket.setTicketStatus(1);
					ticket.setInvoiceNumber(null);
					ticket.setInvoiceDate(null);
					genericDAO.saveOrUpdate(ticket);
					genericDAO.delete(billing);
				}
			}
			genericDAO.deleteById(Invoice.class, invoice.getId());
		} catch (Exception ex) {
			throw ex;
		}
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public void deleteSubcontractorBillingData(SubcontractorInvoice invoice)
			throws Exception {
		try {
			Map params = new HashMap();
			params.put("invoiceNo", invoice.getVoucherNumber());
			params.put("subcontractorId", invoice.getSubContractorId());
			params.put("companyLocationId", invoice.getCompanyLocationId());
			List<SubcontractorBilling> datas = genericDAO.findByCriteria(
					SubcontractorBilling.class, params);
			if (datas != null && datas.size() > 0) {
				for (SubcontractorBilling billing : datas) {
					Ticket ticket = genericDAO.getById(Ticket.class, billing
							.getTicket().getId());
					ticket.setVoucherStatus(1);
					ticket.setVoucherNumber(null);
					ticket.setVoucherDate(null);
					genericDAO.saveOrUpdate(ticket);
					genericDAO.delete(billing);
				}
			}
			genericDAO.deleteById(SubcontractorInvoice.class, invoice.getId());
		} catch (Exception ex) {
			throw ex;
		}
	}

	@Override
	public boolean checkDuplicate(Ticket ticket, String ticketType) {
		StringBuffer query = new StringBuffer("");
		List<Ticket> tickets = null;
		Long ticketId = -1l;
		if (ticket.getId() != null)
			ticketId = ticket.getId();
		try {
			if ("O".equalsIgnoreCase(ticketType)) {
				/*String origin = "select obj from Ticket obj where obj.origin.id="
						+ ticket.getOrigin().getId()
						+ " and obj.destination.id="
						+ ticket.getDestination().getId()
						+ " and obj.originTicket="
						+ ticket.getOriginTicket()
						+ " and obj.id != " + ticketId;*/
				
				String origin = "select obj from Ticket obj where obj.origin.id="
					+ ticket.getOrigin().getId()
					+ " and obj.originTicket="
					+ ticket.getOriginTicket()
					+ " and obj.id != " + ticketId;
				tickets = genericDAO.executeSimpleQuery(origin);
				if (tickets != null && tickets.size() > 0)
					return true;
			}
			if ("D".equalsIgnoreCase(ticketType)) {
				/*String destination = "select obj from Ticket obj where obj.origin.id="
						+ ticket.getOrigin().getId()
						+ " and obj.destination.id="
						+ ticket.getDestination().getId()
						+ " and obj.destinationTicket="
						+ ticket.getDestinationTicket()
						+ " and obj.id != "
						+ ticketId;*/
				String destination = "select obj from Ticket obj where 1=1"
					+ " and obj.destination.id="
					+ ticket.getDestination().getId()
					+ " and obj.destinationTicket="
					+ ticket.getDestinationTicket()
					+ " and obj.id != "
					+ ticketId;
				
				tickets = genericDAO.executeSimpleQuery(destination);
				if (tickets != null && tickets.size() > 0)
					return true;
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return false;
	}

	@Override
	public SubcontractorBillingWrapper generateSubcontractorBillingData(
			SearchCriteria searchCriteria) {
		List<String> str = new ArrayList<String>();
		int errorCount = 0;
		String misceCharges = (String) searchCriteria.getSearchMap().get(
				"miscelleneousCharges");
		String misceNote = (String) searchCriteria.getSearchMap().get(
				"miscelleneousNote");
		String subcontractorName = (String) searchCriteria.getSearchMap().get(
				"subcontractorName");
		String fromDateStr = (String) searchCriteria.getSearchMap().get(
				"fromDate");
		// String companyName=null;
		Long companyId = null;
		Location companylocation = null;
		String toDateStr = (String) searchCriteria.getSearchMap().get("toDate");

		String fromloadDate = (String) searchCriteria.getSearchMap().get(
				"fromloadDate");
		String toloadDate = (String) searchCriteria.getSearchMap().get(
				"toloadDate");
		String fromunloadDate = (String) searchCriteria.getSearchMap().get(
				"fromunloadDate");
		String tounloadDate = (String) searchCriteria.getSearchMap().get(
				"tounloadDate");
		String company = (String) searchCriteria.getSearchMap().get("company");
		Long subcontractorId = Long.valueOf(Long.parseLong(subcontractorName));
		if (!StringUtils.isEmpty(company)) {
			companyId = Long.valueOf(Long.parseLong(company));
			companylocation = genericDAO.getById(Location.class, companyId);
		}
		SubContractor subContractor = (SubContractor) genericDAO.getById(
				SubContractor.class, subcontractorId);

		fromDateStr = ReportDateUtil.getFromDate(fromDateStr);
		toDateStr = ReportDateUtil.getToDate(toDateStr);

		fromloadDate = ReportDateUtil.getFromDate(fromloadDate);
		toloadDate = ReportDateUtil.getToDate(toloadDate);

		fromunloadDate = ReportDateUtil.getFromDate(fromunloadDate);
		tounloadDate = ReportDateUtil.getToDate(tounloadDate);

		String origin = (String) searchCriteria.getSearchMap().get("origin");
		String destination = (String) searchCriteria.getSearchMap().get(
				"destination");
		System.out.println(destination);
		StringBuffer query = new StringBuffer("");
		/*
		 * query.append(
		 * "select obj from Ticket obj where obj.status=1 and obj.ticketStatus=1 and obj.billBatch between '"
		 * + fromDateStr + "'and '" + toDateStr + "'");
		 */
		query.append("select obj from Ticket obj where obj.status=1 and voucherStatus=1");

		if (!StringUtils.isEmpty(subcontractorName)) {
			query.append("and  obj.subcontractor=").append(subcontractorName);
		}
		if (!StringUtils.isEmpty(company)) {
			query.append("and  obj.companyLocation=").append(company);
		}

		if (!StringUtils.isEmpty(fromDateStr)) {
			query.append("and  obj.billBatch >='" + fromDateStr + "'");
		}

		if (!StringUtils.isEmpty(toDateStr)) {
			query.append("and  obj.billBatch <='" + toDateStr + "'");
		}

		if (!StringUtils.isEmpty(fromloadDate)) {
			query.append("and  obj.loadDate >='" + fromloadDate + "'");
		}

		if (!StringUtils.isEmpty(toloadDate)) {
			query.append("and  obj.loadDate <='" + toloadDate + "'");
		}

		if (!StringUtils.isEmpty(fromunloadDate)) {
			query.append("and  obj.unloadDate >= '" + fromunloadDate + "'");
		}
		if (!StringUtils.isEmpty(tounloadDate)) {
			query.append("and  obj.unloadDate <= '" + tounloadDate + "'");
		}

		if (StringUtils.isEmpty(subcontractorName)) {
			return null;
		}

		if (!StringUtils.isEmpty(origin)) {
			query.append("and  obj.origin=").append(origin);
		}
		if (!StringUtils.isEmpty(destination)) {
			query.append("and  obj.destination=").append(destination);
		}
		if (!StringUtils.isEmpty(origin) && !StringUtils.isEmpty(destination)) {
			StringBuffer rateQuery = new StringBuffer("");
			rateQuery
					.append("select obj from SubcontractorRate obj where obj.transferStation="
							+ origin + " and obj.landfill=" + destination);
			if (!StringUtils.isEmpty(subcontractorName)) {
				rateQuery.append("and obj.subcontractor=").append(
						subcontractorName);
			}
			rateQuery.append("order by obj.validFrom desc");
			List<SubcontractorRate> fs = genericDAO
					.executeSimpleQuery(rateQuery.toString());
			SubcontractorRate billingRate = null;
			if (fs != null && fs.size() > 0) {
				billingRate = fs.get(0);
			}
			if (billingRate != null) {
				int sortBy = (billingRate.getSortBy() == null) ? 1
						: billingRate.getSortBy();
				if (sortBy == 1) {
					query.append(" order by obj.originTicket");
				} else {
					query.append(" order by obj.destinationTicket");
				}
			}
		} else {
			query.append(" order by obj.origin.name asc,obj.destination.name asc,obj.originTicket asc");
		}
		System.out.println("\n query-->" + query.toString() + "\n");
		List<Ticket> tickets = genericDAO.executeSimpleQuery(query.toString());
		List<SubcontractorBilling> summarys = new ArrayList<SubcontractorBilling>();
		SubcontractorBillingWrapper wrapper = new SubcontractorBillingWrapper();
		wrapper.setSubcontractorBillings(summarys);
		double sumNet = 0.0;
		double sumBillableTon = 0.0;
		double sumOriginTon = 0.0;
		double sumDestinationTon = 0.0;
		double sumAmount = 0.0;
		double sumFuelSurcharge = 0.0;
		double sumTotal = 0.0;
		double sumOtherCharges = 0.0;
		double grandTotal = 0.0;
		double amount = 0.0;
		boolean expiredRate = false;
		for (Ticket ticket : tickets) {
			try {

				// /
				if (ticket.getCompanyLocation() == null) {
					Ticket tempticket = null;
					tempticket = ticket;
					SubcontractorRate billRate = null;

					String billrateQuery = "select obj from SubcontractorRate obj where obj.transferStation='"
							+ ticket.getOrigin().getId()
							+ "' and obj.landfill='"
							+ ticket.getDestination().getId() + "'";

					List<SubcontractorRate> fss = null;

					fss = genericDAO.executeSimpleQuery(billrateQuery);
					if (fss != null && fss.size() > 0) {

						for (SubcontractorRate rate : fss) {
							if (rate.getRateUsing() == null) {
								billRate = rate;
								break;
							} else if (rate.getRateUsing() == 1) {
								// calculation for a load date
								if ((ticket.getLoadDate().getTime() >= rate
										.getValidFrom().getTime())
										&& (ticket.getLoadDate().getTime() <= rate
												.getValidTo().getTime())) {
									billRate = rate;
									break;
								}
							} else if (rate.getRateUsing() == 2) {
								// calculation for a unload date
								if ((ticket.getUnloadDate().getTime() >= rate
										.getValidFrom().getTime())
										&& (ticket.getUnloadDate().getTime() <= rate
												.getValidTo().getTime())) {
									billRate = rate;
									break;
								}
							}
						}
					}
					if (fss != null && fss.size() > 0) {
						if ((billRate.getCompanyLocation()) != null)
							tempticket.setCompanyLocation(billRate
									.getCompanyLocation());
						genericDAO.saveOrUpdate(tempticket);
					}

				}
				// /

				SubcontractorBilling billing = new SubcontractorBilling();
				billing.setTicket(ticket);
				billing.setLoaded(sdf.format(ticket.getLoadDate()));
				if (ticket.getVehicle() != null) {
					billing.setUnit("" + ticket.getVehicle().getUnit());

				}
				billing.setDate(sdf.format(ticket.getBillBatch()));
				billing.setOrigin((ticket.getOrigin() != null) ? ticket
						.getOrigin().getName() : "");
				billing.setDestination((ticket.getDestination() != null) ? ticket
						.getDestination().getName() : "");
				billing.setOriginGrossWt(ticket.getTransferGross());
				billing.setOriginTareWt(ticket.getTransferTare());
				billing.setOriginNetWt(ticket.getTransferNet());
				billing.setOriginTonsWt(ticket.getTransferTons());
				billing.setDestinationGrossWt(ticket.getLandfillGross());
				billing.setDestinationTareWt(ticket.getLandfillTare());
				billing.setDestinationNetWt(ticket.getLandfillNet());
				billing.setDestinationTonsWt(ticket.getLandfillTons());
				billing.setUnloaded(sdf.format(ticket.getUnloadDate()));
				billing.setTransferTimeIn(ticket.getTransferTimeIn());
				billing.setTransferTimeOut(ticket.getTransferTimeOut());
				billing.setLandfillTimeIn(ticket.getLandfillTimeIn());
				billing.setLandfillTimeOut(ticket.getLandfillTimeOut());
				billing.setOriginTicket(String.valueOf(ticket.getOriginTicket()));
				billing.setDestinationTicket(String.valueOf(ticket
						.getDestinationTicket()));
				billing.setCompanyLocationId(ticket.getCompanyLocation());
				billing.setDriver((ticket.getDriver() != null) ? ticket
						.getDriver().getFullName() : "");
				SubcontractorRate billingRate = null;
				try {
					String rateQuery = "select obj from SubcontractorRate obj where obj.transferStation='"
							+ ticket.getOrigin().getId()
							+ "' and obj.landfill='"
							+ ticket.getDestination().getId()
							+ "' and obj.subcontractor='"
							+ subcontractorName
							+ "' order by obj.validFrom desc";
					List<SubcontractorRate> fs = genericDAO
							.executeSimpleQuery(rateQuery);
					if (fs != null && fs.size() > 0) {
						for (SubcontractorRate rate : fs) {
							if (rate.getRateUsing() == null) {
								billingRate = rate;
								break;
							} else if (rate.getRateUsing() == 1) {
								// calculation for a load date
								if ((ticket.getLoadDate().getTime() >= rate
										.getValidFrom().getTime())
										&& (ticket.getLoadDate().getTime() <= rate
												.getValidTo().getTime())) {
									billingRate = rate;
									break;
								}
							} else if (rate.getRateUsing() == 2) {
								// calculation for a unload date
								if ((ticket.getUnloadDate().getTime() >= rate
										.getValidFrom().getTime())
										&& (ticket.getUnloadDate().getTime() <= rate
												.getValidTo().getTime())) {
									billingRate = rate;
									break;
								}
							}
						}
					}
				} catch (Exception ex) {
					ex.printStackTrace();
				}

				//
				if (billingRate != null) {
					int billUsing = (billingRate.getBillUsing() == null) ? 1
							: billingRate.getBillUsing();
					int rateType = billingRate.getRateType();
					if (billUsing == 1) {
						billing.setBillUsing("Transfer");
					}
					if (billUsing == 2) {
						billing.setBillUsing("Landfill");
					}
					if (billUsing == 1) {
						if (rateType == 2 || rateType == 3) {
							Double minbilgrosswt = billingRate
									.getMinbillablegrossWeight();
							if (minbilgrosswt != null
									&& ticket.getTransferGross() < minbilgrosswt) {
								billing.setEffectiveGrossWt(minbilgrosswt);
								billing.setMinimumbillablegrossweight(minbilgrosswt);
								billing.setEffectiveTareWt(ticket
										.getTransferTare());
								Double originNetWt = minbilgrosswt
										- ticket.getTransferTare();
								billing.setEffectiveNetWt(originNetWt);
								billing.setEffectiveTonsWt(originNetWt / 2000.0);
							} else {
								billing.setEffectiveGrossWt(ticket
										.getTransferGross());
								billing.setMinimumbillablegrossweight(minbilgrosswt);
								billing.setEffectiveTareWt(ticket
										.getTransferTare());
								billing.setEffectiveNetWt(ticket
										.getTransferNet());
								billing.setEffectiveTonsWt(ticket
										.getTransferTons());
							}
						}
					} else {
						if (rateType == 2 || rateType == 3) {
							Double minbilgrosswt = billingRate
									.getMinbillablegrossWeight();
							if (minbilgrosswt != null
									&& ticket.getLandfillGross() < minbilgrosswt) {
								billing.setEffectiveGrossWt(minbilgrosswt);
								billing.setMinimumbillablegrossweight(minbilgrosswt);
								billing.setEffectiveTareWt(ticket
										.getLandfillTare());
								Double destinationNetWt = minbilgrosswt
										- ticket.getLandfillTare();
								billing.setEffectiveNetWt(destinationNetWt);
								billing.setEffectiveTonsWt(destinationNetWt / 2000.0);

							} else {
								billing.setEffectiveGrossWt(ticket
										.getLandfillGross());
								billing.setMinimumbillablegrossweight(minbilgrosswt);
								billing.setEffectiveTareWt(ticket
										.getLandfillTare());
								billing.setEffectiveNetWt(ticket
										.getLandfillNet());
								billing.setEffectiveTonsWt(ticket
										.getLandfillTons());
							}
						}
					}
					// int rateType = billingRate.getRateType();
					if (rateType == 1) {
						if (billUsing == 1) {
							Double minbilgrosswt = billingRate
									.getMinbillablegrossWeight();
							if (minbilgrosswt != null
									&& ticket.getTransferGross() < minbilgrosswt) {
								billing.setEffectiveGrossWt(minbilgrosswt);
								billing.setMinimumbillablegrossweight(minbilgrosswt);
								billing.setEffectiveTareWt(ticket
										.getTransferTare());
								Double originNetWt = minbilgrosswt
										- ticket.getTransferTare();
								billing.setEffectiveNetWt(originNetWt);
							} else {
								billing.setEffectiveGrossWt(ticket
										.getTransferGross());
								billing.setMinimumbillablegrossweight(minbilgrosswt);
								billing.setEffectiveTareWt(ticket
										.getTransferTare());
								billing.setEffectiveNetWt(ticket
										.getTransferNet());
							}
						} else {
							Double minbilgrosswt = billingRate
									.getMinbillablegrossWeight();
							if (minbilgrosswt != null
									&& ticket.getLandfillGross() < minbilgrosswt) {
								billing.setEffectiveGrossWt(minbilgrosswt);
								billing.setMinimumbillablegrossweight(minbilgrosswt);
								billing.setEffectiveTareWt(ticket
										.getLandfillTare());
								Double destinationNetWt = minbilgrosswt
										- ticket.getLandfillTare();
								billing.setEffectiveNetWt(destinationNetWt);
							} else {
								billing.setEffectiveGrossWt(ticket
										.getLandfillGross());
								billing.setMinimumbillablegrossweight(minbilgrosswt);
								billing.setEffectiveTareWt(ticket
										.getLandfillTare());
								billing.setEffectiveNetWt(ticket
										.getLandfillNet());
							}
						}
						billing.setRate(billingRate.getValue());
						billing.setAmount((billing.getEffectiveNetWt() / 8.34)
								* billingRate.getValue());
					} else if (rateType == 2) {
						// per load
						billing.setRate(billingRate.getValue());
						billing.setAmount(billingRate.getValue());
					} else if (rateType == 3) {
						// per tonne
						billing.setRate(billingRate.getValue());
						billing.setAmount(billing.getEffectiveTonsWt()
								* billingRate.getValue());
					}
					sumBillableTon += billing.getEffectiveTonsWt();
					sumOriginTon += billing.getOriginTonsWt();
					sumDestinationTon += billing.getDestinationTonsWt();
					sumNet += billing.getEffectiveNetWt();
					sumAmount += billing.getAmount();
					billing.setAmount(MathUtil.roundUp(billing.getAmount(), 2));

					/*
					 * if((billingRate.getCompanyLocation().getName())!=null){
					 * companyName=billingRate.getCompanyLocation().getName(); }
					 */

					/*
					 * String fuelSurchargeType =
					 * billingRate.getFuelSurchargeType(); Double fuelSurcharge
					 * = 0.0;
					 */
					/*
					 * if ("N".equalsIgnoreCase(fuelSurchargeType)) {
					 * fuelSurcharge = 0.0; } if
					 * ("M".equalsIgnoreCase(fuelSurchargeType)) { Double
					 * fuelSurchargePerTon = billingRate .getSurchargePerTon();
					 * Double surchargeAmount =
					 * billingRate.getSurchargeAmount(); if (fuelSurchargePerTon
					 * == null && surchargeAmount == null) fuelSurcharge = 0.0;
					 * else if (fuelSurchargePerTon != null) { fuelSurcharge =
					 * billing.getEffectiveTonsWt() fuelSurchargePerTon; } else
					 * { fuelSurcharge = surchargeAmount; } }
					 */
					/*
					 * if ("M".equalsIgnoreCase(fuelSurchargeType)) { Map
					 * criterias = new HashMap(); criterias.put("fromPlace.id",
					 * ticket.getOrigin().getId()); criterias.put("toPlace.id",
					 * ticket.getDestination().getId()); FuelSurcharge surcharge
					 * = genericDAO.getByCriteria(FuelSurcharge.class,
					 * criterias); if (surcharge!=null) { fuelSurcharge =
					 * surcharge.getTruckingCharge(); } }
					 */
					/*
					 * if ("A".equalsIgnoreCase(fuelSurchargeType)) {
					 * FuelSurchargePadd currentPadd = billingRate.getPadd(); if
					 * (currentPadd != null) { Integer paddUsing =
					 * billingRate.getPaddUsing(); Double padd = 0.0;
					 * StringBuffer paddBuffer = new StringBuffer(
					 * "select obj from FuelSurchargePadd obj where obj.code='"
					 * + currentPadd.getCode() + "'"); Date effectiveDate =
					 * null; if (paddUsing != null) { if (paddUsing == 1) {
					 * effectiveDate = ticket.getLoadDate(); } else if
					 * (paddUsing == 2) { effectiveDate =
					 * ticket.getUnloadDate(); } else if (paddUsing == 3) {
					 * effectiveDate = ticket.getBillBatch(); } } if
					 * (effectiveDate != null) {
					 * paddBuffer.append(" and obj.validTo>='" +
					 * mysqldf.format(effectiveDate) + "' and obj.validFrom<='"
					 * + mysqldf.format(effectiveDate) + "'"); } ////
					 * List<FuelSurchargePadd> padds = genericDAO
					 * .executeSimpleQuery(paddBuffer.toString()); if (padds !=
					 * null && padds.size() > 0) { padd =
					 * padds.get(0).getAmount(); } if ((padd != -1) &&
					 * (billingRate.getPeg() != null) && (billingRate.getMiles()
					 * != null)) { int sign = 1; if ((padd -
					 * billingRate.getPeg()) < 0) { sign = -1; } double term =
					 * Math.floor(sign (padd - billingRate.getPeg()) / 0.05);
					 * fuelSurcharge = sign * term billingRate.getMiles() *
					 * 0.01; } if ((padd != -1) && (billingRate.getPeg() !=
					 * null) && (billingRate.getMiles() == null)) { double
					 * percentage = Math.floor((padd - billingRate .getPeg()) /
					 * 0.08); if (rateType == 2) { fuelSurcharge = percentage
					 * billingRate.getValue() * 0.01; } else if (rateType == 3)
					 * { // per tonne fuelSurcharge =
					 * billing.getEffectiveTonsWt() billingRate.getValue() *
					 * percentage 0.01; } } }
					 */
					/*
					 * // Weekly fuel surcharge calculation int wfsr =
					 * billingRate.getFuelsurchargeweeklyRate(); if (wfsr == 1)
					 * { StringBuffer weeklyRateQuery = new StringBuffer(
					 * "select obj from FuelSurchargeWeeklyRate obj where obj.transferStations="
					 * + ticket.getOrigin().getId() +
					 * " and obj.landfillStations=" +
					 * ticket.getDestination().getId() + " ");
					 * FuelSurchargeWeeklyRate fuelsurchargeweeklyrate = null;
					 * Date effectiveDatePadd = null; if
					 * (billingRate.getWeeklyRateUsing() != null) { if
					 * (billingRate.getWeeklyRateUsing() == 1) {
					 * effectiveDatePadd = ticket.getLoadDate(); } if
					 * (billingRate.getWeeklyRateUsing() == 2) {
					 * effectiveDatePadd = ticket.getUnloadDate(); } if
					 * (billingRate.getWeeklyRateUsing() == 3) {
					 * effectiveDatePadd = ticket.getBillBatch(); }
					 * weeklyRateQuery.append(" and obj.fromDate <= '" +
					 * mysqldf.format(effectiveDatePadd) +
					 * "' and obj.toDate >= '" +
					 * mysqldf.format(effectiveDatePadd) + "'"); }
					 * List<FuelSurchargeWeeklyRate> listfswr = genericDAO
					 * .executeSimpleQuery(weeklyRateQuery.toString()); if
					 * (listfswr != null && listfswr.size() > 0) {
					 * fuelsurchargeweeklyrate = listfswr.get(0); } if
					 * (fuelsurchargeweeklyrate != null) { int fswrateType =
					 * fuelsurchargeweeklyrate .getRateType(); if (fswrateType
					 * == 3) { fuelSurcharge = billing.getEffectiveTonsWt()
					 * fuelsurchargeweeklyrate .getFuelSurchargeRate(); } if
					 * (fswrateType == 2) { fuelSurcharge =
					 * fuelsurchargeweeklyrate .getFuelSurchargeRate(); } if
					 * (fswrateType == 1) { fuelSurcharge =
					 * (billing.getEffectiveNetWt() / 8.34)
					 * fuelsurchargeweeklyrate .getFuelSurchargeRate(); } } } }
					 */// end of Weekly fuel surcharge calculation
					Double otherCharges = billingRate.getOtherCharges();
					otherCharges = MathUtil.roundUp(otherCharges, 2);
					billing.setOtherCharges(otherCharges);
					sumOtherCharges += otherCharges;

					Double fuelSurcharge = billingRate.getFuelSurchargeAmount();
					fuelSurcharge = MathUtil.roundUp(fuelSurcharge, 2);
					billing.setFuelSurcharge(fuelSurcharge);
					sumFuelSurcharge += fuelSurcharge;

					sumOtherCharges = MathUtil.roundUp(sumOtherCharges, 2);
					sumFuelSurcharge = MathUtil.roundUp(sumFuelSurcharge, 2);
					/*
					 * if (billingRate.getTonnagePremium() != null) { Double
					 * premiumTonne = billingRate.getTonnagePremium()
					 * .getPremiumTonne(); Double rate =
					 * billingRate.getTonnagePremium().getRate(); if
					 * (billing.getEffectiveTonsWt() > premiumTonne) {
					 * billing.setTonnagePremium((billing.getEffectiveTonsWt() -
					 * premiumTonne) rate); } } else {
					 * billing.setTonnagePremium(0.0); }
					 * sumTonnage+=billing.getTonnagePremium();
					 * billing.setTonnagePremium
					 * (MathUtil.roundUp(billing.getTonnagePremium(),2)); double
					 * demmurageCharge = (billingRate.getDemmurageCharge() !=
					 * null) ? billingRate .getDemmurageCharge() : 0.0;
					 * sumDemmurage+=billing.getDemurrageCharge();
					 * billing.setDemurrageCharge
					 * (MathUtil.roundUp(demmurageCharge,2));
					 */
					// }
					//
				} else {
					if (!expiredRate)
						str.add("<u>Rates Are Expired or not Available</u></br>");
					expiredRate = true;
					errorCount++;
					billing.setRate(0.0);
					billing.setFuelSurcharge(0.0);
					sumOriginTon += billing.getOriginTonsWt();
					sumDestinationTon += billing.getDestinationTonsWt();
					Location originName = genericDAO.getById(Location.class,
							ticket.getOrigin().getId());
					Location DestinationName = genericDAO.getById(
							Location.class, ticket.getDestination().getId());
					boolean cont = str.contains((originName.getName() + " - "
							+ DestinationName.getName() + "</br>"));
					String string = (originName.getName() + " - "
							+ DestinationName.getName() + "</br>");

					if (!cont)
						str.add(string);
					wrapper.setList(str);
				}
				if (billingRate != null) {
					amount = billing.getAmount() + billing.getFuelSurcharge()
							+ billing.getOtherCharges();
					billing.setTotAmt(amount);
				}
				billing.setSubcontractorId(subContractor);
				summarys.add(billing);
			} catch (Exception ex) {
				ex.printStackTrace();
			}

		}
		/*
		 * Long subcontractorId =
		 * Long.valueOf(Long.parseLong(subcontractorName));
		 * 
		 * SubContractor subContractor =
		 * (SubContractor)genericDAO.getById(SubContractor.class,
		 * subcontractorId);
		 */
		wrapper.setSubcontratorId(subContractor);
		wrapper.setSubcontractorname(subContractor.getName());
		wrapper.setAddress1(subContractor.getAddress());
		wrapper.setAddress2(subContractor.getAddress2());
		wrapper.setCity(subContractor.getCity());
		wrapper.setZipcode(subContractor.getZipcode());
		wrapper.setPhone(subContractor.getPhone());
		wrapper.setFax(subContractor.getFax());
		wrapper.setState(subContractor.getState().getName());
		if (companylocation != null)
			wrapper.setCompanyLocationId(companylocation);
		// wrapper.setCompany(companyName);

		sumBillableTon = MathUtil.roundUp(sumBillableTon, 2);
		sumOriginTon = MathUtil.roundUp(sumOriginTon, 2);
		sumDestinationTon = MathUtil.roundUp(sumDestinationTon, 2);
		sumNet = MathUtil.roundUp(sumNet, 2);
		sumAmount = MathUtil.roundUp(sumAmount, 2);

		
		System.out.println("********* the string before "+misceCharges);
		Double miscelCharges = 0.0;
		
		
		if (!misceCharges.isEmpty()) {
			String[] miscellCharges=misceCharges.split(",");
			for(int i=0;i<miscellCharges.length;i++){				
				System.out.println("**** the sepearted value is "+Double.parseDouble(miscellCharges[i]));
					 miscelCharges =miscelCharges+Double.parseDouble(miscellCharges[i]);
				
			}
		}
		System.out.println("******* the vlue is "+miscelCharges);	

		sumTotal = sumAmount + sumFuelSurcharge + sumOtherCharges;
		wrapper.setSumBillableTon(sumBillableTon);
		wrapper.setSumOriginTon(sumOriginTon);
		wrapper.setSumDestinationTon(sumDestinationTon);
		wrapper.setSumNet(sumNet);
		wrapper.setSumAmount(sumAmount);
		wrapper.setSumFuelSurcharge(sumFuelSurcharge);
		wrapper.setSumTotal(sumTotal);
		wrapper.setSumOtherCharges(sumOtherCharges);
		if (!misceCharges.isEmpty()) {
			if (misceCharges.charAt(0) == '-') {
				grandTotal = sumTotal - miscelCharges;
			}
		} else {
			grandTotal = sumTotal + miscelCharges;
		}
		grandTotal = sumTotal + miscelCharges;
		grandTotal = MathUtil.roundUp(grandTotal, 2);
		wrapper.setGrandTotal(grandTotal);
		if (!(misceCharges == "")) {
			// misceCharges="$"+misceCharges;
			wrapper.setMiscelleneousCharges(misceCharges);
			wrapper.setMiscelleneousNote(misceNote);
		}
		
		wrapper.setTotalRowCount(tickets.size());
		System.out.println("******** the main row count is "+tickets.size());
		
		return wrapper;
	}

	@Override
	public FuelLogReportWrapper generateFuellogData(
			SearchCriteria searchCriteria, FuelLogReportInput input) {
		Map<String, String> params = new HashMap<String, String>();
		// String fuelVendor = (String)
		// searchCriteria.getSearchMap().get("fuelVendor");
		String fuelVendor = input.getFuelVendor();
		String fromInvoiceDate1 = (String) searchCriteria.getSearchMap().get(
				"fromInvoiceDate");
		String invoiceDateTo1 = (String) searchCriteria.getSearchMap().get(
				"invoiceDateTo");
		String transactionDateFrom1 = (String) searchCriteria.getSearchMap()
				.get("transactionDateFrom");
		String transactionDateTo1 = (String) searchCriteria.getSearchMap().get(
				"transactionDateTo");

		String fromInvoiceDate = ReportDateUtil.getFromDate(input
				.getFromInvoiceDate());
		String invoiceDateTo = ReportDateUtil.getToDate(input
				.getInvoiceDateTo());
		String transactionDateFrom = ReportDateUtil.getFromDate(input
				.getTransactionDateFrom());
		String transactionDateTo = ReportDateUtil.getToDate(input
				.getTransactionDateTo());

		String cardno = (String) searchCriteria.getSearchMap().get("cardno");

		/*
		 * String fromInvoiceNo = (String)
		 * searchCriteria.getSearchMap().get("fromInvoiceNo"); String
		 * InvoiceNoTo = (String)
		 * searchCriteria.getSearchMap().get("InvoiceNoTo");
		 */
		String fueltype = (String) searchCriteria.getSearchMap()
				.get("fueltype");
		String fueltype1 = input.getFueltype();
		// System.out.println("\nfueltype===>"+fueltype+"\n");
		// System.out.println("\nfueltype1===>"+fueltype1+"\n");

		String terminal = input.getTerminal();
		String driver = input.getDriver();
		String truck = input.getUnit();
		String state = input.getState();

		String company = input.getCompany();
		params.put("company", company);

		String gallansfrom = input.getGallonsFrom();
		String gallansto = input.getGallonsTo();

		String unitpricefrom = input.getUnitPriceFrom();
		String unitpriceto = input.getUnitPriceTo();

		String feesfrom = input.getFeesFrom();
		String feesto = input.getFeesTo();

		String discountfrom = input.getDiscountFrom();
		String discountto = input.getDiscountTo();

		String amountfrom = input.getAmountFrom();
		String amountto = input.getAmountTo();

		String fromInvoiceNo = input.getFromInvoiceNo();
		String InvoiceNoTo = input.getInvoiceNoTo();
		// String fueltype = input.getFueltype();

		StringBuffer query = new StringBuffer("");
		StringBuffer countQuery = new StringBuffer("");
		query.append("select obj from FuelLog obj where 1=1 ");
		countQuery.append("select count(obj) from FuelLog obj where 1=1");

		if (!StringUtils.isEmpty(fuelVendor)) {
			/* query.append("and  obj.fuelvendor = '" + fuelVendor + "'"); */

			query.append("and  obj.fuelvendor in (" + fuelVendor + ")");
			countQuery.append("and  obj.fuelvendor in (" + fuelVendor + ")");
		}

		if (!StringUtils.isEmpty(company)) {
			query.append("and  obj.company in (" + company + ")");
			countQuery.append("and  obj.company in (" + company + ")");
		}
		if (!StringUtils.isEmpty(terminal)) {
			query.append("and  obj.terminal in (" + terminal + ")");
			countQuery.append("and  obj.terminal in (" + terminal + ")");
		}

		if (!StringUtils.isEmpty(fromInvoiceDate1)
				&& !StringUtils.isEmpty(invoiceDateTo1)) {
			if (!StringUtils.isEmpty(fromInvoiceDate)
					&& !StringUtils.isEmpty(invoiceDateTo)) {
				query.append("and  obj.invoiceDate between '" + fromInvoiceDate
						+ "' and '" + invoiceDateTo + "'");
				countQuery.append("and  obj.invoiceDate between '" + fromInvoiceDate
						+ "' and '" + invoiceDateTo + "'");
				// query.append("and  obj.invoiceDate between '" +
				// fromInvoiceDate + "' and '" + invoiceDateTo +
				// "'or obj.invoiceDate IS null ");
			}
		}
		/*
		 * else{ query.append("and  obj.invoiceDate between '" + fromInvoiceDate
		 * + "' and '" + invoiceDateTo + "'or obj.invoiceDate IS null "); }
		 */

		if (!StringUtils.isEmpty(transactionDateFrom1)
				&& !StringUtils.isEmpty(transactionDateTo1)) {
			if (!StringUtils.isEmpty(transactionDateFrom)
					&& !StringUtils.isEmpty(transactionDateTo)) {
				query.append("and  obj.transactiondate between '"
						+ transactionDateFrom + "' and '" + transactionDateTo
						+ "'");
				countQuery.append("and  obj.transactiondate between '"
						+ transactionDateFrom + "' and '" + transactionDateTo
						+ "'");
			}
		}
		/*
		 * else{ query.append("and  obj.transactiondate between '" +
		 * transactionDateFrom + "' and '" + transactionDateTo +
		 * "' or obj.transactiondate IS null "); }
		 */

		if (!StringUtils.isEmpty(cardno)) {
			/* query.append("and  obj.fuelCardNumber = '" + cardno + "'"); */
			query.append("and  obj.fuelcard.fuelcardNum like '%" + cardno
					+ "%'");
			countQuery.append("and  obj.fuelcard.fuelcardNum like '%" + cardno+ "%'");
		}

		if (!StringUtils.isEmpty(driver)) {
			// query.append("and  obj.driverFname in ("+ driver + ")");
			query.append("and  obj.driversid in (" + driver + ")");
			countQuery.append("and  obj.driversid in (" + driver + ")");
		}
		if (!StringUtils.isEmpty(truck)) {	
			String truckIds="";			
				   
				   String vehiclequery="select obj from Vehicle obj where obj.type=1" 
				   		+" and obj.unit in ("
						+truck
						+")";
					
					System.out.println("******** the truck query is "+vehiclequery);
					
					List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
					
					if(vehicleLists!=null && vehicleLists.size()>0){						
						for(Vehicle vehicleObj : vehicleLists) {						
							if(StringUtils.isEmpty(truckIds)){	
							truckIds=String.valueOf(vehicleObj.getId());
							}
							else{
								truckIds=truckIds+","+String.valueOf(vehicleObj.getId());
							}
						}
					}			
		
			
			
			query.append("and  obj.unit in (" + truckIds + ")");
			countQuery.append("and  obj.unit in (" + truckIds + ")");
		}
		if (!StringUtils.isEmpty(state)) {
			query.append("and  obj.state in (" + state + ")");
			countQuery.append("and  obj.state in (" + state + ")");
		}

		if (!StringUtils.isEmpty(gallansfrom)) {
			query.append(" and  obj.gallons>=").append(gallansfrom);
			countQuery.append(" and  obj.gallons>=").append(gallansfrom);
		}
		if (!StringUtils.isEmpty(gallansto)) {
			query.append(" and  obj.gallons<='").append(gallansto + "'");
			countQuery.append(" and  obj.gallons<='").append(gallansto + "'");
		}

		if (!StringUtils.isEmpty(unitpricefrom)) {
			query.append(" and  obj.unitprice>=").append(unitpricefrom);
			countQuery.append(" and  obj.unitprice>=").append(unitpricefrom);
		}
		if (!StringUtils.isEmpty(unitpriceto)) {
			query.append(" and  obj.unitprice<='").append(unitpriceto + "'");
			countQuery.append(" and  obj.unitprice<='").append(unitpriceto + "'");
		}

		if (!StringUtils.isEmpty(feesfrom)) {
			query.append(" and  obj.fees>=").append(feesfrom);
			countQuery.append(" and  obj.fees>=").append(feesfrom);
		}
		if (!StringUtils.isEmpty(feesto)) {
			query.append(" and  obj.fees<='").append(feesto + "'");
			countQuery.append(" and  obj.fees<='").append(feesto + "'");
		}

		if (!StringUtils.isEmpty(discountfrom)) {
			query.append(" and  obj.discounts>=").append(discountfrom);
			countQuery.append(" and  obj.discounts>=").append(discountfrom);
		}
		if (!StringUtils.isEmpty(discountto)) {
			query.append(" and  obj.discounts<='").append(discountto + "'");
			countQuery.append(" and  obj.discounts<='").append(discountto + "'");
		}

		if (!StringUtils.isEmpty(amountfrom)) {
			query.append(" and  obj.amount>=").append(amountfrom);
			countQuery.append(" and  obj.amount>='").append(amountfrom+"'");
		}
		if (!StringUtils.isEmpty(amountto)) {
			query.append(" and  obj.amount<='").append(amountto + "'");
			countQuery.append(" and  obj.amount<='").append(amountto + "'");
		}

		if (!StringUtils.isEmpty(fromInvoiceNo)) {
			query.append(" and  obj.invoiceNo>='").append(fromInvoiceNo + "'");
			countQuery.append(" and  obj.invoiceNo>='").append(fromInvoiceNo + "'");
		}
		if (!StringUtils.isEmpty(InvoiceNoTo)) {
			query.append(" and  obj.invoiceNo<='").append(InvoiceNoTo + "'");
			countQuery.append(" and  obj.invoiceNo<='").append(InvoiceNoTo + "'");
		}
		if (!StringUtils.isEmpty(fueltype1)) {
			StringBuffer fuelt = new StringBuffer("");
			StringTokenizer st2 = new StringTokenizer(fueltype1, ",");

			int no = st2.countTokens();
			int less = 0;
			while (st2.hasMoreTokens()) {
				// System.out.println(st2.nextToken());
				String str = st2.nextToken();
				if (less != no - 1) {
					fuelt.append("'" + str + "',");
					less++;
				} else {
					fuelt.append("'" + str + "'");
				}
			}
			query.append("and  obj.fueltype in (" + fuelt + ")");
			countQuery.append("and  obj.fueltype in (" + fuelt + ")");
			// System.out.println("\nfuelt===>"+fuelt+"\n");
		}

		System.out.println("\nquery=fuelog=>" + query + "\n");
		Long recordCount = (Long) genericDAO.getEntityManager().createQuery(countQuery.toString()).getSingleResult();
		searchCriteria.setRecordCount(recordCount.intValue());
		System.out.println("\nrecordCount=>" + recordCount.intValue() + "\n");

		List<FuelLog> fs = (List<FuelLog>) genericDAO
		.getEntityManager()
		.createQuery(query.toString())
		.setMaxResults(searchCriteria.getPageSize())
		.setFirstResult(
				searchCriteria.getPage() * searchCriteria.getPageSize())
		.getResultList();
			
		List<FuelLog> summarys = new ArrayList<FuelLog>();
		FuelLogReportWrapper wrapper = new FuelLogReportWrapper();
		wrapper.setFuellog(summarys);

		long totalColumn = 0;
		double totalGallons = 0.0;
		double totalFees = 0.0;
		double totaldiscounts = 0.0;
		double totalAmounts = 0.0;
		double totalGrossCost=0.0;

		Map<String, List<FuelLog>> fuellogMap = new HashMap<String, List<FuelLog>>();

		for (FuelLog fuelog : fs) {
			totalColumn = totalColumn + 1;
			if (fuelog != null) {
				FuelLog output = new FuelLog();
				output.setFuelVenders((fuelog.getFuelvendor() != null) ? fuelog
						.getFuelvendor().getName() : "");
				output.setCompanies((fuelog.getCompany() != null) ? fuelog
						.getCompany().getName() : "");
				output.setTerminals((fuelog.getTerminal() != null) ? fuelog
						.getTerminal().getName() : "");
				// output.setInvoicedDate(sdf.format(fuelog.getInvoiceDate()));
				output.setInvoicedDate((fuelog.getInvoiceDate() != null) ? sdf
						.format(fuelog.getInvoiceDate()) : "");
				output.setInvoiceNo((fuelog.getInvoiceNo() != null) ? fuelog
						.getInvoiceNo() : "");
				output.setUnits((fuelog.getUnit() != null) ? fuelog.getUnit()
						.getUnit().toString() : "");

				
				String fuelcardNum=null;
                if(fuelog.getFuelcard()!=null){                                        
                        String fuelcardnumber=fuelog.getFuelcard().getFuelcardNum();                                        
                        
                        if(fuelcardnumber.length()>8 && fuelcardnumber.length()<=12){
                                String[] fuelcardnum = new String[10];
                                        fuelcardnum[0]=fuelcardnumber.substring(0,4);
                                        fuelcardnum[1]=fuelcardnumber.substring(4,8);
                                        fuelcardnum[2]=fuelcardnumber.substring(8,fuelcardnumber.length());
                                        fuelcardNum=fuelcardnum[0]+"-"+fuelcardnum[1]+"-"+fuelcardnum[2];                                                
                        }
                        
                        else if(fuelcardnumber.length()>12){
                                String[] fuelcardnum = new String[10];
                                        fuelcardnum[0]=fuelcardnumber.substring(0,4);
                                        fuelcardnum[1]=fuelcardnumber.substring(4,8);
                                        fuelcardnum[2]=fuelcardnumber.substring(8,12);
                                        fuelcardnum[3]=fuelcardnumber.substring(12,fuelcardnumber.length());
                                        fuelcardNum=fuelcardnum[0]+"-"+fuelcardnum[1]+"-"+fuelcardnum[2]+"-"+fuelcardnum[3];                                                
                        }
                        else
                        {
                                fuelcardNum=fuelcardnumber;
                        }  
                }				
				
				// output.setDrivers((fuelog.getDriverFname()!=null)?fuelog.getDriverFname().getFullName():"");
				output.setDrivers((fuelog.getDriversid() != null) ? fuelog
						.getDriversid().getFullName() : "");
				// billing.setDestination((ticket.getDestination()!=null)?ticket.getDestination().getName():"");
				/*
				 * output.setFuelCardNumbers(fuelog.getFuelCardNumber().toString(
				 * ));
				 */
				output.setFuelCardNumbers((fuelog.getFuelcard() != null) ? fuelcardNum : "");
				/*
				 * output.setFuelCardNumbers((fuelog.getFuelCardNumber()!=null)?
				 * fuelog.getFuelCardNumber():"");
				 */
				/* output.setFuelCardNumber((fuelog.getFuelCardNumber())); */// added
																				// today

				// output.setFueltype(fuelog.getFueltype());

				output.setFueltype((fuelog.getFueltype() != null) ? fuelog
						.getFueltype() : "");

				output.setCity((fuelog.getCity() != null) ? fuelog.getCity()
						: "");
				output.setStates((fuelog.getState() != null) ? fuelog
						.getState().getName() : "");
				output.setTransactiontime((fuelog.getTransactiontime() != null) ? fuelog
						.getTransactiontime() : "");
				output.setTransactionsDate((fuelog.getTransactiondate() != null) ? sdf
						.format(fuelog.getTransactiondate()) : "");
				output.setGallons((fuelog.getGallons() != null) ? fuelog
						.getGallons() : 0.0);
				// output.setGallons(fuelog.getGallons());
				output.setUnitprice((fuelog.getUnitprice() != null) ? fuelog
						.getUnitprice() : 0.0);
				
				output.setGrosscost((fuelog.getGrosscost() !=null) ? fuelog.getGrosscost(): 0.0);
				output.setFees((fuelog.getFees() != null) ? fuelog.getFees()
						: 0.0);
				output.setDiscounts((fuelog.getDiscounts() != null) ? fuelog
						.getDiscounts() : 0.0);
				output.setAmount((fuelog.getAmount() != null) ? fuelog
						.getAmount() : 0.0);

				if (fuelog.getGallons() != null)
					totalGallons += fuelog.getGallons();
				if(fuelog.getGrosscost() != null)
					totalGrossCost+=fuelog.getGrosscost();
				if (fuelog.getFees() != null)
					totalFees += fuelog.getFees();
				if (fuelog.getDiscounts() != null)
					totaldiscounts += fuelog.getDiscounts();
				if (fuelog.getAmount() != null)
					totalAmounts += fuelog.getAmount();

				summarys.add(output);

			}

		}
        
		totalAmounts = MathUtil.roundUp(totalAmounts, 2);
		totaldiscounts = MathUtil.roundUp(totaldiscounts, 2);
		totalFees = MathUtil.roundUp(totalFees, 2);
		totalGallons = MathUtil.roundUp(totalGallons, 3);
		totalGrossCost=MathUtil.roundUp(totalGrossCost, 2);
		wrapper.setTotalAmounts(totalAmounts);
		wrapper.setTotaldiscounts(totaldiscounts);
		wrapper.setTotalFees(totalFees);
		wrapper.setTotalGallons(totalGallons);
		wrapper.setTotalGrossCost(totalGrossCost);
		//wrapper.setTotalColumn(totalColumn);
		wrapper.setTotalColumn(fs.size());

		return wrapper;
	}

	@Override
	public EztollReportWrapper generateEztollData(
			SearchCriteria searchCriteria, EztollReportInput input) {

		Map<String, String> params = new HashMap<String, String>();

		String transferDateFrom = ReportDateUtil.getFromDate(input
				.getTransferDateFrom());
		String transferDateTo = ReportDateUtil.getToDate(input
				.getTransferDateTo());

		String tollcompany = input.getToolcompany();

		params.put("tollcompany", tollcompany);

		String company = input.getCompany();

		params.put("company", company);

		String terminal = input.getTerminal();
		String tolltagnumber = input.getTollTagNumber();
		String plate = input.getPlateNumber();
		String unit = input.getUnit();

		String transferTimeFrom1 = (String) searchCriteria.getSearchMap().get(
				"transferTimeFrom");
		String transfertimeTo1 = (String) searchCriteria.getSearchMap().get(
				"transferTimeTo");

		String agency = input.getAgency();

		String amountfrom = input.getAmountsfrom();
		String amountto = input.getAmountsto();
         
		String driver=input.getDriver();
		 
		StringBuffer query = new StringBuffer("");
		StringBuffer countQuery = new StringBuffer("");
		query.append("select obj from EzToll obj where 1=1");
		countQuery.append("select count(obj) from EzToll obj where 1=1");
		if (!StringUtils.isEmpty(tollcompany)) {
			query.append("and  obj.toolcompany in (" + tollcompany + ")");
			countQuery.append("and  obj.toolcompany in (" + tollcompany + ")");
		}
		if (!StringUtils.isEmpty(company)) {
			query.append("and  obj.company in (" + company + ")");
			countQuery.append("and  obj.company in (" + company + ")");
		}
		if (!StringUtils.isEmpty(terminal)) {
			query.append("and  obj.terminal in (" + terminal + ")");
			countQuery.append("and  obj.terminal in (" + terminal + ")");
		}

		if (!StringUtils.isEmpty(tolltagnumber)) {
			query.append("and  obj.tollTagNumber in (" + tolltagnumber + ")");
			countQuery.append("and  obj.tollTagNumber in (" + tolltagnumber + ")");
		}

		if (!StringUtils.isEmpty(unit)) {
			
			String truckIds="";				
				   
				   String vehiclequery="select obj from Vehicle obj where obj.type=1"
				   		+" and obj.unit in ("
						+unit
						+")";
					
					System.out.println("******** the truck query is "+vehiclequery);
					
					List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
					
					if(vehicleLists!=null && vehicleLists.size()>0){						
						for(Vehicle vehicleObj : vehicleLists) {						
							if(StringUtils.isEmpty(truckIds)){	
							truckIds=String.valueOf(vehicleObj.getId());
							}
							else{
								truckIds=truckIds+","+String.valueOf(vehicleObj.getId());
							}
						}
					}			
						
			
			query.append("and  obj.plateNumber in (" + truckIds + ")");
			countQuery.append("and  obj.plateNumber in (" + truckIds + ")");
			
			/*query.append("and  (obj.tollTagNumber in (select obj.id from VehicleTollTag obj where obj.vehicle in ("
					+ unit + ")) or obj.plateNumber in (" + unit + "))");
			countQuery.append("and  (obj.tollTagNumber in (select obj.id from VehicleTollTag obj where obj.vehicle in ("
					+ unit + ")) or obj.plateNumber in (" + unit + "))");*/
		}

		if (!StringUtils.isEmpty(plate)) {
			query.append("and  obj.plateNumber in (" + plate + ")");
			countQuery.append("and  obj.plateNumber in (" + plate + ")");
		}

		if (!StringUtils.isEmpty(transferDateFrom)
				&& !StringUtils.isEmpty(transferDateTo)) {
			query.append("and  obj.transactiondate>='"
					+ transferDateFrom +" 00:00:00' and obj.transactiondate<='" +transferDateTo+" 24:60:60'");
			countQuery.append("and  obj.transactiondate>='"
					+ transferDateFrom +" 00:00:00' and obj.transactiondate<='" +transferDateTo+" 24:60:60'");
		}

		if (!StringUtils.isEmpty(transferTimeFrom1)
				&& !StringUtils.isEmpty(transfertimeTo1)) {
			query.append("and  obj.transactiontime>='"
					+ transferTimeFrom1 + "' and obj.transactiontime<='" + transfertimeTo1 +"'");
			countQuery.append("and  obj.transactiontime>='"
					+ transferTimeFrom1 + "' and obj.transactiontime<='" + transfertimeTo1 +"'");
		}

		if (!StringUtils.isEmpty(agency)) {
			/* query.append("and  obj.agency = '" + agency + "'"); */
			query.append("and  obj.agency like '%" + agency + "%'");
			countQuery.append("and  obj.agency like '%" + agency + "%'");
		}

		if (!StringUtils.isEmpty(amountfrom)) {
			query.append(" and  obj.amount>=").append(amountfrom);
			countQuery.append(" and  obj.amount>=").append(amountfrom);
		}
		if (!StringUtils.isEmpty(amountto)) {
			query.append(" and  obj.amount<='").append(amountto + "'");
			countQuery.append(" and  obj.amount<='").append(amountto + "'");
		}
		
		if (!StringUtils.isEmpty(driver)) {
			query.append(" and  obj.driver in ("+driver+")");
			countQuery.append(" and  obj.driver in ("+driver+")");
		}

		System.out.println("\nquery.toString()===>" + query.toString() + "\n");
		
		Long recordCount = (Long) genericDAO.getEntityManager().createQuery(countQuery.toString()).getSingleResult();
		searchCriteria.setRecordCount(recordCount.intValue());
		System.out.println("\nrecordCount=>" + recordCount.intValue() + "\n");
		
		
		List<EzToll> fs = (List<EzToll>) genericDAO
		.getEntityManager()
		.createQuery(query.toString())
		.setMaxResults(searchCriteria.getPageSize())
		.setFirstResult(
				searchCriteria.getPage() * searchCriteria.getPageSize())
		.getResultList();

		List<EzToll> summarys = new ArrayList<EzToll>();
		EztollReportWrapper wrapper = new EztollReportWrapper();
		wrapper.setEztolls(summarys);

		long totalColumn = 0;
		double totalAmounts = 0.0;

		// Map<String, List<FuelLog>> fuellogMap = new HashMap<String,
		// List<FuelLog>>();

		for (EzToll eztol : fs) {
			totalColumn = totalColumn + 1;
			if (eztol != null) {
				EzToll output = new EzToll();

				output.setTollcompanies(eztol.getToolcompany().getName());
				output.setCompanies(eztol.getCompany().getName());
				output.setTerminals(eztol.getTerminal().getName());
				if (eztol.getPlateNumber() != null) {
					output.setPlates((eztol.getPlateNumber().getPlate())
							.toString());
					output.setUnits((eztol.getPlateNumber().getUnit())
							.toString());
				} else
					output.setPlates("");

				if (eztol.getTollTagNumber() != null) {
					output.setTollTagNumbers((eztol.getTollTagNumber()
							.getTollTagNumber()));
					if (output.getUnits() == null)
						output.setUnits((eztol.getTollTagNumber().getVehicle()
								.getUnit()).toString());
				} else
					output.setTollTagNumbers("");
				// output.setUnits((eztol.getUnit().getUnit()).toString());
				// output.setTransfersDate(sdf.format(eztol.getTransactiondate()));
				output.setTransfersDate((eztol.getTransactiondate() != null) ? sdf
						.format(eztol.getTransactiondate()) : "");
				output.setTransfersDate(sdf.format(eztol.getTransactiondate()));
				output.setTransactiontime((eztol.getTransactiontime() != null) ? eztol
						.getTransactiontime() : "");
				output.setAgency(eztol.getAgency());
				output.setAmount(eztol.getAmount());
				output.setDrivername(eztol.getDriver()!=null?eztol.getDriver().getFullName():"");
				

				if (eztol.getAmount() != null)
					totalAmounts += eztol.getAmount();

				summarys.add(output);

			}

		}

		totalAmounts = MathUtil.roundUp(totalAmounts, 2);
		wrapper.setTotalAmounts(totalAmounts);

		wrapper.setTotalColumn(totalColumn);

		
		System.out.println("******* nquery.toString()===>" + query.toString() + "\n");
		
		
		return wrapper;
	}

	
	@Override
	public List<Summary> generateSummaryNew(SearchCriteria criteria,
			BillingHistoryInput input) {

		String fromDateInvoiceStr = ReportDateUtil.getFromDate(input
				.getFromInvoiceDate());
		String toDateInvoiceStr = ReportDateUtil.getToDate(input
				.getInvoiceDateTo());
		String invoiceNumberFrom = input.getInvoiceNumberFrom();
		String invoiceNumberTo = input.getInvoiceNumberTo();

		String fuelSurchargeFrom1 = input.getFuelSurchargeFrom();
		String fuelSurchargeTo1 = input.getFuelSurchargeTo();

		String tonnagePremiumFrom = input.getTonnagePremiumFrom();
		String tonnagePremiumTo = input.getTonnagePremiumTo();

		String demurrageChargeFrom = input.getDemurrageChargeFrom();
		String demurrageChargeTo = input.getDemurrageChargeTo();

		String amountFrom = input.getAmountFrom();
		String amountTo = input.getAmountTo();

		String totAmtFrom = input.getTotAmtFrom();
		String totAmtTo = input.getTotAmtTo();

		String totalAmtTo = input.getTotalAmtTo();
		String totalAmtFrom = input.getTotalAmtFrom();

		String rateFrom = input.getRateFrom();
		String rateTo = input.getRateTo();

		boolean useInvoice = false;
		StringBuffer ticketIds = new StringBuffer("-1,");
		if ( (!StringUtils.isEmpty(invoiceNumberFrom))
				|| (!StringUtils.isEmpty(invoiceNumberTo))
				|| (!StringUtils.isEmpty(input.getFuelSurchargeFrom()))
				|| (!StringUtils.isEmpty(input.getFuelSurchargeTo()))
				|| (!StringUtils.isEmpty(tonnagePremiumFrom))
				|| (!StringUtils.isEmpty(tonnagePremiumTo))
				|| (!StringUtils.isEmpty(demurrageChargeFrom))
				|| (!StringUtils.isEmpty(demurrageChargeTo))
				|| (!StringUtils.isEmpty(amountFrom))
				|| (!StringUtils.isEmpty(amountTo))
				|| (!StringUtils.isEmpty(totAmtFrom))
				|| (!StringUtils.isEmpty(totAmtFrom))
				|| (!StringUtils.isEmpty(totalAmtTo))
				|| (!StringUtils.isEmpty(totalAmtFrom))//
				|| (!StringUtils.isEmpty(input.getRateFrom()))
				|| (!StringUtils.isEmpty(input.getRateTo()))) {
			StringBuffer query2 = new StringBuffer(
					"select bill.ticket from Invoice inv, Billing bill where 1=1 and bill.invoiceNo = inv.invoiceNumber and bill.origin=inv.transferStation.name and bill.destination=inv.landfill.name");

			if (!StringUtils.isEmpty(input.getRateFrom())) {

				query2.append(" and bill.rate>=").append(rateFrom);
			}
			if (!StringUtils.isEmpty(input.getRateTo())) {

				query2.append(" and bill.rate<=").append(rateTo);
			}

			if (!StringUtils.isEmpty(fromDateInvoiceStr)) {
				query2.append(" and  inv.invoiceDate>='").append(
						fromDateInvoiceStr + "'");
			}
			if (!StringUtils.isEmpty(toDateInvoiceStr)) {
				query2.append(" and  inv.invoiceDate<='").append(
						toDateInvoiceStr + "'");
			}
			if (!StringUtils.isEmpty(invoiceNumberFrom)) {
				query2.append(" and  bill.invoiceNo>='").append(
						invoiceNumberFrom + "'");
			}
			if (!StringUtils.isEmpty(invoiceNumberTo)) {
				query2.append(" and  bill.invoiceNo<='").append(
						invoiceNumberTo + "'");
			}

			if (!StringUtils.isEmpty(fuelSurchargeFrom1)) {
				query2.append(" and bill.fuelSurcharge >= '").append(
						fuelSurchargeFrom1 + "'");
			}
			if (!StringUtils.isEmpty(fuelSurchargeTo1)) {
				query2.append(" and bill.fuelSurcharge <= '").append(
						fuelSurchargeTo1 + "'");
			}
			// /hereeee

			if (!StringUtils.isEmpty(tonnagePremiumFrom)) {
				query2.append(" and bill.tonnagePremium >= ").append(
						tonnagePremiumFrom);
			}
			if (!StringUtils.isEmpty(tonnagePremiumTo)) {
				query2.append(" and bill.tonnagePremium <= ").append(
						tonnagePremiumTo);
			}

			if (!StringUtils.isEmpty(demurrageChargeFrom)) {
				query2.append(" and bill.demurrageCharge >= ").append(
						demurrageChargeFrom);
			}
			if (!StringUtils.isEmpty(demurrageChargeTo)) {
				query2.append(" and bill.demurrageCharge <= ").append(
						demurrageChargeTo);
			}
			if (!StringUtils.isEmpty(amountFrom)) {
				query2.append(" and bill.amount >= ").append(amountFrom);
			}
			if (!StringUtils.isEmpty(amountTo)) {
				query2.append(" and bill.amount <= ").append(amountTo);
			}
			if (!StringUtils.isEmpty(totalAmtFrom)) {
				query2.append(" and bill.totAmt >= ").append(totalAmtFrom);
			}
			if (!StringUtils.isEmpty(totalAmtTo)) {
				query2.append(" and bill.totAmt <= ").append(totalAmtTo);
			}
			if (!StringUtils.isEmpty(totAmtFrom)) {
				query2.append(" and inv.sumTotal >= ").append(totAmtFrom);
			}
			if (!StringUtils.isEmpty(totAmtTo)) {
				query2.append(" and inv.sumTotal <= ").append(totAmtTo);
			}

			useInvoice = true;
			List<Ticket> tickets = genericDAO.executeSimpleQuery(query2
					.toString());
			System.out.println("\nquery2.toString()===>" + query2.toString()
					+ "\n");
			System.out.println("\ntickets.size===>" + tickets.size() + "\n");
			if (tickets != null && tickets.size() > 0) {
				for (Ticket tkt : tickets) {
					ticketIds.append(tkt.getId()).append(",");
				}
			}
			if (ticketIds.indexOf(",") != -1) {
				ticketIds.deleteCharAt(ticketIds.length() - 1);
			}
		}
		Map<String, String> params = new HashMap<String, String>();
		String batchDateFrom = ReportDateUtil.getFromDate(input
				.getBatchDateFrom());
		String batchDateTo = ReportDateUtil.getToDate(input.getBatchDateTo());
		String loadDateFrom = ReportDateUtil.getFromDate(input.getLoadedFrom());
		String loadDateTo = ReportDateUtil.getToDate(input.getLoadedTo());
		String unloadDateFrom = ReportDateUtil.getFromDate(input
				.getUnloadedFrom());
		String unloadDateTo = ReportDateUtil.getToDate(input.getUnloadedTo());

		String ticketStatus = input.getTicketStatus();
		String terminal = input.getTerminal();
		String createdBy = input.getCreatedBy();
		String origin = input.getOrigin();
		String destination = input.getDestination();
		String driver = input.getDriver();
		String truck = input.getTruck();
		String trailer = input.getTrailer();
		String subcontractor = input.getSubcontractor();

		String originTicketFrom = input.getOriginTicketFrom();
		String destinationTicketFrom = input.getDestinationTicketFrom();
		String originGrossWtFrom = input.getOriginGrossWtFrom();
		String originTareWtFrom = input.getOriginTareWtFrom();
		String originTonWtFrom = input.getOriginTonsWtFrom();
		String landfillGrossWtFrom = input.getLandfillGrossWtFrom();
		String landfillTareWtFrom = input.getLandfillTareWtFrom();
		String landfillTonWtFrom = input.getLandfillTonsWtFrom();

		String transferTimeInFrom = input.getTransferTimeInFrom();
		String transferTimeInTo = input.getTransferTimeInTo();
		String transferTimeOutFrom = input.getTransferTimeOutFrom();
		String transferTimeOutTo = input.getTransferTimeOutTo();

		String landfillTimeInFrom = input.getLandfillTimeInFrom();
		String landfillTimeInTo = input.getLandfillTimeInTo();
		String landfillTimeOutFrom = input.getLandfillTimeOutFrom();
		String landfillTimeOutTo = input.getLandfillTimeOutTo();

		String originTicketTo = input.getOriginTicketTo();
		String destinationTicketTo = input.getDestinationTicketTo();
		String originGrossWtTo = input.getOriginGrossWtTo();
		String originTareWtTo = input.getOriginTareWtTo();
		String originTonWtTo = input.getOriginTonsWtTo();
		String landfillGrossWtTo = input.getLandfillGrossWtTo();
		String landfillTareWtTo = input.getLandfillTareWtTo();
		String landfillTonWtTo = input.getLandfillTonsWtTo();

		/* String */rateFrom = input.getRateFrom();
		params.put("rateFrom", rateFrom);
		// String amountFrom=input.getAmountFrom();
		params.put("amountFrom", amountFrom);
		String fuelSurchargeFrom = input.getFuelSurchargeFrom();
		params.put("fuelSurchargeFrom", fuelSurchargeFrom);
		// String tonnagePremiumFrom=input.getTonnagePremiumFrom();
		params.put("tonnagePremiumFrom", tonnagePremiumFrom);
		// String demurrageChargeFrom=input.getDemurrageChargeFrom();
		params.put("demurrageChargeFrom", demurrageChargeFrom);
		// String totAmtFrom=input.getTotAmtFrom();
		params.put("totAmtFrom", totAmtFrom);

		/* String */rateTo = input.getRateTo();
		params.put("rateTo", rateTo);
		// String amountTo=input.getAmountTo();
		params.put("amountTo", amountTo);
		String fuelSurchargeTo = input.getFuelSurchargeTo();
		params.put("fuelSurchargeTo", fuelSurchargeTo);
		// String demurrageChargeTo=input.getDemurrageChargeTo();
		params.put("demurrageChargeTo", demurrageChargeTo);
		// String tonnagePremiumTo=input.getTonnagePremiumTo();
		params.put("tonnagePremiumTo", tonnagePremiumTo);
		// String totAmtTo=input.getTotAmtTo();
		params.put("totAmtTo", totAmtTo);
		String company = input.getCompany();
		params.put("company", company);
		params.put("customer", input.getCustomer());

		

		StringBuffer query = new StringBuffer("");
		StringBuffer countQuery = new StringBuffer("");
		/*
		 * query.append(
		 * "select obj from Ticket obj where obj.status=1 and obj.billBatch between '"
		 * +batchDateFrom+"' and '"+batchDateTo+"'");
		 */
		query.append("select obj from Ticket obj where (obj.status=1 OR obj.status=3) ");
		/*
		 * countQuery.append(
		 * "select count(obj) from Ticket obj where obj.status=1 and obj.billBatch between '"
		 * +batchDateFrom+"' and '"+batchDateTo+"'");
		 */
		countQuery
				.append("select count(obj) from Ticket obj where (obj.status=1 OR obj.status=3)");
		if (useInvoice) {
			query.append(" and obj.id in (" + ticketIds.toString() + ")");
			countQuery.append(" and obj.id in (" + ticketIds.toString() + ")");
		}

		if (!StringUtils.isEmpty(input.getCompany())) {

			query.append(" and obj.companyLocation.id in (").append(company)
					.append(")");
			countQuery.append(" and obj.companyLocation.id in (")
					.append(company).append(")");
		}

		if (!StringUtils.isEmpty(input.getCustomer())) {

			query.append(" and obj.customer.id in (")
					.append(input.getCustomer()).append(")");
			countQuery.append(" and obj.customer.id in (")
					.append(input.getCustomer()).append(")");
		}

		//
		if (!StringUtils.isEmpty(batchDateTo)) {
			query.append(" and  obj.billBatch<='").append(batchDateTo + "'");
			countQuery.append(" and  obj.billBatch<='").append(
					batchDateTo + "'");
		}
		if (!StringUtils.isEmpty(batchDateFrom)) {
			query.append(" and  obj.billBatch>='").append(batchDateFrom + "'");
			countQuery.append(" and  obj.billBatch>='").append(
					batchDateFrom + "'");
		}

		if (!StringUtils.isEmpty(ticketStatus)) {
			query.append(" and  obj.ticketStatus in (").append(ticketStatus)
					.append(")");
			countQuery.append(" and  obj.ticketStatus in (")
					.append(ticketStatus).append(")");
		}
		if (!StringUtils.isEmpty(fromDateInvoiceStr)) {
			query.append(" and  obj.invoiceDate>='").append(
					fromDateInvoiceStr + "'");
			countQuery.append(" and  obj.invoiceDate>='").append(
					fromDateInvoiceStr + "'");
		}
		if (!StringUtils.isEmpty(toDateInvoiceStr)) {
			query.append(" and  obj.invoiceDate<='").append(
					toDateInvoiceStr + "'");
			countQuery.append(" and  obj.invoiceDate<='").append(
					toDateInvoiceStr + "'");
		}
		
		if (!StringUtils.isEmpty(terminal)) {
			// System.out.println("\nTerminal===>"+terminal+"\n");
			query.append(" and  obj.terminal in (").append(terminal)
					.append(")");
			countQuery.append(" and  obj.terminal in (").append(terminal)
					.append(")");
		}
		if (!StringUtils.isEmpty(createdBy)) {
			query.append(" and  obj.createdBy in (").append(createdBy)
					.append(")");
			countQuery.append(" and  obj.createdBy in (").append(createdBy)
					.append(")");
		}
		if (!StringUtils.isEmpty(origin)) {
			query.append(" and  obj.origin.id in (").append(origin).append(")");
			countQuery.append(" and  obj.origin.id in (").append(origin)
					.append(")");
		}

		StringUtils.contains("194", destination);
		System.out.println("\n 194-->"
				+ StringUtils.contains("194", destination));
		System.out.println("\n destination-->" + destination);
		if (!StringUtils.isEmpty(destination)) {
			String[] elements = destination.split(",");

			boolean isGrowsTullyTown = false;
			for (int i = 0; i < elements.length; i++) {
				System.out.println(elements[i]);
				if (elements[i].contains("91")) {
					isGrowsTullyTown = true;					
				}
			}
			if (isGrowsTullyTown) {
				Map criterias = new HashMap();
				criterias.put("name", "Grows");
				criterias.put("type", 2);
				Location grows = genericDAO.getByCriteria(Location.class,
						criterias);
				criterias.clear();
				criterias.put("name", "Tullytown");
				criterias.put("type", 2);
				Location tullyTown = genericDAO.getByCriteria(Location.class,
						criterias);
				query.append(" and  obj.destination.id in(")
						.append(destination + "," + grows.getId() + ","
								+ tullyTown.getId()).append(")");
				countQuery
						.append(" and  obj.destination.id in (")
						.append(destination + "," + grows.getId() + ","
								+ tullyTown.getId()).append(")");
			}

			else {
				query.append(" and  obj.destination.id in(")
						.append(destination).append(")");
				countQuery.append(" and  obj.destination.id in (")
						.append(destination).append(")");
			}

			/*
			 * query.append(" and  obj.destination.id in(").append(destination).
			 * append(")");
			 * countQuery.append(" and  obj.destination.id in (").append
			 * (destination).append(")");
			 */
		}
		if (!StringUtils.isEmpty(originTicketFrom)) {
			query.append(" and obj.originTicket >= ").append(originTicketFrom);
			countQuery.append(" and obj.originTicket >= ").append(
					originTicketFrom);
		}
		if (!StringUtils.isEmpty(originTicketTo)) {
			query.append(" and obj.originTicket <= ").append(originTicketTo);
			countQuery.append(" and obj.originTicket <= ").append(
					originTicketTo);
		}
		if (!StringUtils.isEmpty(destinationTicketFrom)) {
			query.append(" and obj.destinationTicket >= ").append(
					destinationTicketFrom);
			countQuery.append(" and obj.destinationTicket >= ").append(
					destinationTicketFrom);
		}
		if (!StringUtils.isEmpty(destinationTicketTo)) {
			query.append(" and obj.destinationTicket <= ").append(
					destinationTicketTo);
			countQuery.append(" and obj.destinationTicket <= ").append(
					destinationTicketTo);
		}
		if (!StringUtils.isEmpty(driver)) {
			query.append(" and  obj.driver.id in (").append(driver).append(")");
			countQuery.append(" and  obj.driver.id in (").append(driver)
					.append(")");
		}
		if (!StringUtils.isEmpty(truck)) {
			
			String vehiclequery="select obj from Vehicle obj where obj.type=1 and obj.unit in ("
				+truck
				+")";
			
			
			
			List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
			String truckIds="";
			if(vehicleLists!=null && vehicleLists.size()>0){				
				int count=0;
			for(Vehicle vehicleObj : vehicleLists) {
				if(count==0){
					count++;
					truckIds=String.valueOf(vehicleObj.getId());
				}
				else{
				truckIds=truckIds+","+String.valueOf(vehicleObj.getId());
				}
			}
			}
			
			query.append(" and  obj.vehicle.id in (").append(truckIds).append(")");
			;
			countQuery.append(" and  obj.vehicle.id in (").append(truckIds)
					.append(")");
			;
		}
		
		
		if (!StringUtils.isEmpty(trailer)) {
			
			String vehiclequery="select obj from Vehicle obj where obj.type=2 and obj.unit in ("
				+trailer
				+")";
			
			
			
			List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
			String trailerIds="";
			if(vehicleLists!=null && vehicleLists.size()>0){				
				int count=0;
			for(Vehicle vehicleObj : vehicleLists) {
				if(count==0){
					count++;
					trailerIds=String.valueOf(vehicleObj.getId());
				}
				else{
					trailerIds=trailerIds+","+String.valueOf(vehicleObj.getId());
				}
			}
			}			
			
			
			query.append(" and  obj.trailer.id in (").append(trailerIds)
					.append(")");
			;
			countQuery.append(" and  obj.trailer.id in (").append(trailerIds)
					.append(")");
			;
		}
		
		
		if (!StringUtils.isEmpty(subcontractor)) {
			query.append(" and  obj.subcontractor.id in (")
					.append(subcontractor).append(")");
			;
			countQuery.append(" and  obj.subcontractor.id in (")
					.append(subcontractor).append(")");
			;
		}
		if (!StringUtils.isEmpty(originGrossWtFrom)) {
			query.append(" and  obj.transferGross>=").append(originGrossWtFrom);
			countQuery.append(" and  obj.transferGross>=").append(
					originGrossWtFrom);
		}
		if (!StringUtils.isEmpty(originGrossWtTo)) {
			query.append(" and  obj.transferGross<=").append(originGrossWtTo);
			countQuery.append(" and  obj.transferGross<=").append(
					originGrossWtTo);
		}
		if (!StringUtils.isEmpty(originTareWtFrom)) {
			query.append(" and  obj.transferTare>=").append(originTareWtFrom);
			countQuery.append(" and  obj.transferTare>=").append(
					originTareWtFrom);
		}
		if (!StringUtils.isEmpty(originTareWtTo)) {
			query.append(" and  obj.transferTare<=").append(originTareWtTo);
			countQuery.append(" and  obj.transferTare<=")
					.append(originTareWtTo);
		}
		if (!StringUtils.isEmpty(originTonWtFrom)) {
			query.append(" and  obj.transferTons>=").append(originTonWtFrom);
			countQuery.append(" and  obj.transferTons>=").append(
					originTonWtFrom);
		}
		if (!StringUtils.isEmpty(originTonWtTo)) {
			query.append(" and  obj.transferTons<=").append(originTonWtTo);
			countQuery.append(" and  obj.transferTons<=").append(originTonWtTo);
		}
		if (!StringUtils.isEmpty(landfillGrossWtFrom)) {
			query.append(" and  obj.landfillGross>=").append(
					landfillGrossWtFrom);
			countQuery.append(" and  obj.landfillGross>=").append(
					landfillGrossWtFrom);
		}
		if (!StringUtils.isEmpty(landfillGrossWtTo)) {
			query.append(" and  obj.landfillGross<=").append(landfillGrossWtTo);
			countQuery.append(" and  obj.landfillGross<=").append(
					landfillGrossWtTo);
		}
		if (!StringUtils.isEmpty(landfillTareWtFrom)) {
			query.append(" and  obj.landfillTare>=").append(landfillTareWtFrom);
			countQuery.append(" and  obj.landfillTare>=").append(
					landfillTareWtFrom);
		}
		if (!StringUtils.isEmpty(landfillTareWtTo)) {
			query.append(" and  obj.landfillTare<=").append(landfillTareWtTo);
			countQuery.append(" and  obj.landfillTare<=").append(
					landfillTareWtTo);
		}
		if (!StringUtils.isEmpty(landfillTonWtFrom)) {
			query.append(" and  obj.landfillTons>=").append(landfillTonWtFrom);
			countQuery.append(" and  obj.landfillTons>=").append(
					landfillTonWtFrom);
		}
		if (!StringUtils.isEmpty(landfillTonWtTo)) {
			query.append(" and  obj.landfillTons<=").append(landfillTonWtTo);
			countQuery.append(" and  obj.landfillTons<=").append(
					landfillTonWtTo);
		}
		if (!StringUtils.isEmpty(loadDateFrom)) {
			query.append(" and  obj.loadDate>='").append(loadDateFrom + "'");
			countQuery.append(" and  obj.loadDate>='").append(
					loadDateFrom + "'");

		}
		if (!StringUtils.isEmpty(loadDateTo)) {
			query.append(" and  obj.loadDate<='").append(loadDateTo + "'");
			countQuery.append(" and  obj.loadDate<='").append(loadDateTo + "'");

		}
		if (!StringUtils.isEmpty(unloadDateFrom)) {
			query.append(" and  obj.unloadDate>='")
					.append(unloadDateFrom + "'");
			countQuery.append(" and  obj.unloadDate>='").append(
					unloadDateFrom + "'");

		}
		if (!StringUtils.isEmpty(unloadDateTo)) {
			query.append(" and  obj.unloadDate<='").append(unloadDateTo + "'");
			countQuery.append(" and  obj.unloadDate<='").append(
					unloadDateTo + "'");
		}

		if (!StringUtils.isEmpty(transferTimeInFrom)
				&& !StringUtils.isEmpty(transferTimeInTo)) {
			query.append(" and  obj.transferTimeIn Between '")
					.append(transferTimeInFrom + "'").append(" and '")
					.append(transferTimeInTo + "'");
			countQuery.append(" and  obj.transferTimeIn Between '")
					.append(transferTimeInFrom + "'").append(" and '")
					.append(transferTimeInTo + "'");

		}
		if (!StringUtils.isEmpty(transferTimeOutFrom)
				&& !StringUtils.isEmpty(transferTimeOutTo)) {
			query.append(" and  obj.transferTimeOut Between '")
					.append(transferTimeOutFrom + "'").append(" and '")
					.append(transferTimeOutTo + "'");
			countQuery.append(" and  obj.transferTimeOut Between '")
					.append(transferTimeOutFrom + "'").append(" and '")
					.append(transferTimeOutTo + "'");
		}

		if (!StringUtils.isEmpty(landfillTimeInFrom)
				&& !StringUtils.isEmpty(landfillTimeInTo)) {
			query.append(" and  obj.landfillTimeIn Between '")
					.append(landfillTimeInFrom + "'").append(" and '")
					.append(landfillTimeInTo + "'");
			countQuery.append(" and  obj.landfillTimeIn Between '")
					.append(landfillTimeInFrom + "'").append(" and '")
					.append(landfillTimeInTo + "'");

		}
		if (!StringUtils.isEmpty(landfillTimeOutFrom)
				&& !StringUtils.isEmpty(landfillTimeOutTo)) {
			query.append(" and  obj.landfillTimeOut Between '")
					.append(landfillTimeOutFrom + "'").append(" and '")
					.append(landfillTimeOutTo + "'");
			countQuery.append(" and  obj.landfillTimeOut Between '")
					.append(landfillTimeOutFrom + "'").append(" and '")
					.append(landfillTimeOutTo + "'");
		}

		
		//Long recordCount = (Long) genericDAO.getEntityManager()
				//.createQuery(countQuery.toString()).getSingleResult();
		//searchCriteria.setRecordCount(recordCount.intValue());
		//System.out.println("\nrecordCount=>" + recordCount.intValue() + "\n");
		query.append(" order by billBatch desc, id");
		List<Ticket> tickets = (List<Ticket>) genericDAO
				.getEntityManager()
				.createQuery(query.toString())				
				.getResultList();
		// ticketIds1=null;
		ticketIds = null;
		return processTicketsForSummary(tickets, params);	
		
	}
	
	
private List<Summary> processTicketsForSummary(List<Ticket> tickets,Map<String, String> params) {
		
		 StringBuffer ticketIds = new StringBuffer("-1,");
			for (Ticket tkt : tickets) {
				ticketIds.append(tkt.getId()).append(",");
			}
			if (ticketIds.indexOf(",") != -1) {
				ticketIds.deleteCharAt(ticketIds.length() - 1);
			}			
			
			String query="select obj.t_origin,obj.t_destination ,count(obj), sum(totAmt), obj.company from Billing_New obj where obj.ticket in ("
				+ticketIds.toString()+") group by t_origin,t_destination order by obj.t_origin asc,obj.t_destination asc";
			List<Summary> summarys=genericDAO.executeSimpleQuery(query);						
		
	
		return summarys;
}
	
	
	
	@Override
	public List<Summary> generateSummary(SearchCriteria criteria,
			BillingHistoryInput input) {

		String fromDateInvoiceStr = ReportDateUtil.getFromDate(input
				.getFromInvoiceDate());
		String toDateInvoiceStr = ReportDateUtil.getToDate(input
				.getInvoiceDateTo());
		String invoiceNumberFrom = input.getInvoiceNumberFrom();
		String invoiceNumberTo = input.getInvoiceNumberTo();

		String fuelSurchargeFrom1 = input.getFuelSurchargeFrom();
		String fuelSurchargeTo1 = input.getFuelSurchargeTo();

		String tonnagePremiumFrom = input.getTonnagePremiumFrom();
		String tonnagePremiumTo = input.getTonnagePremiumTo();

		String demurrageChargeFrom = input.getDemurrageChargeFrom();
		String demurrageChargeTo = input.getDemurrageChargeTo();

		String amountFrom = input.getAmountFrom();
		String amountTo = input.getAmountTo();

		String totAmtFrom = input.getTotAmtFrom();
		String totAmtTo = input.getTotAmtTo();

		String rateFrom = input.getRateFrom();
		String rateTo = input.getRateTo();

		boolean useInvoice = false;
		StringBuffer ticketIds = new StringBuffer("-1,");
		if ((!StringUtils.isEmpty(input.getFromInvoiceDate()))
				|| (!StringUtils.isEmpty(input.getInvoiceDateTo()))
				|| (!StringUtils.isEmpty(invoiceNumberFrom))
				|| (!StringUtils.isEmpty(invoiceNumberTo))
				|| (!StringUtils.isEmpty(input.getFuelSurchargeFrom()))
				|| (!StringUtils.isEmpty(input.getFuelSurchargeTo()))
				|| (!StringUtils.isEmpty(tonnagePremiumFrom))
				|| (!StringUtils.isEmpty(tonnagePremiumTo))
				|| (!StringUtils.isEmpty(demurrageChargeFrom))
				|| (!StringUtils.isEmpty(demurrageChargeTo))
				|| (!StringUtils.isEmpty(amountFrom))
				|| (!StringUtils.isEmpty(amountTo))
				|| (!StringUtils.isEmpty(totAmtFrom))
				|| (!StringUtils.isEmpty(totAmtFrom))
				|| (!StringUtils.isEmpty(input.getRateFrom()))
				|| (!StringUtils.isEmpty(input.getRateTo()))) {
			StringBuffer query2 = new StringBuffer(
					"select bill.ticket from Invoice inv, Billing bill where 1=1 and bill.invoiceNo = inv.invoiceNumber");

			if (!StringUtils.isEmpty(input.getRateFrom())) {

				query2.append(" and bill.rate>=").append(rateFrom);
			}
			if (!StringUtils.isEmpty(input.getRateTo())) {

				query2.append(" and bill.rate<=").append(rateTo);
			}

			if (!StringUtils.isEmpty(fromDateInvoiceStr)) {
				query2.append(" and  inv.invoiceDate>='").append(
						fromDateInvoiceStr + "'");
			}
			if (!StringUtils.isEmpty(toDateInvoiceStr)) {
				query2.append(" and  inv.invoiceDate<='").append(
						toDateInvoiceStr + "'");
			}
			if (!StringUtils.isEmpty(invoiceNumberFrom)) {
				query2.append(" and  bill.invoiceNo>='").append(
						invoiceNumberFrom + "'");
			}
			if (!StringUtils.isEmpty(invoiceNumberTo)) {
				query2.append(" and  bill.invoiceNo<='").append(
						invoiceNumberTo + "'");
			}

			if (!StringUtils.isEmpty(fuelSurchargeFrom1)) {
				query2.append(" and bill.fuelSurcharge >= '").append(
						fuelSurchargeFrom1 + "'");
			}
			if (!StringUtils.isEmpty(fuelSurchargeTo1)) {
				query2.append(" and bill.fuelSurcharge <= '").append(
						fuelSurchargeTo1 + "'");
			}
			// /hereeee

			if (!StringUtils.isEmpty(tonnagePremiumFrom)) {
				query2.append(" and bill.tonnagePremium >= ").append(
						tonnagePremiumFrom);
			}
			if (!StringUtils.isEmpty(tonnagePremiumTo)) {
				query2.append(" and bill.tonnagePremium <= ").append(
						tonnagePremiumTo);
			}

			if (!StringUtils.isEmpty(demurrageChargeFrom)) {
				query2.append(" and bill.demurrageCharge >= ").append(
						demurrageChargeFrom);
			}
			if (!StringUtils.isEmpty(demurrageChargeTo)) {
				query2.append(" and bill.demurrageCharge <= ").append(
						demurrageChargeTo);
			}
			if (!StringUtils.isEmpty(amountFrom)) {
				query2.append(" and bill.amount >= ").append(amountFrom);
			}
			if (!StringUtils.isEmpty(amountTo)) {
				query2.append(" and bill.amount <= ").append(amountTo);
			}
			if (!StringUtils.isEmpty(totAmtFrom)) {
				query2.append(" and bill.totAmt >= ").append(totAmtFrom);
			}
			if (!StringUtils.isEmpty(totAmtTo)) {
				query2.append(" and bill.totAmt <= ").append(totAmtTo);
			}

			useInvoice = true;
			List<Ticket> tickets = genericDAO.executeSimpleQuery(query2
					.toString());
			System.out.println("\nquery2.toString()===>" + query2.toString()
					+ "\n");
			System.out.println("\ntickets.size===>" + tickets.size() + "\n");
			if (tickets != null && tickets.size() > 0) {
				for (Ticket tkt : tickets) {
					ticketIds.append(tkt.getId()).append(",");
				}
			}
			if (ticketIds.indexOf(",") != -1) {
				ticketIds.deleteCharAt(ticketIds.length() - 1);
			}
		}
		Map<String, String> params = new HashMap<String, String>();
		String batchDateFrom = ReportDateUtil.getFromDate(input
				.getBatchDateFrom());
		String batchDateTo = ReportDateUtil.getToDate(input.getBatchDateTo());
		String loadDateFrom = ReportDateUtil.getFromDate(input.getLoadedFrom());
		String loadDateTo = ReportDateUtil.getToDate(input.getLoadedTo());
		String unloadDateFrom = ReportDateUtil.getFromDate(input
				.getUnloadedFrom());
		String unloadDateTo = ReportDateUtil.getToDate(input.getUnloadedTo());

		String ticketStatus = input.getTicketStatus();
		String terminal = input.getTerminal();
		String createdBy = input.getCreatedBy();
		String origin = input.getOrigin();
		String destination = input.getDestination();
		String driver = input.getDriver();
		String truck = input.getTruck();
		String trailer = input.getTrailer();
		String subcontractor = input.getSubcontractor();

		String originTicketFrom = input.getOriginTicketFrom();
		String destinationTicketFrom = input.getDestinationTicketFrom();
		String originGrossWtFrom = input.getOriginGrossWtFrom();
		String originTareWtFrom = input.getOriginTareWtFrom();
		String originTonWtFrom = input.getOriginTonsWtFrom();
		String landfillGrossWtFrom = input.getLandfillGrossWtFrom();
		String landfillTareWtFrom = input.getLandfillTareWtFrom();
		String landfillTonWtFrom = input.getLandfillTonsWtFrom();

		String transferTimeInFrom = input.getTransferTimeInFrom();
		String transferTimeInTo = input.getTransferTimeInTo();
		String transferTimeOutFrom = input.getTransferTimeOutFrom();
		String transferTimeOutTo = input.getTransferTimeOutTo();

		String landfillTimeInFrom = input.getLandfillTimeInFrom();
		String landfillTimeInTo = input.getLandfillTimeInTo();
		String landfillTimeOutFrom = input.getLandfillTimeOutFrom();
		String landfillTimeOutTo = input.getLandfillTimeOutTo();

		String originTicketTo = input.getOriginTicketTo();
		String destinationTicketTo = input.getDestinationTicketTo();
		String originGrossWtTo = input.getOriginGrossWtTo();
		String originTareWtTo = input.getOriginTareWtTo();
		String originTonWtTo = input.getOriginTonsWtTo();
		String landfillGrossWtTo = input.getLandfillGrossWtTo();
		String landfillTareWtTo = input.getLandfillTareWtTo();
		String landfillTonWtTo = input.getLandfillTonsWtTo();

		rateFrom = input.getRateFrom();
		params.put("rateFrom", rateFrom);

		params.put("amountFrom", amountFrom);
		String fuelSurchargeFrom = input.getFuelSurchargeFrom();
		params.put("fuelSurchargeFrom", fuelSurchargeFrom);

		params.put("tonnagePremiumFrom", tonnagePremiumFrom);

		params.put("demurrageChargeFrom", demurrageChargeFrom);

		params.put("totAmtFrom", totAmtFrom);

		rateTo = input.getRateTo();
		params.put("rateTo", rateTo);

		params.put("amountTo", amountTo);
		String fuelSurchargeTo = input.getFuelSurchargeTo();
		params.put("fuelSurchargeTo", fuelSurchargeTo);

		params.put("demurrageChargeTo", demurrageChargeTo);

		params.put("tonnagePremiumTo", tonnagePremiumTo);

		params.put("totAmtTo", totAmtTo);
		String company = input.getCompany();
		params.put("company", company);
		params.put("customer", input.getCustomer());

		StringBuffer query = new StringBuffer("");

		query.append("select  obj.origin.name,obj.destination.name ,count(obj) from Ticket obj where obj.status=1 ");

		if (useInvoice) {
			query.append(" and obj.id in (" + ticketIds.toString() + ")");

		}

		if (!StringUtils.isEmpty(input.getCompany())) {

			query.append(" and obj.companyLocation.id in (").append(company)
					.append(")");

		}

		if (!StringUtils.isEmpty(input.getCustomer())) {

			query.append(" and obj.customer.id in (")
					.append(input.getCustomer()).append(")");

		}

		if (!StringUtils.isEmpty(batchDateTo)) {
			query.append(" and  obj.billBatch<='").append(batchDateTo + "'");

		}
		if (!StringUtils.isEmpty(batchDateFrom)) {
			query.append(" and  obj.billBatch>='").append(batchDateFrom + "'");

		}

		if (!StringUtils.isEmpty(ticketStatus)) {
			query.append(" and  obj.ticketStatus in (").append(ticketStatus)
					.append(")");

		}

		if (!StringUtils.isEmpty(terminal)) {

			query.append(" and  obj.terminal in (").append(terminal)
					.append(")");

		}
		if (!StringUtils.isEmpty(createdBy)) {
			query.append(" and  obj.createdBy in (").append(createdBy)
					.append(")");

		}
		if (!StringUtils.isEmpty(origin)) {
			query.append(" and  obj.origin.id in (").append(origin).append(")");
		}

		if (!StringUtils.isEmpty(destination)) {
			if (destination.equalsIgnoreCase("91")) {
				Map criterias = new HashMap();
				criterias.put("name", "Grows");
				criterias.put("type", 2);
				Location grows = genericDAO.getByCriteria(Location.class,
						criterias);
				criterias.clear();
				criterias.put("name", "Tullytown");
				criterias.put("type", 2);
				Location tullyTown = genericDAO.getByCriteria(Location.class,
						criterias);

				query.append("and  obj.destination in(" + grows.getId() + ","
						+ tullyTown.getId() + ")");
			} else {

				query.append("and  obj.destination=").append(destination);
			}
		}
		/*
		 * if (!StringUtils.isEmpty(destination)) {
		 * query.append(" and  obj.destination.id in("
		 * ).append(destination).append(")"); }
		 */
		if (!StringUtils.isEmpty(originTicketFrom)) {
			query.append(" and obj.originTicket >= ").append(originTicketFrom);
		}
		if (!StringUtils.isEmpty(originTicketTo)) {
			query.append(" and obj.originTicket <= ").append(originTicketTo);
		}
		if (!StringUtils.isEmpty(destinationTicketFrom)) {
			query.append(" and obj.destinationTicket >= ").append(
					destinationTicketFrom);
		}
		if (!StringUtils.isEmpty(destinationTicketTo)) {
			query.append(" and obj.destinationTicket <= ").append(
					destinationTicketTo);
		}
		if (!StringUtils.isEmpty(driver)) {
			query.append(" and  obj.driver.id in (").append(driver).append(")");
		}
		if (!StringUtils.isEmpty(truck)) {
			
			String vehiclequery="select obj from Vehicle obj where obj.type=1 and obj.unit in ("
				+truck
				+")";
			
			System.out.println("******** the truck query is "+vehiclequery);
			
			List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
			String truckIds="";
			if(vehicleLists!=null && vehicleLists.size()>0){				
				int count=0;
			for(Vehicle vehicleObj : vehicleLists) {
				if(count==0){
					count++;
					truckIds=String.valueOf(vehicleObj.getId());
				}
				else{
				truckIds=truckIds+","+String.valueOf(vehicleObj.getId());
				}
			}
			}
			System.out.println("********* truck id is "+truckIds);
			
			query.append(" and  obj.vehicle.id in (").append(truckIds).append(")");
			;
		}
		if (!StringUtils.isEmpty(trailer)){
			
			String vehiclequery="select obj from Vehicle obj where obj.type=2 and obj.unit in ("
				+trailer
				+")";
			
			System.out.println("******** the trailer query is "+vehiclequery);
			
			List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
			String trailerIds="";
			if(vehicleLists!=null && vehicleLists.size()>0){				
				int count=0;
			for(Vehicle vehicleObj : vehicleLists) {
				if(count==0){
					count++;
					trailerIds=String.valueOf(vehicleObj.getId());
				}
				else{
					trailerIds=trailerIds+","+String.valueOf(vehicleObj.getId());
				}
			}
			}			
			
			System.out.println("********* trailer id is "+trailerIds);			
			
			query.append(" and  obj.trailer.id in (").append(trailerIds)
					.append(")");
			;
		}
		if (!StringUtils.isEmpty(subcontractor)) {
			query.append(" and  obj.subcontractor.id in (")
					.append(subcontractor).append(")");
			;
		}
		if (!StringUtils.isEmpty(originGrossWtFrom)) {
			query.append(" and  obj.transferGross>=").append(originGrossWtFrom);
		}
		if (!StringUtils.isEmpty(originGrossWtTo)) {
			query.append(" and  obj.transferGross<=").append(originGrossWtTo);
		}
		if (!StringUtils.isEmpty(originTareWtFrom)) {
			query.append(" and  obj.transferTare>=").append(originTareWtFrom);
		}
		if (!StringUtils.isEmpty(originTareWtTo)) {
			query.append(" and  obj.transferTare<=").append(originTareWtTo);
		}
		if (!StringUtils.isEmpty(originTonWtFrom)) {
			query.append(" and  obj.transferTons>=").append(originTonWtFrom);
		}
		if (!StringUtils.isEmpty(originTonWtTo)) {
			query.append(" and  obj.transferTons<=").append(originTonWtTo);
		}
		if (!StringUtils.isEmpty(landfillGrossWtFrom)) {
			query.append(" and  obj.landfillGross>=").append(
					landfillGrossWtFrom);
		}
		if (!StringUtils.isEmpty(landfillGrossWtTo)) {
			query.append(" and  obj.landfillGross<=").append(landfillGrossWtTo);
		}
		if (!StringUtils.isEmpty(landfillTareWtFrom)) {
			query.append(" and  obj.landfillTare>=").append(landfillTareWtFrom);
		}
		if (!StringUtils.isEmpty(landfillTareWtTo)) {
			query.append(" and  obj.landfillTare<=").append(landfillTareWtTo);
		}
		if (!StringUtils.isEmpty(landfillTonWtFrom)) {
			query.append(" and  obj.landfillTons>=").append(landfillTonWtFrom);
		}
		if (!StringUtils.isEmpty(landfillTonWtTo)) {
			query.append(" and  obj.landfillTons<=").append(landfillTonWtTo);
		}
		if (!StringUtils.isEmpty(loadDateFrom)) {
			query.append(" and  obj.loadDate>='").append(loadDateFrom + "'");

		}
		if (!StringUtils.isEmpty(loadDateTo)) {
			query.append(" and  obj.loadDate<='").append(loadDateTo + "'");

		}
		if (!StringUtils.isEmpty(unloadDateFrom)) {
			query.append(" and  obj.unloadDate>='")
					.append(unloadDateFrom + "'");

		}
		if (!StringUtils.isEmpty(unloadDateTo)) {
			query.append(" and  obj.unloadDate<='").append(unloadDateTo + "'");
		}

		if (!StringUtils.isEmpty(transferTimeInFrom)
				&& !StringUtils.isEmpty(transferTimeInTo)) {
			query.append(" and  obj.transferTimeIn Between '")
					.append(transferTimeInFrom + "'").append(" and '")
					.append(transferTimeInTo + "'");

		}
		if (!StringUtils.isEmpty(transferTimeOutFrom)
				&& !StringUtils.isEmpty(transferTimeOutTo)) {
			query.append(" and  obj.transferTimeOut Between '")
					.append(transferTimeOutFrom + "'").append(" and '")
					.append(transferTimeOutTo + "'");
		}

		if (!StringUtils.isEmpty(landfillTimeInFrom)
				&& !StringUtils.isEmpty(landfillTimeInTo)) {
			query.append(" and  obj.landfillTimeIn Between '")
					.append(landfillTimeInFrom + "'").append(" and '")
					.append(landfillTimeInTo + "'");

		}
		if (!StringUtils.isEmpty(landfillTimeOutFrom)
				&& !StringUtils.isEmpty(landfillTimeOutTo)) {
			query.append(" and  obj.landfillTimeOut Between '")
					.append(landfillTimeOutFrom + "'").append(" and '")
					.append(landfillTimeOutTo + "'");
		}
		query.append(" group by origin,destination order by obj.origin.name asc,obj.destination.name asc");

		List<Summary> list = genericDAO.executeSimpleQuery(query.toString());

		return list;
	}

	@Override
	public SubcontractorBillingWrapper generateSubcontractorReportData(
			SearchCriteria searchCriteria, SubcontractorReportInput input) {

		String amountFrom = input.getAmountFrom();
		String amountTo = input.getAmountTo();
		String rateFrom = input.getRateFrom();
		String rateTo = input.getRateTo();
		String fuelSurchargeFrom = input.getFuelSurchargeFrom();
		String fuelSurchargeTo = input.getFuelSurchargeTo();
		String totAmtFrom = input.getTotAmtFrom();
		String totAmtTo = input.getTotAmtTo();
		String fromDateVoucherStr = ReportDateUtil.getFromDate(input
				.getFromVoucherDate());
		String toDateVoucherStr = ReportDateUtil.getToDate(input
				.getVoucherDateTo());
		String voucherNumberFrom = input.getVoucherNumberFrom();
		String voucherNumberTo = input.getVoucherNumberTo();
		String misceCharge = input.getMiscelleneousCharges();
		
		

		boolean useVoucher = false;
		StringBuffer ticketIds = new StringBuffer("-1,");
		if ((!StringUtils.isEmpty(input.getFromVoucherDate()))
				|| (!StringUtils.isEmpty(input.getVoucherDateTo()))
				|| (!StringUtils.isEmpty(voucherNumberFrom))
				|| (!StringUtils.isEmpty(voucherNumberTo))
				|| (!StringUtils.isEmpty(input.getFuelSurchargeFrom()))
				|| (!StringUtils.isEmpty(input.getFuelSurchargeTo()))
				|| (!StringUtils.isEmpty(amountFrom))
				|| (!StringUtils.isEmpty(amountTo))
				|| (!StringUtils.isEmpty(totAmtFrom))
				|| (!StringUtils.isEmpty(totAmtFrom))
				|| (!StringUtils.isEmpty(input.getRateFrom()))
				|| (!StringUtils.isEmpty(input.getRateTo()))
				|| (!StringUtils.isEmpty(misceCharge))) {
			StringBuffer query2 = new StringBuffer(
					"select bill.ticket from SubcontractorInvoice inv, SubcontractorBilling bill where 1=1 and bill.invoiceNo = inv.voucherNumber");

			if (!StringUtils.isEmpty(input.getRateFrom())) {

				query2.append(" and bill.rate>=").append(rateFrom);
			}
			if (!StringUtils.isEmpty(input.getRateTo())) {

				query2.append(" and bill.rate<=").append(rateTo);
			}

			if (!StringUtils.isEmpty(fromDateVoucherStr)) {
				query2.append(" and  inv.voucherDate>='").append(
						fromDateVoucherStr + "'");
			}
			if (!StringUtils.isEmpty(toDateVoucherStr)) {
				query2.append(" and  inv.voucherDate<='").append(
						toDateVoucherStr + "'");
			}
			if (!StringUtils.isEmpty(voucherNumberFrom)) {
				query2.append(" and  bill.invoiceNo>='").append(
						voucherNumberFrom + "'");
			}
			if (!StringUtils.isEmpty(voucherNumberTo)) {
				query2.append(" and  bill.invoiceNo<='").append(
						voucherNumberTo + "'");
			}

			if (!StringUtils.isEmpty(fuelSurchargeFrom)) {
				query2.append(" and bill.fuelSurcharge >= '").append(
						fuelSurchargeFrom + "'");
			}
			if (!StringUtils.isEmpty(fuelSurchargeTo)) {
				query2.append(" and bill.fuelSurcharge <= '").append(
						fuelSurchargeTo + "'");
			}

			if (!StringUtils.isEmpty(amountFrom)) {
				query2.append(" and bill.amount >= ").append(amountFrom);
			}
			if (!StringUtils.isEmpty(amountTo)) {
				query2.append(" and bill.amount <= ").append(amountTo);
			}
			if (!StringUtils.isEmpty(totAmtFrom)) {
				query2.append(" and bill.totAmt >= ").append(totAmtFrom);
			}
			if (!StringUtils.isEmpty(totAmtTo)) {
				query2.append(" and bill.totAmt <= ").append(totAmtTo);
			}
			if (!StringUtils.isEmpty(misceCharge)) {
				System.out.println("\n under mesccharge");
				query2.append(" and inv.miscelleneousCharges ='").append(
						misceCharge + "'");
			}

			useVoucher = true;
			List<Ticket> tickets = genericDAO.executeSimpleQuery(query2
					.toString());
			System.out.println("\nquery2.toString()===>" + query2.toString()
					+ "\n");
			System.out.println("\ntickets.size===>" + tickets.size() + "\n");
			if (tickets != null && tickets.size() > 0) {
				for (Ticket tkt : tickets) {
					ticketIds.append(tkt.getId()).append(",");
				}
			}
			if (ticketIds.indexOf(",") != -1) {
				ticketIds.deleteCharAt(ticketIds.length() - 1);
			}

		}

		String batchDateFrom = ReportDateUtil.getFromDate(input.getBatchDateFrom());
		String batchDateTo = ReportDateUtil.getToDate(input.getBatchDateTo());
		
		String voucherStatus = input.getVoucherStatus();
		String terminal = input.getTerminal();
		String subcontractor = input.getSubcontractor();
		String company = input.getCompany();
		String origin = input.getOrigin();
		String originTicketFrom = input.getOriginTicketFrom();
		String originTicketTo = input.getOriginTicketTo();
		String loadDateFrom = ReportDateUtil.getFromDate(input.getLoadedFrom());
		String loadDateTo = ReportDateUtil.getToDate(input.getLoadedTo());
		String originGrossWtFrom = input.getOriginGrossWtFrom();
		String originGrossWtTo = input.getOriginGrossWtTo();
		String originTareWtFrom = input.getOriginTareWtFrom();
		String originTareWtTo = input.getOriginTareWtTo();
		String originTonWtFrom = input.getOriginTonsWtFrom();
		String originTonWtTo = input.getOriginTonsWtTo();
		String destination = input.getDestination();
		String destinationTicketFrom = input.getDestinationTicketFrom();
		String destinationTicketTo = input.getDestinationTicketTo();
		String unloadDateFrom = ReportDateUtil.getFromDate(input
				.getUnloadedFrom());
		String unloadDateTo = ReportDateUtil.getToDate(input.getUnloadedTo());
		String landfillGrossWtFrom = input.getLandfillGrossWtFrom();
		String landfillGrossWtTo = input.getLandfillGrossWtTo();
		String landfillTareWtFrom = input.getLandfillTareWtFrom();
		String landfillTareWtTo = input.getLandfillTareWtTo();
		String landfillTonWtFrom = input.getLandfillTonsWtFrom();
		String landfillTonWtTo = input.getLandfillTonsWtTo();

		StringBuffer query = new StringBuffer("");
		StringBuffer countQuery = new StringBuffer("");
		query.append("select obj from Ticket obj where obj.status=1 and obj.subcontractor is not null ");
		countQuery
				.append("select count(obj) from Ticket obj where obj.status=1 and obj.subcontractor is not null");
		if (useVoucher) {
			query.append(" and obj.id in (" + ticketIds.toString() + ")");
			countQuery.append(" and obj.id in (" + ticketIds.toString() + ")");
		}

		if (!StringUtils.isEmpty(voucherStatus)) {
			query.append(" and  obj.voucherStatus in (").append(voucherStatus)
					.append(")");
			countQuery.append(" and  obj.voucherStatus in (")
					.append(voucherStatus).append(")");
		}
		
		if (!StringUtils.isEmpty(batchDateTo)) {
			query.append(" and  obj.billBatch<='").append(batchDateTo + "'");
			countQuery.append(" and  obj.billBatch<='").append(
					batchDateTo + "'");
		}
		if (!StringUtils.isEmpty(batchDateFrom)) {
			query.append(" and  obj.billBatch>='").append(batchDateFrom + "'");
			countQuery.append(" and  obj.billBatch>='").append(
					batchDateFrom + "'");
		}
		
		
		if (!StringUtils.isEmpty(terminal)) {

			query.append(" and  obj.terminal in (").append(terminal)
					.append(")");
			countQuery.append(" and  obj.terminal in (").append(terminal)
					.append(")");
		}
		if (!StringUtils.isEmpty(subcontractor)) {
			query.append(" and  obj.subcontractor.id in (")
					.append(subcontractor).append(")");
			;
			countQuery.append(" and  obj.subcontractor.id in (")
					.append(subcontractor).append(")");
			;
		}
		if (!StringUtils.isEmpty(input.getCompany())) {

			query.append(" and obj.companyLocation.id in (").append(company)
					.append(")");
			countQuery.append(" and obj.companyLocation.id in (")
					.append(company).append(")");
		}
		if (!StringUtils.isEmpty(origin)) {
			query.append(" and  obj.origin.id in (").append(origin).append(")");
			countQuery.append(" and  obj.origin.id in (").append(origin)
					.append(")");
		}
		if (!StringUtils.isEmpty(originTicketFrom)) {
			query.append(" and obj.originTicket >= ").append(originTicketFrom);
			countQuery.append(" and obj.originTicket >= ").append(
					originTicketFrom);
		}
		if (!StringUtils.isEmpty(originTicketTo)) {
			query.append(" and obj.originTicket <= ").append(originTicketTo);
			countQuery.append(" and obj.originTicket <= ").append(
					originTicketTo);
		}
		if (!StringUtils.isEmpty(loadDateFrom)) {
			query.append(" and  obj.loadDate>='").append(loadDateFrom + "'");
			countQuery.append(" and  obj.loadDate>='").append(
					loadDateFrom + "'");

		}
		if (!StringUtils.isEmpty(loadDateTo)) {
			query.append(" and  obj.loadDate<='").append(loadDateTo + "'");
			countQuery.append(" and  obj.loadDate<='").append(loadDateTo + "'");

		}
		if (!StringUtils.isEmpty(originGrossWtFrom)) {
			query.append(" and  obj.transferGross>=").append(originGrossWtFrom);
			countQuery.append(" and  obj.transferGross>=").append(
					originGrossWtFrom);
		}
		if (!StringUtils.isEmpty(originGrossWtTo)) {
			query.append(" and  obj.transferGross<=").append(originGrossWtTo);
			countQuery.append(" and  obj.transferGross<=").append(
					originGrossWtTo);
		}
		if (!StringUtils.isEmpty(originTareWtFrom)) {
			query.append(" and  obj.transferTare>=").append(originTareWtFrom);
			countQuery.append(" and  obj.transferTare>=").append(
					originTareWtFrom);
		}
		if (!StringUtils.isEmpty(originTareWtTo)) {
			query.append(" and  obj.transferTare<=").append(originTareWtTo);
			countQuery.append(" and  obj.transferTare<=")
					.append(originTareWtTo);
		}
		if (!StringUtils.isEmpty(originTonWtFrom)) {
			query.append(" and  obj.transferTons>=").append(originTonWtFrom);
			countQuery.append(" and  obj.transferTons>=").append(
					originTonWtFrom);
		}
		if (!StringUtils.isEmpty(originTonWtTo)) {
			query.append(" and  obj.transferTons<=").append(originTonWtTo);
			countQuery.append(" and  obj.transferTons<=").append(originTonWtTo);
		}
		if (!StringUtils.isEmpty(destination)) {
			String[] elements = destination.split(",");

			boolean isGrowsTullyTown = false;
			for (int i = 0; i < elements.length; i++) {
				System.out.println(elements[i]);
				if (elements[i].contains("91")) {
					isGrowsTullyTown = true;
				}
			}
			if (isGrowsTullyTown) {
				Map criterias = new HashMap();
				criterias.put("name", "Grows");
				criterias.put("type", 2);
				Location grows = genericDAO.getByCriteria(Location.class,
						criterias);
				criterias.clear();
				criterias.put("name", "Tullytown");
				criterias.put("type", 2);
				Location tullyTown = genericDAO.getByCriteria(Location.class,
						criterias);
				query.append(" and  obj.destination.id in(")
						.append(destination + "," + grows.getId() + ","
								+ tullyTown.getId()).append(")");
				countQuery
						.append(" and  obj.destination.id in (")
						.append(destination + "," + grows.getId() + ","
								+ tullyTown.getId()).append(")");
			}

			else {
				query.append(" and  obj.destination.id in(")
						.append(destination).append(")");
				countQuery.append(" and  obj.destination.id in (")
						.append(destination).append(")");
			}

		}
		if (!StringUtils.isEmpty(destinationTicketFrom)) {
			query.append(" and obj.destinationTicket >= ").append(
					destinationTicketFrom);
			countQuery.append(" and obj.destinationTicket >= ").append(
					destinationTicketFrom);
		}
		if (!StringUtils.isEmpty(destinationTicketTo)) {
			query.append(" and obj.destinationTicket <= ").append(
					destinationTicketTo);
			countQuery.append(" and obj.destinationTicket <= ").append(
					destinationTicketTo);
		}
		if (!StringUtils.isEmpty(landfillGrossWtFrom)) {
			query.append(" and  obj.landfillGross>=").append(
					landfillGrossWtFrom);
			countQuery.append(" and  obj.landfillGross>=").append(
					landfillGrossWtFrom);
		}
		if (!StringUtils.isEmpty(landfillGrossWtTo)) {
			query.append(" and  obj.landfillGross<=").append(landfillGrossWtTo);
			countQuery.append(" and  obj.landfillGross<=").append(
					landfillGrossWtTo);
		}
		if (!StringUtils.isEmpty(landfillTareWtFrom)) {
			query.append(" and  obj.landfillTare>=").append(landfillTareWtFrom);
			countQuery.append(" and  obj.landfillTare>=").append(
					landfillTareWtFrom);
		}
		if (!StringUtils.isEmpty(landfillTareWtTo)) {
			query.append(" and  obj.landfillTare<=").append(landfillTareWtTo);
			countQuery.append(" and  obj.landfillTare<=").append(
					landfillTareWtTo);
		}
		if (!StringUtils.isEmpty(landfillTonWtFrom)) {
			query.append(" and  obj.landfillTons>=").append(landfillTonWtFrom);
			countQuery.append(" and  obj.landfillTons>=").append(
					landfillTonWtFrom);
		}
		if (!StringUtils.isEmpty(landfillTonWtTo)) {
			query.append(" and  obj.landfillTons<=").append(landfillTonWtTo);
			countQuery.append(" and  obj.landfillTons<=").append(
					landfillTonWtTo);
		}
		query.append(" order by obj.subcontractor.name asc,obj.companyLocation.name asc,obj.origin.name asc,obj.destination.name asc,obj.originTicket asc");
		Long recordCount = (Long) genericDAO.getEntityManager()
				.createQuery(countQuery.toString()).getSingleResult();
		searchCriteria.setRecordCount(recordCount.intValue());
		List<Ticket> tickets = (List<Ticket>) genericDAO
				.getEntityManager()
				.createQuery(query.toString())
				.setMaxResults(searchCriteria.getPageSize())
				.setFirstResult(
						searchCriteria.getPage() * searchCriteria.getPageSize())
				.getResultList();

		List<SubcontractorBillingNew> summarys = new ArrayList<SubcontractorBillingNew>();
		SubcontractorBillingWrapper wrapper = new SubcontractorBillingWrapper();
		
		double sumNet = 0.0;
		double sumBillableTon = 0.0;
		double sumOriginTon = 0.0;
		double sumDestinationTon = 0.0;
		double sumAmount = 0.0;
		double sumFuelSurcharge = 0.0;
		double sumTotal = 0.0;
		double sumOtherCharges = 0.0;
		double grandTotal = 0.0;
		double amount = 0.0;
		double miscelleneousCharge = 0.0;
		List<String> str = new ArrayList<String>();
		
		String subticketIds = "";
		for (Ticket tkt : tickets) {
			if(subticketIds.equals("")){
				subticketIds = tkt.getId().toString();
			}
			else{
				subticketIds =subticketIds+","+tkt.getId().toString();
			}		
		}		
		String subinvquery="select obj from SubcontractorBillingNew obj where obj.ticket in ("
			+subticketIds.toString()+")";		
		
		summarys=genericDAO.executeSimpleQuery(subinvquery);			
		
		wrapper.setSubcontractorBillingsNew(summarys);
		 
		String sum_query="select sum(obj.effectiveNetWt),sum(obj.effectiveTonsWt),sum(obj.originTonsWt),sum(obj.destinationTonsWt),sum(obj.amount),sum(obj.fuelSurcharge),sum(obj.otherCharges),sum(obj.totAmt) from SubcontractorBillingNew obj where obj.ticket in ("
			+subticketIds.toString()+")";
		 
		 List<SubcontractorBillingNew> sum_list=genericDAO.executeSimpleQuery(sum_query);
			
		 if(sum_list!=null && sum_list.size()>0){
		 for(Object obj:sum_list){
			 Object[] objarry=(Object[])obj;
			if(objarry!=null){
			if(objarry[0] !=null)	
			 sumNet=Double.parseDouble(objarry[0].toString());
			if(objarry[1] !=null)
			 sumBillableTon=Double.parseDouble(objarry[1].toString());
			if(objarry[2] !=null)
			 sumOriginTon=Double.parseDouble(objarry[2].toString());
			if(objarry[3] !=null)
			 sumDestinationTon=Double.parseDouble(objarry[3].toString());
			if(objarry[4] !=null)
			 sumAmount=Double.parseDouble(objarry[4].toString());
			if(objarry[5] !=null)
			 sumFuelSurcharge=Double.parseDouble(objarry[5].toString());
			if(objarry[6] !=null)
			 sumOtherCharges=Double.parseDouble(objarry[6].toString());
			if(objarry[7] !=null)
			 sumTotal=Double.parseDouble(objarry[7].toString());
			}
		 }
		 }	
		
		 String miscellQuery="select distinct obj.subcontractorId ,obj.miscelleneousCharges from SubcontractorBillingNew obj where obj.ticket in ("+subticketIds.toString()+")";
			
			List<SubcontractorBillingNew> misscellamount=genericDAO.executeSimpleQuery(miscellQuery);
			
			if(misscellamount!=null && misscellamount.size()>0){							
				for(Object obj:misscellamount){	
					Object[] objs=(Object[])obj;
					
					if(objs[1]!=null)
					{
						String misamt=objs[1].toString();
						String[] miscell=misamt.split(",");										
						for(int i=0;i<miscell.length;i++){
							
							miscelleneousCharge+=Double.parseDouble(miscell[i]);
						}
						
					}
					//subchargesForCompanyInv=Double.parseDouble(obj.toString());
				}						
			}
		 
		 
		 
		 
		 
		/*
		for (Ticket ticket : tickets) {
			try {
				SubcontractorBilling billing = new SubcontractorBilling();
				Map criterias = new HashMap();
				boolean cont = false;
				if (ticket.getVoucherStatus() == 2) {
					SubcontractorBilling invoice = null;
					criterias.put("ticket.id", ticket.getId());
					invoice = genericDAO.getByCriteria(
							SubcontractorBilling.class, criterias);
					if (invoice == null)
						continue;

					billing = invoice;
					billing.setTerminal((ticket.getTerminal() != null) ? ticket
							.getTerminal().getName() : "");

					sumNet += (Double) billing.getEffectiveNetWt();
					sumBillableTon += (Double) billing.getEffectiveTonsWt();

					sumOriginTon += (Double) billing.getOriginTonsWt();
					sumDestinationTon += (Double) billing
							.getDestinationTonsWt();

					sumAmount += billing.getAmount();
					sumFuelSurcharge += billing.getFuelSurcharge();

					sumTotal += billing.getTotAmt();
					sumOtherCharges += billing.getOtherCharges();

					if (ticket.getCreatedBy() != null) {
						User user = genericDAO.getById(User.class,
								ticket.getCreatedBy());
						if (user != null) {
							billing.setEnteredBy(user.getUsername());
						}
					}
					billing.setTransferTimeIn(ticket.getTransferTimeIn());
					billing.setTransferTimeOut(ticket.getTransferTimeOut());
					billing.setLandfillTimeIn(ticket.getLandfillTimeIn());
					billing.setLandfillTimeOut(ticket.getLandfillTimeOut());
					billing.setProcessStatus(StaticDataUtil.getText(
							"VOUCHER_STATUS", "" + ticket.getVoucherStatus()));
					if (ticket.getCompanyLocation() != null)
						billing.setCompany((ticket.getCompanyLocation() != null) ? ticket
								.getCompanyLocation().getName() : "");

					billing.setSubcontractor((ticket.getSubcontractor() != null) ? ticket
							.getSubcontractor().getName() : "");
					billing.setInvoiceDate((ticket.getVoucherDate() != null) ? (sdf
							.format(ticket.getVoucherDate())) : null);
					if (!StringUtils.isEmpty(ticket.getVoucherNumber())
							&& !StringUtils.isEmpty(ticket.getVoucherDate()
									.toString())
							&& !StringUtils.isEmpty(ticket.getCompanyLocation()
									.getName())) {
						cont = str.contains(ticket.getVoucherNumber() + "_"
								+ ticket.getSubcontractor().getId() + "_"
								+ ticket.getCompanyLocation().getId());

						if (!cont) {
							str.add(ticket.getVoucherNumber() + "_"
									+ ticket.getSubcontractor().getId() + "_"
									+ ticket.getCompanyLocation().getId());
							String subcquery = "select obj from SubcontractorInvoice obj where obj.voucherNumber='"
									+ ticket.getVoucherNumber()
									+ "' and obj.subContractorId="
									+ ticket.getSubcontractor().getId()
									+ " and obj.companyLocationId="
									+ ticket.getCompanyLocation().getId();
							List<SubcontractorInvoice> invoices = genericDAO
									.executeSimpleQuery(subcquery);
							if (!StringUtils.isEmpty(invoices.get(0).getMiscelleneousCharges())){
								String[] miscllCharges=invoices.get(0).getMiscelleneousCharges().split(",");
								for(int i=0;i<miscllCharges.length;i++){				
									miscelleneousCharge += Double.parseDouble(miscllCharges[i]);		
									}
								}
						}
					}
					summarys.add(billing);
					System.out.println("\n continue");
					continue;

				}

				billing.setTicket(ticket);
				billing.setLoaded(sdf.format(ticket.getLoadDate()));
				if (ticket.getVehicle() != null) {
					billing.setUnit("" + ticket.getVehicle().getUnit());

				}
				billing.setDate(sdf.format(ticket.getBillBatch()));
				billing.setOrigin((ticket.getOrigin() != null) ? ticket
						.getOrigin().getName() : "");
				billing.setDestination((ticket.getDestination() != null) ? ticket
						.getDestination().getName() : "");
				billing.setOriginGrossWt(ticket.getTransferGross());
				billing.setOriginTareWt(ticket.getTransferTare());
				billing.setOriginNetWt(ticket.getTransferNet());
				billing.setOriginTonsWt(ticket.getTransferTons());
				billing.setDestinationGrossWt(ticket.getLandfillGross());
				billing.setDestinationTareWt(ticket.getLandfillTare());
				billing.setDestinationNetWt(ticket.getLandfillNet());
				billing.setDestinationTonsWt(ticket.getLandfillTons());
				billing.setUnloaded(sdf.format(ticket.getUnloadDate()));
				billing.setTransferTimeIn(ticket.getTransferTimeIn());
				billing.setTransferTimeOut(ticket.getTransferTimeOut());
				billing.setLandfillTimeIn(ticket.getLandfillTimeIn());
				billing.setLandfillTimeOut(ticket.getLandfillTimeOut());
				billing.setOriginTicket(String.valueOf(ticket.getOriginTicket()));
				billing.setDestinationTicket(String.valueOf(ticket
						.getDestinationTicket()));
				billing.setProcessStatus(StaticDataUtil.getText(
						"VOUCHER_STATUS", "" + ticket.getVoucherStatus()));
				billing.setCompany((ticket.getCompanyLocation() != null) ? ticket
						.getCompanyLocation().getName() : "");

				billing.setTerminal((ticket.getTerminal() != null) ? ticket
						.getTerminal().getName() : "");

				billing.setSubcontractor((ticket.getSubcontractor() != null) ? ticket
						.getSubcontractor().getName() : "");

				billing.setInvoiceDate((ticket.getVoucherDate() != null) ? (sdf
						.format(ticket.getVoucherDate())) : null);
				billing.setInvoiceNo(ticket.getVoucherNumber());
				SubcontractorRate billingRate = null;
				try {
					String rateQuery = "select obj from SubcontractorRate obj where obj.subcontractor='"
							+ ticket.getSubcontractor().getId()
							+ "' and obj.transferStation='"
							+ ticket.getOrigin().getId()
							+ "' and obj.landfill='"
							+ ticket.getDestination().getId()
							+ "' order by obj.validFrom desc";
					List<SubcontractorRate> fs = genericDAO
							.executeSimpleQuery(rateQuery);
					if (fs != null && fs.size() > 0) {
						for (SubcontractorRate rate : fs) {
							if (rate.getRateUsing() == null) {
								billingRate = rate;
								break;
							} else if (rate.getRateUsing() == 1) {
								// calculation for a load date
								if ((ticket.getLoadDate().getTime() >= rate
										.getValidFrom().getTime())
										&& (ticket.getLoadDate().getTime() <= rate
												.getValidTo().getTime())) {
									billingRate = rate;
									break;
								}
							} else if (rate.getRateUsing() == 2) {
								// calculation for a unload date
								if ((ticket.getUnloadDate().getTime() >= rate
										.getValidFrom().getTime())
										&& (ticket.getUnloadDate().getTime() <= rate
												.getValidTo().getTime())) {
									billingRate = rate;
									break;
								}
							}
						}
					}
				} catch (Exception ex) {
					ex.printStackTrace();
				}

				//
				if (billingRate != null) {
					int billUsing = (billingRate.getBillUsing() == null) ? 1
							: billingRate.getBillUsing();
					int rateType = billingRate.getRateType();
					if (billUsing == 1) {
						billing.setBillUsing("Transfer");
					}
					if (billUsing == 2) {
						billing.setBillUsing("Landfill");
					}
					if (billUsing == 1) {
						if (rateType == 2 || rateType == 3) {
							Double minbilgrosswt = billingRate
									.getMinbillablegrossWeight();
							if (minbilgrosswt != null
									&& ticket.getTransferGross() < minbilgrosswt) {
								billing.setEffectiveGrossWt(minbilgrosswt);
								billing.setMinimumbillablegrossweight(minbilgrosswt);
								billing.setEffectiveTareWt(ticket
										.getTransferTare());
								Double originNetWt = minbilgrosswt
										- ticket.getTransferTare();
								billing.setEffectiveNetWt(originNetWt);
								billing.setEffectiveTonsWt(originNetWt / 2000.0);
							} else {
								billing.setEffectiveGrossWt(ticket
										.getTransferGross());
								billing.setMinimumbillablegrossweight(minbilgrosswt);
								billing.setEffectiveTareWt(ticket
										.getTransferTare());
								billing.setEffectiveNetWt(ticket
										.getTransferNet());
								billing.setEffectiveTonsWt(ticket
										.getTransferTons());
							}
						}
					} else {
						if (rateType == 2 || rateType == 3) {
							Double minbilgrosswt = billingRate
									.getMinbillablegrossWeight();
							if (minbilgrosswt != null
									&& ticket.getLandfillGross() < minbilgrosswt) {
								billing.setEffectiveGrossWt(minbilgrosswt);
								billing.setMinimumbillablegrossweight(minbilgrosswt);
								billing.setEffectiveTareWt(ticket
										.getLandfillTare());
								Double destinationNetWt = minbilgrosswt
										- ticket.getLandfillTare();
								billing.setEffectiveNetWt(destinationNetWt);
								billing.setEffectiveTonsWt(destinationNetWt / 2000.0);

							} else {
								billing.setEffectiveGrossWt(ticket
										.getLandfillGross());
								billing.setMinimumbillablegrossweight(minbilgrosswt);
								billing.setEffectiveTareWt(ticket
										.getLandfillTare());
								billing.setEffectiveNetWt(ticket
										.getLandfillNet());
								billing.setEffectiveTonsWt(ticket
										.getLandfillTons());
							}
						}
					}
					// int rateType = billingRate.getRateType();
					if (rateType == 1) {
						if (billUsing == 1) {
							Double minbilgrosswt = billingRate
									.getMinbillablegrossWeight();
							if (minbilgrosswt != null
									&& ticket.getTransferGross() < minbilgrosswt) {
								billing.setEffectiveGrossWt(minbilgrosswt);
								billing.setMinimumbillablegrossweight(minbilgrosswt);
								billing.setEffectiveTareWt(ticket
										.getTransferTare());
								Double originNetWt = minbilgrosswt
										- ticket.getTransferTare();
								billing.setEffectiveNetWt(originNetWt);
							} else {
								billing.setEffectiveGrossWt(ticket
										.getTransferGross());
								billing.setMinimumbillablegrossweight(minbilgrosswt);
								billing.setEffectiveTareWt(ticket
										.getTransferTare());
								billing.setEffectiveNetWt(ticket
										.getTransferNet());
							}
						} else {
							Double minbilgrosswt = billingRate
									.getMinbillablegrossWeight();
							if (minbilgrosswt != null
									&& ticket.getLandfillGross() < minbilgrosswt) {
								billing.setEffectiveGrossWt(minbilgrosswt);
								billing.setMinimumbillablegrossweight(minbilgrosswt);
								billing.setEffectiveTareWt(ticket
										.getLandfillTare());
								Double destinationNetWt = minbilgrosswt
										- ticket.getLandfillTare();
								billing.setEffectiveNetWt(destinationNetWt);
							} else {
								billing.setEffectiveGrossWt(ticket
										.getLandfillGross());
								billing.setMinimumbillablegrossweight(minbilgrosswt);
								billing.setEffectiveTareWt(ticket
										.getLandfillTare());
								billing.setEffectiveNetWt(ticket
										.getLandfillNet());
							}
						}
						billing.setRate(billingRate.getValue());
						billing.setAmount((billing.getEffectiveNetWt() / 8.34)
								* billingRate.getValue());
					} else if (rateType == 2) {
						// per load
						billing.setRate(billingRate.getValue());
						billing.setAmount(billingRate.getValue());
					} else if (rateType == 3) {
						// per tonne
						billing.setRate(billingRate.getValue());
						billing.setAmount(billing.getEffectiveTonsWt()
								* billingRate.getValue());
					}
					sumBillableTon += billing.getEffectiveTonsWt();
					sumOriginTon += billing.getOriginTonsWt();
					sumDestinationTon += billing.getDestinationTonsWt();
					sumNet += billing.getEffectiveNetWt();
					sumAmount += billing.getAmount();
					billing.setAmount(MathUtil.roundUp(billing.getAmount(), 2));

					Double otherCharges = billingRate.getOtherCharges();
					otherCharges = MathUtil.roundUp(otherCharges, 2);
					billing.setOtherCharges(otherCharges);
					sumOtherCharges += otherCharges;

					Double fuelSurcharge = billingRate.getFuelSurchargeAmount();
					fuelSurcharge = MathUtil.roundUp(fuelSurcharge, 2);
					billing.setFuelSurcharge(fuelSurcharge);
					sumFuelSurcharge += fuelSurcharge;

					sumOtherCharges = MathUtil.roundUp(sumOtherCharges, 2);
					sumFuelSurcharge = MathUtil.roundUp(sumFuelSurcharge, 2);

				} else {

					billing.setRate(0.0);
					billing.setFuelSurcharge(0.0);
					sumOriginTon += billing.getOriginTonsWt();
					sumDestinationTon += billing.getDestinationTonsWt();

				}
				if (billingRate != null) {
					amount = billing.getAmount() + billing.getFuelSurcharge()
							+ billing.getOtherCharges();
					billing.setTotAmt(amount);
				}
				summarys.add(billing);
			} catch (Exception ex) {
				ex.printStackTrace();
			}

		*///}
		//

		sumBillableTon = MathUtil.roundUp(sumBillableTon, 2);
		sumOriginTon = MathUtil.roundUp(sumOriginTon, 2);
		sumDestinationTon = MathUtil.roundUp(sumDestinationTon, 2);
		sumNet = MathUtil.roundUp(sumNet, 2);
		sumAmount = MathUtil.roundUp(sumAmount, 2);

		sumTotal = sumAmount + sumFuelSurcharge + sumOtherCharges;
		wrapper.setSumBillableTon(sumBillableTon);
		wrapper.setSumOriginTon(sumOriginTon);
		wrapper.setSumDestinationTon(sumDestinationTon);
		wrapper.setSumNet(sumNet);
		wrapper.setSumAmount(sumAmount);
		wrapper.setSumFuelSurcharge(sumFuelSurcharge);
		wrapper.setSumTotal(sumTotal);
		wrapper.setSumOtherCharges(sumOtherCharges);
		wrapper.setMiscelleneousCharges(Double.toString(miscelleneousCharge));
		wrapper.setGrandTotal(sumTotal + miscelleneousCharge);

		return wrapper;
	}

	
	
	
	
	@Override
	public List<NetReportWrapper> generateNetReportData(
			SearchCriteria searchCriteria, NetReportInput input,
			HttpServletRequest request) {
		Map<String, String> params = new HashMap<String, String>();

		/*
		 * String DriverReport=request.getParameter("Driver"); String
		 * TruckReport=request.getParameter("Truck"); String
		 * TerminalReport=request.getParameter("Terminal");
		 */
		
		SimpleDateFormat oracleFormatter = new SimpleDateFormat(
		"yyyy-MM-dd");
		
		boolean invoi=true;
		boolean execstr=false;
		String DriverReport = (String) request.getSession().getAttribute(
				"DriverReport");
		String TruckReport = (String) request.getSession().getAttribute(
				"TruckReport");
		String TerminalReport = (String) request.getSession().getAttribute(
				"TerminalReport");
		String CompanyReport = (String) request.getSession().getAttribute(
				"CompanyReport");
		String TrailerReport=(String)request.getSession().getAttribute("TrailerReport");

		System.out.println("\ngenerateNetReportData==Driver===>" + DriverReport
				+ "\n");
		System.out.println("\ngenerateNetReportData==Truck===>" + TruckReport
				+ "\n");
		System.out.println("\ngenerateNetReportData==terminal===>"
				+ TerminalReport + "\n");
		System.out.println("\ngenerateNetReportData==Company===>"
				+ CompanyReport + "\n");

		String batchDateFrom = ReportDateUtil.getFromDate(input
				.getBatchDateFrom());
		String batchDateTo = ReportDateUtil.getToDate(input.getBatchDateTo());
		String loadDateFrom = ReportDateUtil.getFromDate(input.getLoadedFrom());
		String loadDateTo = ReportDateUtil.getToDate(input.getLoadedTo());
		String unloadDateFrom = ReportDateUtil.getFromDate(input
				.getUnloadedFrom());
		String unloadDateTo = ReportDateUtil.getToDate(input.getUnloadedTo());
		String dateRangeFrom = null;
		String dateRangeTo = null;
		System.out.println("\nunloadDateFrom===>" + unloadDateFrom + "\n");
		System.out.println("\nunloadDateTo===>" + unloadDateTo + "\n");

		String BatchDateStart = input.getBatchDateFrom();
		String BatchDateEnd = input.getBatchDateTo();
		String loadDateStart = input.getLoadedFrom();
		String loadDateEnd = input.getLoadedTo();
		String UnloadDateStart = input.getUnloadedFrom();
		String UnloadDateEnd = input.getUnloadedTo();
		String invoiceDatefrom=input.getInvoiceDateFrom();
		String invoiceDateTo=input.getInvoiceDateTo();
		invoiceDatefrom=ReportDateUtil.getFromDate(invoiceDatefrom);
		invoiceDateTo=ReportDateUtil.getToDate(invoiceDateTo);
		System.out.println("\nUnloadDateStart===>" + UnloadDateStart + "\n");
		System.out.println("\nUnloadDateEnd===>" + UnloadDateEnd + "\n");

		if (!StringUtils.isEmpty(batchDateFrom)
				&& !StringUtils.isEmpty(batchDateTo)) {
			dateRangeFrom = batchDateFrom;
			dateRangeTo = batchDateTo;
		}
		if (!StringUtils.isEmpty(loadDateFrom)
				&& !StringUtils.isEmpty(loadDateTo)) {
			dateRangeFrom = loadDateFrom;
			dateRangeTo = loadDateTo;
		}
		if (!StringUtils.isEmpty(unloadDateFrom)
				&& !StringUtils.isEmpty(unloadDateTo)) {
			dateRangeFrom = unloadDateFrom;
			dateRangeTo = unloadDateTo;
		}
        String trailer = input.getTrailer();
		String company = input.getCompany();
		String terminal = input.getTerminal();
		String driver = input.getDriver();
		String truck = input.getUnit();
		String  ticketstatus=input.getTicketStatus();
		StringBuffer ticketquery = new StringBuffer("");
		StringBuffer subcontractorquery = new StringBuffer("");
		StringBuffer terminalids=new StringBuffer("");
		if(TerminalReport!=null&&!StringUtils.isEmpty(company)&&!StringUtils.contains(TerminalReport, "Terminalac")){
		String terquery="select obj.terminal from Terminal obj where obj.company in ("+company+")";
		List<Location> locations=genericDAO.executeSimpleQuery(terquery);
		for(Location lolterminal:locations){
			
			terminalids.append(lolterminal.getId());
			terminalids.append(",");
			}
		int t=terminalids.lastIndexOf(",");
		if(t>0)
		terminalids.deleteCharAt(t);
		}
		System.out.println("\nticketstatus==>"+ticketstatus+"\n");
		/*System.out.println("\nticketstatus.length()==>"+ticketstatus.length()+"\n");
		System.out.println("\nticketstatus.length()==1>"+ticketstatus.length()==1+"\n");
		System.out.println("\nticketstatus==1>"+ticketstatus==1+"\n");*/
		
		
		/*
		 * ticketquery.append(
		 * "select obj from Ticket obj where obj.status=1 and ticketStatus=2");
		 */
		List<Vehicle> vehicles=null;
		StringBuffer vehicIds = new StringBuffer("");
		if(TruckReport!=null&&(StringUtils.contains(TruckReport, "Truckcc")||StringUtils.contains(TruckReport, "Truckca"))){
			Map criterias=new HashMap();
			criterias.put("owner.id", Long.parseLong(input.getCompany()));
			criterias.put("type", 1);
			vehicles=genericDAO.findByCriteria(Vehicle.class, criterias);
			for(Vehicle vehicle:vehicles){
				vehicIds.append(vehicle.getId());
				vehicIds.append(",");
				
			}
			int v = vehicIds.lastIndexOf(",");
			if (v > 0)
				vehicIds.deleteCharAt(v);
		}
		List<Vehicle> trailvehicle=null;
		StringBuffer vehicleidstrai=new StringBuffer("");
		if(TrailerReport!=null&&(StringUtils.contains(TrailerReport,"Trailercc")||StringUtils.contains(TrailerReport,"Trailerca"))){
			Map criterias=new HashMap();
			criterias.put("owner.id", Long.parseLong(input.getCompany()));
			criterias.put("type", 2);
			trailvehicle=genericDAO.findByCriteria(Vehicle.class, criterias);
			for(Vehicle vehicle:trailvehicle){
				vehicleidstrai.append(vehicle.getId());
				vehicleidstrai.append(",");
				
			}
			int v = vehicleidstrai.lastIndexOf(",");
			if (v > 0)
				vehicleidstrai.deleteCharAt(v);
		}
		List<Driver> drivers=null;
		StringBuffer driveIds = new StringBuffer("");
		if(DriverReport!=null&&(StringUtils.contains(DriverReport, "Drivercc")||StringUtils.contains(DriverReport, "Driverca"))){
			Map criterias=new HashMap();
			criterias.put("company.id", Long.parseLong(input.getCompany()));
			drivers=genericDAO.findByCriteria(Driver.class, criterias);
			System.out.println("******* eneted in driver start");
			for(Driver driver2:drivers){
				driveIds.append(driver2.getId());
				driveIds.append(",");
			}
			int d = driveIds.lastIndexOf(",");
			if (d > 0)
				driveIds.deleteCharAt(d);
		}
		ticketquery.append("select obj from Ticket obj where obj.status=1");
		//subcontractorquery.append("select obj from Ticket obj where obj.status=1 and voucherStatus=2");
		subcontractorquery.append("select obj from Ticket obj where obj.status=1 and obj.subcontractor is not null");
		
		if(TerminalReport!=null&&!StringUtils.isEmpty(company)&&terminalids.length()>0){
			ticketquery.append(" and  obj.terminal in (").append(terminalids)
			.append(")");
	subcontractorquery.append(" and  obj.terminal in (")
			.append(terminalids).append(")");
			
		}
		if (!StringUtils.isEmpty(ticketstatus)) {
			ticketquery.append(" and  obj.ticketStatus in (").append(ticketstatus).append(")");
			subcontractorquery.append(" and  obj.voucherStatus in (").append(ticketstatus).append(")");
		}
		if(drivers!=null){
			ticketquery.append(" and  obj.driver.id in (").append(driveIds)
			.append(")");
	subcontractorquery.append(" and  obj.driver.id in (")
			.append(driveIds).append(")");
		}
		
		if (!StringUtils.isEmpty(batchDateFrom)) {
			ticketquery.append(" and  obj.billBatch>='").append(
					batchDateFrom + "'");
			subcontractorquery.append(" and  obj.billBatch>='").append(
					batchDateFrom + "'");
			invoi=false;

		}
		if (!StringUtils.isEmpty(batchDateTo)) {
			ticketquery.append(" and  obj.billBatch<='").append(
					batchDateTo + "'");
			subcontractorquery.append(" and  obj.billBatch<='").append(
					batchDateTo + "'");
			invoi=false;

		}
		if(!StringUtils.isEmpty(trailer)){
			
			
			String vehiclequery="select obj from Vehicle obj where obj.type=2 and obj.unit in ("
				+trailer
				+")";
			
			System.out.println("******** the trailer query is "+vehiclequery);
			
			List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
			String trailerIds="";
			if(vehicleLists!=null && vehicleLists.size()>0){				
				int count=0;
			for(Vehicle vehicleObj : vehicleLists) {
				if(count==0){
					count++;
					trailerIds=String.valueOf(vehicleObj.getId());
				}
				else{
					trailerIds=trailerIds+","+String.valueOf(vehicleObj.getId());
				}
			}
			}			
			
			System.out.println("********* trailer id is "+trailerIds);			
			ticketquery.append(" and  obj.trailer.id in (").append(trailerIds)
			.append(")");
			subcontractorquery.append(" and  obj.trailer.id in (")
			.append(trailerIds).append(")");
		}
		if(trailvehicle!=null){
			ticketquery.append(" and  obj.trailer.id in (").append(vehicleidstrai)
			.append(")");
			subcontractorquery.append(" and  obj.trailer.id in (")
			.append(vehicleidstrai).append(")");
		}
		if(vehicles!=null){
			ticketquery.append(" and  obj.vehicle.id in (").append(vehicIds)
			.append(")");
			subcontractorquery.append(" and  obj.vehicle.id in (")
			.append(vehicIds).append(")");
		}
		if (!StringUtils.isEmpty(loadDateFrom)) {
			ticketquery.append(" and  obj.loadDate>='").append(
					loadDateFrom + "'");
			subcontractorquery.append(" and  obj.loadDate>='").append(
					loadDateFrom + "'");

		}
		if (!StringUtils.isEmpty(loadDateTo)) {
			ticketquery.append(" and  obj.loadDate<='")
					.append(loadDateTo + "'");
			subcontractorquery.append(" and  obj.loadDate<='").append(
					loadDateTo + "'");
		}
		if (!StringUtils.isEmpty(unloadDateFrom)) {
			ticketquery.append(" and  obj.unloadDate>='").append(
					unloadDateFrom + "'");
			subcontractorquery.append(" and  obj.unloadDate>='").append(
					unloadDateFrom + "'");
			execstr=true;
		}
		if (!StringUtils.isEmpty(unloadDateTo)) {
			ticketquery.append(" and  obj.unloadDate<='").append(
					unloadDateTo + "'");
			subcontractorquery.append(" and  obj.unloadDate<='").append(
					unloadDateTo + "'");
			execstr=true;
		}
		if(!StringUtils.isEmpty(invoiceDatefrom)){
			ticketquery.append(" and obj.invoiceDate>='").append(invoiceDatefrom+"'");
			subcontractorquery.append(" and obj.invoiceDate>='").append(invoiceDatefrom+"'");
			invoi=false;
		}
		if(!StringUtils.isEmpty(invoiceDateTo)){
			ticketquery.append(" and obj.invoiceDate<='").append(invoiceDateTo+"'");
			subcontractorquery.append(" and obj.invoiceDate<='").append(invoiceDateTo+"'");
			invoi=false;
		}
		StringBuffer drivernames = new StringBuffer("");
		if (!StringUtils.isEmpty(driver)) {
			ticketquery.append(" and  obj.driver.id in (").append(driver)
					.append(")");
			subcontractorquery.append(" and  obj.driver.id in (")
					.append(driver).append(")");

			String driverIds = "select obj from Driver obj where obj.id in ("
					+ driver + ")";
			List<Driver> driverlist = genericDAO.executeSimpleQuery(driverIds);
			for (Driver driverOb : driverlist) {
				drivernames.append("'" + driverOb.getFullName() + "',");

			}
			int i = drivernames.lastIndexOf(",");
			if(i>0)
			drivernames.deleteCharAt(i);

		}
		StringBuffer units = new StringBuffer("");
		if (!StringUtils.isEmpty(truck)) {			
			
			String vehiclequery="select obj from Vehicle obj where obj.type=1 and obj.unit in ("
					+truck
					+")";
				
				System.out.println("******** the truck query is "+vehiclequery);
				
				List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
				String truckIds="";
				if(vehicleLists!=null && vehicleLists.size()>0){				
					int count=0;
				for(Vehicle vehicleObj : vehicleLists) {
					if(count==0){
						count++;
						truckIds=String.valueOf(vehicleObj.getId());
					}
					else{
					truckIds=truckIds+","+String.valueOf(vehicleObj.getId());
					}
				}
				}
				System.out.println("********* truck id is "+truckIds);			
			
			ticketquery.append(" and  obj.vehicle.id in (").append(truckIds)
					.append(")");
			subcontractorquery.append(" and  obj.vehicle.id in (")
					.append(truckIds).append(")");

			String VehicleIds = "select obj from Vehicle obj where obj.id in ("
					+ truckIds + ")";
			List<Vehicle> vehiclelist = genericDAO
					.executeSimpleQuery(VehicleIds);
			for (Vehicle vehiclOb : vehiclelist) {
				units.append("'" + vehiclOb.getUnit() + "',");

			}
			int i = units.lastIndexOf(",");
			units.deleteCharAt(i);
		}
		StringBuffer locationnames = new StringBuffer("");
		if (!StringUtils.isEmpty(terminal)) {
			// System.out.println("\nTerminal===>"+terminal+"\n");
			ticketquery.append(" and  obj.terminal in (").append(terminal)
					.append(")");
			subcontractorquery.append(" and  obj.terminal in (")
					.append(terminal).append(")");

			String locationIds = "select obj from Location obj where obj.id in ("
					+ terminal + ")";
			List<Location> locationlist = genericDAO
					.executeSimpleQuery(locationIds);
			for (Location LocationOb : locationlist) {
				locationnames.append("'" + LocationOb.getName() + "',");

			}
			int i = locationnames.lastIndexOf(",");
			locationnames.deleteCharAt(i);

		}

		StringBuffer companynames = new StringBuffer("");
		if (!StringUtils.isEmpty(input.getCompany())&&!StringUtils.contains(DriverReport, "Driverca")&&!StringUtils.contains(TruckReport, "Truckca")&&!StringUtils.contains(TerminalReport, "Terminalca")&&!StringUtils.contains(TrailerReport, "Trailerca")) {
			System.out.println("\n inside company");
			ticketquery.append(" and obj.companyLocation.id in (")
					.append(company).append(")");
			subcontractorquery.append(" and obj.companyLocation.id in (")
					.append(company).append(")");

			String locationIds = "select obj from Location obj where obj.id in ("
					+ company + ")";
			List<Location> locationIdlist = genericDAO
					.executeSimpleQuery(locationIds);
			for (Location LocationOb : locationIdlist) {
				companynames.append("'" + LocationOb.getName() + "',");

			}
			int i = companynames.lastIndexOf(",");
			companynames.deleteCharAt(i);

		}
		
		ticketquery.append(" order by obj.loadDate asc");
		
		request.getSession().setAttribute("netTicktQuery",ticketquery.toString());
		
		System.out.println("**************************************");
		  System.out.println("************* the main ticketquery is "+ticketquery.toString());
		  System.out.println("**************************************");
		
		List<Ticket> tickets = genericDAO.executeSimpleQuery(ticketquery.toString());
		
        System.out.println("************* the main ticketquery is "+ticketquery.toString());
		StringBuffer ticketIds = new StringBuffer("");
		
		System.out.println("********* subcontractor query is "+subcontractorquery.toString());
		request.getSession().setAttribute("netSubTicktQuery",subcontractorquery.toString());
		List<Ticket> subtickets = genericDAO.executeSimpleQuery(subcontractorquery.toString());
		StringBuffer subticketIds = new StringBuffer("");
		int NoOfTickets = tickets.size();
		Date mainStartDate=null;
		Date mainEndDate=null;
		if(tickets.size()>0){
			int lstindex=tickets.size()-1;
			mainStartDate=tickets.get(0).getLoadDate();
			mainEndDate=tickets.get(lstindex).getUnloadDate();			
		}		
		
		List<NetReportWrapper> wrapperlist = new ArrayList<NetReportWrapper>();
		int less1 = 0;
		if (NoOfTickets > 0) {
			// StringBuffer driverID = new StringBuffer("");
			for (Ticket ticket : tickets) {			
				
				if (less1 != NoOfTickets - 1) {
					ticketIds.append("'" + ticket.getId() + "',");
					less1++;
				} else {
					ticketIds.append("'" + ticket.getId() + "'");
				}
			}
			System.out.println("**************************************");
			System.out.println("\nTickets ID`size ===>" + tickets.size() + "\n");
			System.out.println("\nTickets ID`s===>" + ticketIds.length() + "\n");
			System.out.println("**************************************");

			for (Ticket ticket1 : subtickets) {
				subticketIds.append(ticket1.getId());
				subticketIds.append(",");

			}
			int j = subticketIds.lastIndexOf(",");
			if (j > 0)
				subticketIds.deleteCharAt(j);
			System.out.println("\nticketsIds in subcontractor_invoice_details===>"+ subticketIds + "\n");

		}

		// ??????????/// for all revenue
		/*StringBuffer ticketIDs = new StringBuffer("");
		for (Ticket ticketOb : tickets) {
			ticketIDs.append(ticketOb.getId() + ",");

		}
		int i = ticketIDs.lastIndexOf(",");
		ticketIDs.deleteCharAt(i);*/

		if (CompanyReport != null) {
			if(ticketIds.length()>0){
			String disting = "select distinct obj.companyLocation from Ticket obj where obj.id in ("+ ticketIds+ ") order by obj.companyLocation.name";
			List<Location> ticketsdestinct = genericDAO.executeSimpleQuery(disting);
			Date startLoadDate=null;
			Date endLoadDate=null;
			for (Location l : ticketsdestinct) {
				//Location companyName = genericDAO.getById(Location.class,l.getId());
				String ticketsForAlocation = "select obj from Ticket obj where obj.companyLocation="
						+ l.getId()
						+ " and obj.id in ("
						+ ticketIds
						+ ") order by vehicle asc, terminal asc ,loadDate asc, unloadDate desc ";
				List<Ticket> ticketsForAcampany = genericDAO.executeSimpleQuery(ticketsForAlocation);
				
				
				System.out.println("\nticketsForAcampany.size()===>"+ ticketsForAcampany.size() + "\n");
				
				NetReportWrapper wrapper = new NetReportWrapper();
				Double fuelchargesForCompany = 0.0;
				
				Double fuelNetValue=0.0;
				Double tollNetValue=0.0;
				Double subchargesForCompanyInv = 0.0;
				Double subchargesForCompanyNonInv = 0.0;
				Double tollchargesForCompany = 0.0;
				Double miscelleneousCharge=0.0;
				String dateRanges="";
				String unitIds="";
				Double netamount = 0.0;
				//HashSet<LocalDate> dates = new HashSet<LocalDate>();
				double revenue = 0.0;
				//Map<String, List<BillingRate>> billingMap = new HashMap<String, List<BillingRate>>();
				StringBuffer ticketsForAlocationid=new StringBuffer("");
		
				HashSet<String> dates = null;
				String tempVehicle = "";
				String tempTerminal="";
				Date tempLoadDate = null;
				Date tempUnloadDate = null;
				HashSet<String> tempDriver= null;
				Map map = new HashMap();
				//HashSet<String> tempTerminal= null;
				for(Ticket ticket : ticketsForAcampany) {					
					String trckIDs = "";
					Vehicle vehicle = genericDAO.getById(Vehicle.class,ticket.getVehicle().getId());
					map.clear();
					map.put("unit",vehicle.getUnit());
					
					List<Vehicle> trucks = genericDAO.findByCriteria(Vehicle.class,map);
					
					if(trucks.size() > 0 && trucks!=null ){						
						for(Vehicle vehs: trucks ){							
						  if(trckIDs.equals("")){
							  trckIDs = vehs.getId().toString();
						  }
						  else{
							  trckIDs = trckIDs+","+vehs.getId();
						  }  
						}
					}
					
					ticketsForAlocationid.append(ticket.getId());
					ticketsForAlocationid.append(",");	
					
					StringBuffer fuellogQuery = new StringBuffer("");	
					StringBuffer tollquery = new StringBuffer("");
					if(!tempVehicle.equals(ticket.getVehicle().getId().toString()) || !tempTerminal.equals(ticket.getTerminal().getId().toString())){				
						
						 dates = new HashSet<String>();
						 tempVehicle = ticket.getVehicle().getId().toString();
						 tempTerminal = ticket.getTerminal().getId().toString();
						 tempLoadDate = ticket.getLoadDate();
						 tempUnloadDate = ticket.getUnloadDate();
						 tempDriver = new HashSet<String>();
						 tempDriver.add( ticket.getDriver().getId().toString());
						 //tempTerminal= new HashSet<String>();
						 //tempTerminal.add( ticket.getTerminal().getId().toString());
						 int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
						 for (int i=0; i < days; i++) {
							    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
							    dates.add(df.format(d.toDate()));							    
						 }
						 dates.add(ticket.getLoadDate().toString());
						 dates.add(ticket.getUnloadDate().toString());
						 
						 String transferDateFrom = mysqldf.format(ticket.getLoadDate());
						 String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
					
						 fuellogQuery.append("select sum(obj.amount) from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
					//if(typeKey.equalsIgnoreCase("company"))
					//{
							fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
							fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
							fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
							//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
					//}
							List<FuelLog> fuellogListforCompany = genericDAO
							.executeSimpleQuery(fuellogQuery.toString());
							
							if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
								for(Object fuelobj:fuellogListforCompany){							
									if(fuelobj!=null)	
										fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
								}				
							}
							
							
							tollquery.append("select sum(obj.amount) from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
									+ transferDateTo
									+ " 23:59:59'");
						/*if(typeKey.equalsIgnoreCase("company"))
						{*/
							tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
							tollquery.append(" and obj.plateNumber in (").append(trckIDs).append(")");
							tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
						//}		
							
							List<EzToll> TollListforCompany = genericDAO.executeSimpleQuery(tollquery.toString());
							
							if (TollListforCompany != null	&& TollListforCompany.size() > 0) {	        	
								for (Object tollObj : TollListforCompany) {
									if(tollObj!=null)
										tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
								}
							}
							
							
				}
				else{
					
					if((ticket.getLoadDate().after(tempLoadDate) || ticket.getLoadDate().equals(tempLoadDate)) && (ticket.getUnloadDate().before(tempUnloadDate)|| ticket.getUnloadDate().equals(tempUnloadDate))){
						
						/*if( (!tempTerminal.contains(ticket.getTerminal().getId().toString())) ){
							
                           System.out.println("***************** enetered ne logic");
							tempDriver.add( ticket.getDriver().getId().toString());
							tempTerminal.add(ticket.getTerminal().getId().toString());
							String transferDateFrom = mysqldf.format(ticket.getLoadDate());
							 String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
						
							 fuellogQuery.append("select sum(obj.amount) from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
									+ transferDateTo
									+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								fuellogQuery.append(" and obj.unit in (").append(ticket.getVehicle().getId()).append(")");
								fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
						//}
								List<FuelLog> fuellogListforCompany = genericDAO
								.executeSimpleQuery(fuellogQuery.toString());
								
								if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
									for(Object fuelobj:fuellogListforCompany){							
										if(fuelobj!=null)	
											fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
									}				
								}
								
								
								tollquery.append("select sum(obj.amount) from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
										+ transferDateTo
										+ " 23:59:59'");
							if(typeKey.equalsIgnoreCase("company"))
							{
								tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								tollquery.append(" and obj.plateNumber in (").append(ticket.getVehicle().getId()).append(")");
								tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
							//}		
								
								List<EzToll> TollListforCompany = genericDAO.executeSimpleQuery(tollquery.toString());
								
								if (TollListforCompany != null	&& TollListforCompany.size() > 0) {	        	
									for (Object tollObj : TollListforCompany) {
										if(tollObj!=null)
											tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
									}
								}							
						}*/
						/*else if (!tempDriver.contains(ticket.getDriver().getId().toString())){
							
							System.out.println("*****************driver enetered ne logic");
							tempDriver.add( ticket.getDriver().getId().toString());
							tempTerminal.add(ticket.getTerminal().getId().toString());
							String transferDateFrom = mysqldf.format(ticket.getLoadDate());
							 String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 								
								
							 fuellogQuery.append("select sum(obj.amount) from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
										+ transferDateTo
										+ " 23:59:59'");
							//if(typeKey.equalsIgnoreCase("company"))
							//{
									fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
									fuellogQuery.append(" and obj.unit in (").append(ticket.getVehicle().getId()).append(")");
									fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
									fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							//}
									List<FuelLog> fuellogListforCompany = genericDAO
									.executeSimpleQuery(fuellogQuery.toString());
									
									if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
										for(Object fuelobj:fuellogListforCompany){							
											if(fuelobj!=null)	
												fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
										}				
									}					
						}*/
					}
					else{
						
						Date tempDateVar =null;
						boolean valueset = false;
						tempLoadDate = 	ticket.getLoadDate();
						tempUnloadDate = ticket.getUnloadDate();
						tempDriver.add( ticket.getDriver().getId().toString());
						//tempTerminal.add(ticket.getTerminal().getId().toString());
						 if(dates.contains(ticket.getLoadDate().toString())){
							 //do nothing						
						 }
						 else{
						   	if(!valueset){					   		
						    	valueset=true;					  
								tempDateVar = ticket.getLoadDate();
							}					   	
						    	dates.add(ticket.getLoadDate().toString());
						 } 
						 
						int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
						 for (int i=0; i < days; i++) {
							    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
							   
							    if(dates.contains(df.format(d.toDate()))){
							      //do nothing						    	
							    }
							    else{
							    	if(!valueset){
							    	valueset=true;						    	
							    	tempDateVar = d.toDate();
							    }
							    	dates.add(df.format(d.toDate()));
							    }
						 }
						 //dates.add(new LocalDate(ticket.getLoadDate()));
						
						if(tempDateVar!=null){
							String transferDateFrom = mysqldf.format(tempDateVar);					
							String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
						
							 fuellogQuery.append("select sum(obj.amount) from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
								fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
								List<FuelLog> fuellogListforCompany = genericDAO
								.executeSimpleQuery(fuellogQuery.toString());
								
								if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
									for(Object fuelobj:fuellogListforCompany){							
										if(fuelobj!=null)	
											fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
									}				
								}
								
								
								
								tollquery.append("select sum(obj.amount) from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
										+ transferDateTo
										+ " 23:59:59'");
							/*if(typeKey.equalsIgnoreCase("company"))
							{*/
								tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								tollquery.append(" and obj.plateNumber in (").append(trckIDs).append(")");
								tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
							//}		
								
								List<EzToll> TollListforCompany = genericDAO.executeSimpleQuery(tollquery.toString());
								
								if (TollListforCompany != null	&& TollListforCompany.size() > 0) {	        	
									for (Object tollObj : TollListforCompany) {
										if(tollObj!=null)
											tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
									}
								}
								
						}						
						else {
						  if(dates.contains(ticket.getUnloadDate().toString())){
							  //do nothing
						  }
						  else{
							  dates.add(ticket.getUnloadDate().toString());
							  String transferDateFrom = mysqldf.format(ticket.getUnloadDate());					
							  String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
							
							  fuellogQuery.append("select sum(obj.amount) from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
								fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
								List<FuelLog> fuellogListforCompany = genericDAO
								.executeSimpleQuery(fuellogQuery.toString());
								
								if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
									for(Object fuelobj:fuellogListforCompany){							
										if(fuelobj!=null)	
											fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
									}				
								}
								
								
								tollquery.append("select sum(obj.amount) from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
										+ transferDateTo
										+ " 23:59:59'");
							/*if(typeKey.equalsIgnoreCase("company"))
							{*/
								tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								tollquery.append(" and obj.plateNumber in (").append(trckIDs).append(")");
								tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
							//}		
								
								List<EzToll> TollListforCompany = genericDAO.executeSimpleQuery(tollquery.toString());
								
								if (TollListforCompany != null	&& TollListforCompany.size() > 0) {	        	
									for (Object tollObj : TollListforCompany) {
										if(tollObj!=null)
											tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
									}
								}
								
						  }
						}
					}						
				}
							
					
								
				
				
					
					
					
				}
				
				wrapper.setFuellogCharge(fuelNetValue);
				wrapper.setTollTagAmount(tollNetValue);	
				
			
				
				
				
				if(ticketsForAlocationid.length()>0){
					int t=ticketsForAlocationid.lastIndexOf(",");
					ticketsForAlocationid.deleteCharAt(t);
					
					String query ="select sum(obj.totAmt) from Billing_New obj where obj.ticket in ("+ticketsForAlocationid+")";
					List<Billing_New> billinglist =genericDAO.executeSimpleQuery(query);
					if(!billinglist.isEmpty()&&billinglist.size()>0){
						for(Object obj:billinglist){
							//Object[] objarry=(Object[])obj;
							if(obj!=null){
								revenue=Double.parseDouble(obj.toString());
							}
						}
					}					
				}	
								
						

				
				
				
					// FOR sUBCONTRACTOR CHARGE
					if(subticketIds.length()>0){
					String SubticketsForAlocation = "select obj from Ticket obj where obj.companyLocation="
							+ l.getId()
							+ " and obj.id in ("
							+ subticketIds
							+ ")";
					List<Ticket> subticketsForAcampany = genericDAO.executeSimpleQuery(SubticketsForAlocation);
					System.out.println("\nticketsForAcampanyOFsubcontractor.size()===>"+ subticketsForAcampany.size() + "\n");
					
					String tickids="";
					String tickNonInvoced="";
					List<String> str = new ArrayList<String>();
					
					for (Ticket ticket : subticketsForAcampany) {
						
						
						if (ticket.getVoucherStatus() == 2) {
							if(tickids.equals("")){
								tickids=String.valueOf(ticket.getId());
							}
							else{
								tickids=tickids+","+String.valueOf(ticket.getId());
							}
							
							/*boolean cont=false;						
							if (!StringUtils.isEmpty(ticket.getVoucherNumber())&& !StringUtils.isEmpty(ticket.getVoucherDate().toString())
										&& !StringUtils.isEmpty(ticket.getCompanyLocation().getName())) {
									cont = str.contains(ticket.getVoucherNumber() + "_"
										+ ticket.getSubcontractor().getId() + "_"
										+ ticket.getCompanyLocation().getId());
									

									if (!cont) {
										str.add(ticket.getVoucherNumber() + "_"
												+ ticket.getSubcontractor().getId() + "_"
												+ ticket.getCompanyLocation().getId());
										String subcquery = "select obj from SubcontractorInvoice obj where obj.voucherNumber='"
												+ ticket.getVoucherNumber()
												+ "' and obj.subContractorId="
												+ ticket.getSubcontractor().getId()
												+ " and obj.companyLocationId="
												+ ticket.getCompanyLocation().getId();
										List<SubcontractorInvoice> invoices = genericDAO.executeSimpleQuery(subcquery);
										if(!invoices.isEmpty() && invoices.size()>0){
										if (!StringUtils.isEmpty(invoices.get(0).getMiscelleneousCharges()))
											miscelleneousCharge += Double.parseDouble(invoices.get(0).getMiscelleneousCharges());
										}
									}
							}*/	 
						}						
						else{
							if(tickNonInvoced.equals("")){
								tickNonInvoced=String.valueOf(ticket.getId());
							}
							else{
								tickNonInvoced=tickNonInvoced+","+ticket.getId();
							}
						}
						
						
					}	;
						
						if(!StringUtils.isEmpty(tickids)){							
							String query1="select sum(obj.totAmt) from SubcontractorBilling obj where obj.ticket in ("+tickids+")";
							System.out.println("======>>>> Query1 "+query1);
							List<SubcontractorBilling> sumtotalamount=genericDAO.executeSimpleQuery(query1);
						
							if(sumtotalamount!=null && sumtotalamount.size()>0){							
								for(Object obj:sumtotalamount){									
									if(obj!=null)									
									subchargesForCompanyInv=Double.parseDouble(obj.toString());
									
								}						
							}
							
							
							String miscellQuery="select distinct obj.subcontractorId ,obj.miscelleneousCharges from SubcontractorBilling obj where obj.ticket in ("+tickids+")";
						
							List<SubcontractorBilling> misscellamount=genericDAO.executeSimpleQuery(miscellQuery);
							
							if(misscellamount!=null && misscellamount.size()>0){							
								for(Object obj:misscellamount){	
									Object[] objs=(Object[])obj;
									
									if(objs[1]!=null)
									{
										String misamt=objs[1].toString();
										String[] miscell=misamt.split(",");										
										for(int i=0;i<miscell.length;i++){
											
											miscelleneousCharge+=Double.parseDouble(miscell[i]);
										}
										
									}
									//subchargesForCompanyInv=Double.parseDouble(obj.toString());
								}						
							}
							
						}
						
						if(!StringUtils.isEmpty(tickNonInvoced)){						
							String query2="select sum(obj.totAmt) from SubcontractorBillingNew obj where obj.ticket in ("+tickNonInvoced+")";
							System.out.println("======>>>> Query2 "+query2);
							List<SubcontractorBillingNew> subtotalamount=genericDAO.executeSimpleQuery(query2);
						
							if(subtotalamount!=null && subtotalamount.size()>0){							
								for(Object obj:subtotalamount){									
									if(obj!=null)
									subchargesForCompanyNonInv=Double.parseDouble(obj.toString());
								}						
							}						
						}
						
						
						
						
						
						
						/*SubcontractorBilling billing = new SubcontractorBilling();						
						Map criterias = new HashMap();*/
						//if (ticket.getVoucherStatus() == 2) {
							//boolean cont=false;
							//double miscelleneousCharge=0.0;
							//SubcontractorBilling invoice = null;
							//criterias.clear();
							//criterias.put("ticket.id", ticket.getId());
							//invoice = genericDAO.getByCriteria(SubcontractorBilling.class,criterias);
							//if (invoice == null)
								//continue;

							//billing = invoice;

							
							//if (!StringUtils.isEmpty(ticket.getVoucherNumber())&& !StringUtils.isEmpty(ticket.getVoucherDate().toString())
								//	&& !StringUtils.isEmpty(ticket.getCompanyLocation().getName())) {
								//cont = str.contains(ticket.getVoucherNumber() + "_"
								//		+ ticket.getSubcontractor().getId() + "_"
									//	+ ticket.getCompanyLocation().getId());
								
								
								

								//if (!cont) {
									//str.add(ticket.getVoucherNumber() + "_"
									//		+ ticket.getSubcontractor().getId() + "_"
									//		+ ticket.getCompanyLocation().getId());
									//String subcquery = "select obj from SubcontractorInvoice obj where obj.voucherNumber='"
									//		+ ticket.getVoucherNumber()
									//		+ "' and obj.subContractorId="
									//		+ ticket.getSubcontractor().getId()
									//		+ " and obj.companyLocationId="
									//		+ ticket.getCompanyLocation().getId();
									//List<SubcontractorInvoice> invoices = genericDAO.executeSimpleQuery(subcquery);
									//if(!invoices.isEmpty()){
									//if (!StringUtils.isEmpty(invoices.get(0).getMiscelleneousCharges()))
									//	miscelleneousCharge += Double.parseDouble(invoices.get(0).getMiscelleneousCharges());
									//}
									//}
							//}
							
							/*if (companyName.getId().equals(billing.getCompanyLocationId())) {*/
								//System.out.println("\nsubcontractor invoiced ticket TotAmt()==>"+billing.getTotAmt()+"\n");
								//System.out.println("\nbilling.getOtherCharges()()==>"+billing.getOtherCharges()+"\n");
								//System.out.println("\nmiscelleneousCharge)==>"+miscelleneousCharge+"\n");
							//	subchargesForCompany += billing.getTotAmt()+billing.getOtherCharges()+miscelleneousCharge;
							//}
							//System.out.println("\nticketsForAcampanyOFsubcontractor  with VoucherStatus=2===>"+ subticketsForAcampany.size() + "\n");
							
							
						//} else {
							
							// if ticket is not invoice
							//double amount=ProcessSubcontractorAmount(ticket,billing);
							//subchargesForCompany += amount;		
							//criterias.clear();
							//criterias.put("ticket", ticket.getId());
							//SubcontractorBillingNew invoice = genericDAO.getByCriteria(SubcontractorBillingNew.class,criterias);
							
							//if (invoice == null)
								//continue;

							//subchargesForCompany +=invoice.getTotAmt();
							
							
							
						//}
					
					
					wrapper.setSubcontractorCharge(subchargesForCompanyInv+subchargesForCompanyNonInv+miscelleneousCharge);
					
			}
					// UP TO sUBCONTRACTOR CHARGE

					// TOLL TAG CHARGE
					//if(invoi){	
					
					 //*********************************************************************
					//*********************************************************************	
					/*
							System.out.println("Enetered here in toll new logic");
														
							StringBuffer TolltagCharge = new StringBuffer("");								
							TolltagCharge.append("select sum(obj.amount) from EzToll obj where obj.company='"
										+ companyName.getId()
										+ "'and obj.transactiondate in ("
										+ dateRanges
										+ ") and obj.plateNumber in ("
										+ unitIds
										+")");

						if (!StringUtils.isEmpty(terminal)) {
							TolltagCharge.append("and  obj.terminal in ("
									+ terminal + ")");
						}
						if (!StringUtils.isEmpty(truck)) {
							TolltagCharge.append("and  obj.plateNumber in ("
									+ truck + ")");
						}
						
						System.out.println("******* the toll query is "+TolltagCharge);
						
							
						List<EzToll> TollListforCompany = genericDAO.executeSimpleQuery(TolltagCharge.toString());
						System.out.println("******** list value is "+TollListforCompany);
						System.out.println("******** the list value is "+TollListforCompany.get(0));
				        if (TollListforCompany != null	&& TollListforCompany.size() > 0) {
				        	
					       for (Object tollObj : TollListforCompany) {
					    	  if(tollObj!=null)
								tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
					       }
				        }													
						wrapper.setTollTagAmount(tollNetValue);*/		
					//*********************************************************************
					//*********************************************************************			
							
				 /*else{	
					StringBuffer TolltagCharge = new StringBuffer("");
					TolltagCharge
							.append("select obj.company,sum(obj.amount) from EzToll obj where obj.company='"
									+ companyName.getId()
									+ "'and obj.transactiondate>='"
									+ dateRangeFrom
									+ "' and obj.transactiondate<= '"
									+ dateRangeTo + "'");

					if (!StringUtils.isEmpty(terminal)) {
						TolltagCharge.append("and  obj.terminal in ("
								+ terminal + ")");
					}
					if (!StringUtils.isEmpty(truck)) {
						
						String vehiclequery="select obj from Vehicle obj where obj.type=1 and obj.unit in ("
								+truck
								+")";
							
							System.out.println("******** the truck query is "+vehiclequery);
							
							List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
							String truckIds="";
							if(vehicleLists!=null && vehicleLists.size()>0){				
								int count=0;
							for(Vehicle vehicleObj : vehicleLists) {
								if(count==0){
									count++;
									truckIds=String.valueOf(vehicleObj.getId());
								}
								else{
								truckIds=truckIds+","+String.valueOf(vehicleObj.getId());
								}
							}
							}
							System.out.println("********* truck id is "+truckIds);
						
						TolltagCharge.append("and  obj.plateNumber in ("
								+ truckIds + ")");
					}

					TolltagCharge.append(" group by obj.company ");

					List<NetReportWrapper> TollListforCompany = genericDAO
							.executeSimpleQuery(TolltagCharge.toString());
					if (TollListforCompany != null
							&& TollListforCompany.size() > 0) {
						for (Object TollObjforTerminal : TollListforCompany) {
							Object[] tollobjArry = (Object[]) TollObjforTerminal;

							 Double tollchargesForCompany = Double
									.parseDouble(tollobjArry[1].toString());
							wrapper.setTollTagAmount(tollchargesForCompany);
						}
					}
					
					}*/
				//}
			    /*else{
						StringBuffer TolltagCharge = new StringBuffer("");
						TolltagCharge
								.append("select obj.company,sum(obj.amount) from EzToll obj where obj.company='"
										+ companyName.getId()
										+ "' "
										+ "and obj.transactiondate between '"
										+ oracleFormatter.format(startLoadDate)
										+ "' and '"
										+ oracleFormatter.format(endLoadDate)+"'");

						if (!StringUtils.isEmpty(terminal)) {
							TolltagCharge.append("and  obj.terminal in ("
									+ terminal + ")");
						}
						if (!StringUtils.isEmpty(truck)) {
							
							String vehiclequery="select obj from Vehicle obj where obj.type=1 and obj.unit in ("
									+truck
									+")";
								
								System.out.println("******** the truck query is "+vehiclequery);
								
								List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
								String truckIds="";
								if(vehicleLists!=null && vehicleLists.size()>0){				
									int count=0;
								for(Vehicle vehicleObj : vehicleLists) {
									if(count==0){
										count++;
										truckIds=String.valueOf(vehicleObj.getId());
									}
									else{
									truckIds=truckIds+","+String.valueOf(vehicleObj.getId());
									}
								}
								}
								System.out.println("********* truck id is "+truckIds);
							
							
							TolltagCharge.append("and  obj.plateNumber in ("
									+ truckIds + ")");
						}

						TolltagCharge.append(" group by obj.company ");

						List<NetReportWrapper> TollListforCompany = genericDAO
								.executeSimpleQuery(TolltagCharge.toString());
						if (TollListforCompany != null
								&& TollListforCompany.size() > 0) {
							for (Object TollObjforTerminal : TollListforCompany) {
								Object[] tollobjArry = (Object[]) TollObjforTerminal;

								 Double tollchargesForCompany = Double
										.parseDouble(tollobjArry[1].toString());
								wrapper.setTollTagAmount(tollchargesForCompany);
							}
						}						
						
					}*/
					// UP TO TOLL TAG CHARGE

					// else ticket is not invoice

					/*
					 * System.out.println("\nCompany===>"+companyName.getName()+"\n"
					 * ); System.out.println("\nrevenue===>"+revenue+"\n");
					 */
				//}// for(Ticket ticket:tickets)
				
				netamount = revenue-(fuelNetValue + subchargesForCompanyInv+subchargesForCompanyNonInv +miscelleneousCharge+ tollNetValue);
				wrapper.setCompany(l.getName());
				wrapper.setSumTotal(revenue);
				wrapper.setNetAmount(netamount);
				wrapperlist.add(wrapper);
			}
			}// for(int no=0;no<ticketsdestinct.size();no++)
		}// if(CompanyReport!=null)

		
		
		
		
		// For terminal Report
		if (TerminalReport != null) {
			String disting = "select distinct obj.terminal from Ticket obj where obj.id in ("+ ticketIds + ") order by obj.terminal.name";
			List<Location> ticketsdestinct = genericDAO.executeSimpleQuery(disting);
			System.out.println("ticket size is "+ticketIds.length());
			System.out.println("ditinct ticket size is "+ticketsdestinct.size());
			
			Date startLoadDate=null;
			Date endLoadDate=null;			

			/* for(int no=0;no<ticketsdestinct.size();no++){ */
			for (Location l : ticketsdestinct) {
				//Location terminalName = genericDAO.getById(Location.class,l.getId());
				String ticketsForAlocation = "select obj from Ticket obj where obj.terminal="
						+ l.getId()
						+ " and obj.id in ("
						+ ticketIds
						+ ") order by vehicle asc, companyLocation asc, loadDate asc, unloadDate desc";
				List<Ticket> ticketsForAterminal = genericDAO.executeSimpleQuery(ticketsForAlocation);
				System.out.println("\nticketsForAlocation===>"+ ticketsForAlocation + "\n");
				System.out.println("\nticketsForAterminal.size()===>"+ ticketsForAterminal.size() + "\n");
				
				NetReportWrapper wrapper = new NetReportWrapper();
				Double fuelchargesForTerminal = 0.0;
				Double subchargesForTerminal = 0.0;
				Double tollchargesForTerminal = 0.0;
				Double fuelNetValue=0.0;
				Double tollNetValue=0.0;
				Double subchargesForCompanyInv = 0.0;
				Double subchargesForCompanyNonInv = 0.0;
				Double miscelleneousCharge=0.0;
				Double netamount = 0.0;
				String dateRanges="";
				String unitIds="";
				HashSet<String> dates = null;
				String tempVehicle = "";
				String tempCompany = "";
				Date tempLoadDate = null;
				Date tempUnloadDate = null;
				HashSet<String> tempcompany=null;
				HashSet<String> tempDriver=null;
				double revenue = 0.0;
				StringBuffer ticketsForAlocationid=new StringBuffer("");				
				Map map = new HashMap();				
				for (Ticket ticket : ticketsForAterminal) {					
					
					String trckIDs = "";
					Vehicle vehicle = genericDAO.getById(Vehicle.class,ticket.getVehicle().getId());
					map.clear();
					map.put("unit",vehicle.getUnit());
					
					List<Vehicle> trucks = genericDAO.findByCriteria(Vehicle.class,map);
					
					if(trucks.size() > 0 && trucks!=null ){						
						for(Vehicle vehs: trucks ){							
						  if(trckIDs.equals("")){
							  trckIDs = vehs.getId().toString();
						  }
						  else{
							  trckIDs = trckIDs+","+vehs.getId();
						  }  
						}
					}
					
					
					
					
					ticketsForAlocationid.append(ticket.getId());
					ticketsForAlocationid.append(",");	
					
					StringBuffer fuellogQuery = new StringBuffer("");	
					StringBuffer tollquery = new StringBuffer("");
					if(!tempVehicle.equals(ticket.getVehicle().getId().toString()) || !tempCompany.equals(ticket.getCompanyLocation().getId().toString())   ){				
						
						
						
						 dates = new HashSet<String>();
						 tempVehicle = ticket.getVehicle().getId().toString();
						 tempCompany = ticket.getCompanyLocation().getId().toString();
						 tempLoadDate = ticket.getLoadDate();
						 tempUnloadDate = ticket.getUnloadDate();
						 tempcompany = new HashSet<String>();
						 tempcompany.add(ticket.getCompanyLocation().getId().toString());
						 tempDriver = new HashSet<String>();
						 tempDriver.add( ticket.getDriver().getId().toString());
						 int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
						 for (int i=0; i < days; i++) {
							    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
							    dates.add(df.format(d.toDate()));
							    
						 }
						 dates.add(ticket.getLoadDate().toString());
						 dates.add(ticket.getUnloadDate().toString());
						 
						 String transferDateFrom = mysqldf.format(ticket.getLoadDate());
						 String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
					
						 fuellogQuery.append("select sum(obj.amount) from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
					//if(typeKey.equalsIgnoreCase("company"))
					//{
							fuellogQuery.append(" and obj.company in (").append(ticket.getCompanyLocation().getId()).append(")");
							fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
							fuellogQuery.append(" and obj.terminal='").append(ticket.getTerminal().getId()).append("'");
							//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
					//}
							
							
							List<FuelLog> fuellogListforCompany = genericDAO
							.executeSimpleQuery(fuellogQuery.toString());
							
							if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
								for(Object fuelobj:fuellogListforCompany){							
									if(fuelobj!=null)	
										fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
								}				
							}
							
							
							tollquery.append("select sum(obj.amount) from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
									+ transferDateTo
									+ " 23:59:59'");
						/*if(typeKey.equalsIgnoreCase("company"))
						{*/
							tollquery.append(" and obj.company in (").append(ticket.getCompanyLocation().getId()).append(")");
							tollquery.append(" and obj.plateNumber in (").append(trckIDs).append(")");
							tollquery.append(" and obj.terminal='").append(ticket.getTerminal().getId()).append("'");
						//}		
							
							List<EzToll> TollListforCompany = genericDAO.executeSimpleQuery(tollquery.toString());
							
							if (TollListforCompany != null	&& TollListforCompany.size() > 0) {	        	
								for (Object tollObj : TollListforCompany) {
									if(tollObj!=null)
										tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
								}
							}
							
							
				}
				else{
					
					if((ticket.getLoadDate().after(tempLoadDate) || ticket.getLoadDate().equals(tempLoadDate)) && (ticket.getUnloadDate().before(tempUnloadDate)|| ticket.getUnloadDate().equals(tempUnloadDate))){
						
						//if((!tempcompany.contains(ticket.getCompanyLocation().getId().toString()))){
							/*
						
							System.out.println("*************** entered in else'second if ");
							String transferDateFrom = mysqldf.format(ticket.getLoadDate());
							 String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
						 tempcompany.add(ticket.getCompanyLocation().getId().toString());
						 tempDriver.add(ticket.getDriver().getId().toString());
							 fuellogQuery.append("select sum(obj.amount) from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
									+ transferDateTo
									+ " 23:59:59'");
						
								fuellogQuery.append(" and obj.company in (").append(ticket.getCompanyLocation().getId()).append(")");
								fuellogQuery.append(" and obj.unit in (").append(ticket.getVehicle().getId()).append(")");
								fuellogQuery.append(" and obj.terminal='").append(ticket.getTerminal().getId()).append("'");
								//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
						
								List<FuelLog> fuellogListforCompany = genericDAO
								.executeSimpleQuery(fuellogQuery.toString());
								
								if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
									for(Object fuelobj:fuellogListforCompany){							
										if(fuelobj!=null)	
											fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
									}				
								}
								
								
								tollquery.append("select sum(obj.amount) from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
										+ transferDateTo
										+ " 23:59:59'");
							if(typeKey.equalsIgnoreCase("company"))
							{
								tollquery.append(" and obj.company in (").append(ticket.getCompanyLocation().getId()).append(")");
								tollquery.append(" and obj.plateNumber in (").append(ticket.getVehicle().getId()).append(")");
								tollquery.append(" and obj.terminal='").append(ticket.getTerminal().getId()).append("'");
							//}		
								
								List<EzToll> TollListforCompany = genericDAO.executeSimpleQuery(tollquery.toString());
								
								if (TollListforCompany != null	&& TollListforCompany.size() > 0) {	        	
									for (Object tollObj : TollListforCompany) {
										if(tollObj!=null)
											tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
									}
								}
							
							
						
							
						*/
							//}
						/*else if(!tempDriver.contains(ticket.getDriver().getId().toString())) {							
							System.out.println("*************** entered in else'if first if ");
							 tempcompany.add(ticket.getCompanyLocation().getId().toString());
							 tempDriver.add(ticket.getDriver().getId().toString());
							
							String transferDateFrom = mysqldf.format(ticket.getLoadDate());
							 String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
						
							 fuellogQuery.append("select sum(obj.amount) from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
									+ transferDateTo
									+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company in (").append(ticket.getCompanyLocation().getId()).append(")");
								fuellogQuery.append(" and obj.unit in (").append(ticket.getVehicle().getId()).append(")");
								fuellogQuery.append(" and obj.terminal='").append(ticket.getTerminal().getId()).append("'");
								fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
						//}
								List<FuelLog> fuellogListforCompany = genericDAO
								.executeSimpleQuery(fuellogQuery.toString());
								
								if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
									for(Object fuelobj:fuellogListforCompany){							
										if(fuelobj!=null)	
											fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
									}				
								}
							
						}*/
						
					}
					else{
					
						Date tempDateVar =null;
						boolean valueset = false;
						tempLoadDate = 	ticket.getLoadDate();
						tempUnloadDate = ticket.getUnloadDate();
						
						tempcompany.add(ticket.getCompanyLocation().getId().toString());
						tempVehicle = ticket.getVehicle().getId().toString();
						
						 if(dates.contains(ticket.getLoadDate().toString())){
							 //do nothing	
							
						 }
						 else{
							
						   	if(!valueset){					   		
						    	valueset=true;					  
								tempDateVar = ticket.getLoadDate();
							}					   	
						    	dates.add(ticket.getLoadDate().toString());
						 } 
						 
						int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
						 for (int i=0; i < days; i++) {
							    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
							   
							    if(dates.contains(df.format(d.toDate()))){
							      //do nothing
							    	
							    }
							    else{
							    	
							    	if(!valueset){
							    	valueset=true;						    	
							    	tempDateVar = d.toDate();
							    }
							    	dates.add(df.format(d.toDate()));
							    }
						 }
						 //dates.add(new LocalDate(ticket.getLoadDate()));
						
						if(tempDateVar!=null){
							
							String transferDateFrom = mysqldf.format(tempDateVar);					
							String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
						
							 fuellogQuery.append("select sum(obj.amount) from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company in (").append(ticket.getCompanyLocation().getId()).append(")");
								fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
								fuellogQuery.append(" and obj.terminal='").append(ticket.getTerminal().getId()).append("'");
								//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
								List<FuelLog> fuellogListforCompany = genericDAO
								.executeSimpleQuery(fuellogQuery.toString());
								
								if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
									for(Object fuelobj:fuellogListforCompany){							
										if(fuelobj!=null)	
											fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
									}				
								}
								
								
								
								tollquery.append("select sum(obj.amount) from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
										+ transferDateTo
										+ " 23:59:59'");
							/*if(typeKey.equalsIgnoreCase("company"))
							{*/
								tollquery.append(" and obj.company in (").append(ticket.getCompanyLocation().getId()).append(")");
								tollquery.append(" and obj.plateNumber in (").append(trckIDs).append(")");
								tollquery.append(" and obj.terminal='").append(ticket.getTerminal().getId()).append("'");
							//}		
								
								List<EzToll> TollListforCompany = genericDAO.executeSimpleQuery(tollquery.toString());
								
								if (TollListforCompany != null	&& TollListforCompany.size() > 0) {	        	
									for (Object tollObj : TollListforCompany) {
										if(tollObj!=null)
											tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
									}
								}
								
						}						
						else {
						  if(dates.contains(ticket.getUnloadDate().toString())){
							 
						  }
						  else{
							 
							  dates.add(ticket.getUnloadDate().toString());
							  String transferDateFrom = mysqldf.format(ticket.getUnloadDate());					
							  String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
							
							  fuellogQuery.append("select sum(obj.amount) from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company in (").append(ticket.getCompanyLocation().getId()).append(")");
								fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
								fuellogQuery.append(" and obj.terminal='").append(ticket.getTerminal().getId()).append("'");
								//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
								List<FuelLog> fuellogListforCompany = genericDAO
								.executeSimpleQuery(fuellogQuery.toString());
								
								if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
									for(Object fuelobj:fuellogListforCompany){							
										if(fuelobj!=null)	
											fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
									}				
								}
								
								
								tollquery.append("select sum(obj.amount) from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
										+ transferDateTo
										+ " 23:59:59'");
							/*if(typeKey.equalsIgnoreCase("company"))
							{*/
								tollquery.append(" and obj.company in (").append(ticket.getCompanyLocation().getId()).append(")");
								tollquery.append(" and obj.plateNumber in (").append(trckIDs).append(")");
								tollquery.append(" and obj.terminal='").append(ticket.getTerminal().getId()).append("'");
							//}		
								
								List<EzToll> TollListforCompany = genericDAO.executeSimpleQuery(tollquery.toString());
								
								if (TollListforCompany != null	&& TollListforCompany.size() > 0) {	        	
									for (Object tollObj : TollListforCompany) {
										if(tollObj!=null)
											tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
									}
								}
								
						  }
						}
					}						
				}
							
				
					
					
				}
		
				
				wrapper.setFuellogCharge(fuelNetValue);
				wrapper.setTollTagAmount(tollNetValue);	
				
				//********************************************************
				/*if(dates.size()>0 && dates!=null){
					for(LocalDate obj:dates){						
						if(dateRanges.equals("")){
							dateRanges="'"+String.valueOf(obj)+" 00:00:00'";
						}
						else{
							dateRanges=dateRanges+",'"+String.valueOf(obj)+" 00:00:00'";
						}					
						System.out.println("***********");
						System.out.println("*********** the date is "+obj);
						System.out.println("***********");
					}
					System.out.println("******* the dateRange value is "+dateRanges);
				}
				System.out.println("******** unit id is "+unitIds);*/
				//*****************************************************************
				/*if(ticketsForAterminal.size()>0){
					int lstindex=ticketsForAterminal.size()-1;
					startLoadDate=ticketsForAterminal.get(0).getLoadDate();
					endLoadDate=ticketsForAterminal.get(lstindex).getUnloadDate();	
					System.out.println("****** the start date is "+startLoadDate);
					System.out.println("****** the end date is "+endLoadDate);
					System.out.println("****** othr value is terminal "+terminalName.getId());
				}*/
				
				
				
				if(ticketsForAlocationid.length()>0){
					int t=ticketsForAlocationid.lastIndexOf(",");
					ticketsForAlocationid.deleteCharAt(t);
					
					String query ="select sum(obj.totAmt) from Billing_New obj where obj.ticket in ("+ticketsForAlocationid+")";
					List<Billing_New> billinglist =genericDAO.executeSimpleQuery(query);
					if(!billinglist.isEmpty()&&billinglist.size()>0){
						for(Object obj:billinglist){							
							if(obj!=null){
							revenue=Double.parseDouble(obj.toString());
							}
						}
					}					
				}
				//Map<String, List<BillingRate>> billingMap = new HashMap<String, List<BillingRate>>();
				/*for (Ticket ticket : ticketsForAterminal) {
					Billing billing = new Billing();

					Map criterias = new HashMap();
					if (ticket.getTicketStatus() == 2) {
						Billing invoice = null;
						criterias.put("ticket.id", ticket.getId());
						invoice = genericDAO.getByCriteria(Billing.class,
								criterias);
						if (invoice == null)
							continue;

						billing = invoice;

						if (terminalName.getName()
								.equals(billing.getTerminal())) {
							revenue += billing.getTotAmt();
						}
					} 
					else {
						double amount= ProcessAmount(ticket,billing);
						
						System.out.println("\nTerminal report amount===>" + amount + "\n");
						revenue += amount;
					}
				}*/
					// FOR FUELLOG
				
				//*******************************************************************
				//*******************************************************************
					/*System.out.println("Enetered here in new logic");
					
					System.out.println("inside ticket for loop ok ok");
					StringBuffer fuellogQuery = new StringBuffer("");						
					fuellogQuery
					.append("select sum(obj.amount) from FuelLog obj where obj.terminal='"
								+ terminalName.getId()
								+ "' "
								+ "and obj.transactiondate in ("
								+ dateRanges
								+ ") and obj.unit in ("
								+unitIds
								+")");
				if (!StringUtils.isEmpty(company)) {
					fuellogQuery.append("and  obj.company in (" + company
							+ ")");
				}
				if (!StringUtils.isEmpty(driver)) {
					fuellogQuery.append("and  obj.driversid in (" + driver
							+ ")");
				}
				if (!StringUtils.isEmpty(truck)) {
					fuellogQuery.append("and  obj.unit in (" + truck + ")");
				}

				
				System.out.println("********* The query is ====> "+fuellogQuery.toString());

				List<FuelLog> fuellogListforTerminal = genericDAO
						.executeSimpleQuery(fuellogQuery.toString());
						
				if (fuellogListforTerminal != null && fuellogListforTerminal.size() > 0) {
					
					System.out.println("inside fuel if ok ok"+fuellogListforTerminal.size());
					for(Object fuelobj:fuellogListforTerminal){							
						if(fuelobj!=null)	
						fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
						}												
				}				    
				System.out.println("****** the net fuel valyue is "+fuelNetValue);
				wrapper.setFuellogCharge(fuelNetValue);*/
				//*******************************************************************
				//*******************************************************************	
					
					
					
					/*
					StringBuffer fuellogQuery = new StringBuffer("");
					fuellogQuery
							.append("select obj.terminal,sum(obj.amount) from FuelLog obj where obj.terminal='"
									+ terminalName.getId()
									+ "' "
									+ "and obj.transactiondate>='"
									+ dateRangeFrom
									+ "' and obj.transactiondate<= '"
									+ dateRangeTo + "'");
					if (!StringUtils.isEmpty(company)) {
						fuellogQuery.append("and  obj.company in (" + company
								+ ")");
					}
					if (!StringUtils.isEmpty(driver)) {
						fuellogQuery.append("and  obj.driversid in (" + driver
								+ ")");
					}
					if (!StringUtils.isEmpty(truck)) {
						
						String vehiclequery="select obj from Vehicle obj where obj.type=1 and obj.unit in ("
								+truck
								+")";
							
							System.out.println("******** the truck query is "+vehiclequery);
							
							List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
							String truckIds="";
							if(vehicleLists!=null && vehicleLists.size()>0){				
								int count=0;
							for(Vehicle vehicleObj : vehicleLists) {
								if(count==0){
									count++;
									truckIds=String.valueOf(vehicleObj.getId());
								}
								else{
								truckIds=truckIds+","+String.valueOf(vehicleObj.getId());
								}
							}
							}
							System.out.println("********* truck id is "+truckIds);
						
						fuellogQuery.append("and  obj.unit in (" + truckIds + ")");
					}

					fuellogQuery.append(" group by obj.terminal ");

					List<NetReportWrapper> fuellogListforCompany = genericDAO
							.executeSimpleQuery(fuellogQuery.toString());
					if (fuellogListforCompany != null
							&& fuellogListforCompany.size() > 0) {
						for (Object fuellogObj1 : fuellogListforCompany) {
							Object[] fuelobjArry = (Object[]) fuellogObj1;
							 Double fuelchargesForTerminal = Double
									.parseDouble(fuelobjArry[1].toString());
							wrapper.setFuellogCharge(fuelchargesForTerminal);
						}
					}
				*/
				/*else{

					StringBuffer fuellogQuery = new StringBuffer("");
					fuellogQuery
							.append("select obj.terminal,sum(obj.amount) from FuelLog obj where obj.terminal='"
									+ terminalName.getId()
									+ "' "
									+ "and obj.transactiondate between '"
									+ oracleFormatter.format(startLoadDate)
									+ "' and '"
									+ oracleFormatter.format(endLoadDate)+"'");
					if (!StringUtils.isEmpty(company)) {
						fuellogQuery.append("and  obj.company in (" + company
								+ ")");
					}
					if (!StringUtils.isEmpty(driver)) {
						fuellogQuery.append("and  obj.driversid in (" + driver
								+ ")");
					}
					if (!StringUtils.isEmpty(truck)) {
						
						String vehiclequery="select obj from Vehicle obj where obj.type=1 and obj.unit in ("
								+truck
								+")";
							
							System.out.println("******** the truck query is "+vehiclequery);
							
							List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
							String truckIds="";
							if(vehicleLists!=null && vehicleLists.size()>0){				
								int count=0;
							for(Vehicle vehicleObj : vehicleLists) {
								if(count==0){
									count++;
									truckIds=String.valueOf(vehicleObj.getId());
								}
								else{
								truckIds=truckIds+","+String.valueOf(vehicleObj.getId());
								}
							}
							}
							System.out.println("********* truck id is "+truckIds);
						
						
						fuellogQuery.append("and  obj.unit in (" + truckIds + ")");
					}

					fuellogQuery.append(" group by obj.terminal ");

					List<NetReportWrapper> fuellogListforCompany = genericDAO
							.executeSimpleQuery(fuellogQuery.toString());
					if (fuellogListforCompany != null
							&& fuellogListforCompany.size() > 0) {
						for (Object fuellogObj1 : fuellogListforCompany) {
							Object[] fuelobjArry = (Object[]) fuellogObj1;
							 Double fuelchargesForTerminal = Double
									.parseDouble(fuelobjArry[1].toString());
							wrapper.setFuellogCharge(fuelchargesForTerminal);
						}
					}
				
					
					
				}*/
					// UP TO FOR FUELLOG

					// FOR sUBCONTRACTOR CHARGE
					if(ticketIds.length()>0&&subticketIds.length()>0){
						
						String SubticketsForATerminal = "select obj from Ticket obj where obj.terminal='"
							+ l.getId()+"'"
							+ " and obj.id in ("
							+ subticketIds
							+ ")";
					List<Ticket> ticketsForterminal = genericDAO.executeSimpleQuery(SubticketsForATerminal);
					System.out.println("\nticketsForAcampanyOFsubcontractor.size()===>"+ ticketsForterminal.size() + "\n");					
				
					
					String tickids="";
					String tickNonInvoced="";
					List<String> str = new ArrayList<String>();
					
					for (Ticket ticket : ticketsForterminal) {				
						
						if (ticket.getVoucherStatus() == 2) {
							if(tickids.equals("")){
								tickids=String.valueOf(ticket.getId());
							}
							else{
								tickids=tickids+","+String.valueOf(ticket.getId());
							}						 
						}						
						else{
							if(tickNonInvoced.equals("")){
								tickNonInvoced=String.valueOf(ticket.getId());
							}
							else{
								tickNonInvoced=tickNonInvoced+","+ticket.getId();
							}
						}
						
						
					}	
						
						
						if(!StringUtils.isEmpty(tickids)){							
							String query1="select sum(obj.totAmt) from SubcontractorBilling obj where obj.ticket in ("+tickids+")";
							System.out.println("======>>>> Query1 "+query1);
							List<SubcontractorBilling> sumtotalamount=genericDAO.executeSimpleQuery(query1);
						
							if(sumtotalamount!=null && sumtotalamount.size()>0){							
								for(Object obj:sumtotalamount){									
									if(obj!=null)									
									subchargesForCompanyInv=Double.parseDouble(obj.toString());
									
								}						
							}
							
							
							String miscellQuery="select distinct obj.subcontractorId ,obj.miscelleneousCharges from SubcontractorBilling obj where obj.ticket in ("+tickids+")";
							System.out.println("********** miscelleneous query "+miscellQuery);
							List<SubcontractorBilling> misscellamount=genericDAO.executeSimpleQuery(miscellQuery);
							
							if(misscellamount!=null && misscellamount.size()>0){							
								for(Object obj:misscellamount){	
									Object[] objs=(Object[])obj;
									
									if(objs[1]!=null)
									{
										String misamt=objs[1].toString();
										String[] miscell=misamt.split(",");										
										for(int i=0;i<miscell.length;i++){
											
											miscelleneousCharge+=Double.parseDouble(miscell[i]);
										}
										
									}
									//subchargesForCompanyInv=Double.parseDouble(obj.toString());
								}						
							}							
						}
						
						if(!StringUtils.isEmpty(tickNonInvoced)){						
							String query2="select sum(obj.totAmt) from SubcontractorBillingNew obj where obj.ticket in ("+tickNonInvoced+")";
							System.out.println("======>>>> Query2 "+query2);
							List<SubcontractorBillingNew> subtotalamount=genericDAO.executeSimpleQuery(query2);
						
							if(subtotalamount!=null && subtotalamount.size()>0){							
								for(Object obj:subtotalamount){									
									if(obj!=null)
									subchargesForCompanyNonInv=Double.parseDouble(obj.toString());
								}						
							}						
						}
						
						System.out.println("\nsubchargesForCompany=====>"+(subchargesForCompanyInv+subchargesForCompanyNonInv+miscelleneousCharge)+"\n");
						wrapper.setSubcontractorCharge(subchargesForCompanyInv+subchargesForCompanyNonInv+miscelleneousCharge);
						System.out.println("***** the get of wrapper is "+wrapper.getSubcontractorCharge());
						
						
						
						/*
						System.out.println("\nSubcontractor charge for terminal start\n");
					String SubticketsForATerminal = "select obj from Ticket obj where obj.terminal='"
							+ terminalName.getId()+"'"
							+ " and obj.id in ("
							+ subticketIds
							+ ")";
					List<Ticket> ticketsForterminal = genericDAO.executeSimpleQuery(SubticketsForATerminal);
					System.out.println("\nticketsForAcampanyOFsubcontractor.size()===>"+ ticketsForterminal.size() + "\n");
					
					
					List<String> str = new ArrayList<String>();
					for (Ticket ticket : ticketsForterminal) {
						SubcontractorBilling billing = new SubcontractorBilling();
                        
						Map criterias = new HashMap();
						if (ticket.getVoucherStatus() == 2) {
							boolean cont=false;
							double miscelleneousCharge=0.0;
							SubcontractorBilling invoice = null;
							criterias.put("ticket.id", ticket.getId());
							invoice = genericDAO.getByCriteria(SubcontractorBilling.class,criterias);
							if (invoice == null)
								continue;

							billing = invoice;

							
							if (!StringUtils.isEmpty(ticket.getVoucherNumber())&& !StringUtils.isEmpty(ticket.getVoucherDate().toString())
									&& !StringUtils.isEmpty(ticket.getCompanyLocation().getName())) 
							{
								cont = str.contains(ticket.getVoucherNumber() + "_"
										+ ticket.getSubcontractor().getId() + "_"
										+ ticket.getCompanyLocation().getId());

								if (!cont) {
									str.add(ticket.getVoucherNumber() + "_"
											+ ticket.getSubcontractor().getId() + "_"
											+ ticket.getCompanyLocation().getId());
									String subcquery = "select obj from SubcontractorInvoice obj where obj.voucherNumber='"
											+ ticket.getVoucherNumber()
											+ "' and obj.subContractorId="
											+ ticket.getSubcontractor().getId()
											+ " and obj.companyLocationId="
											+ ticket.getCompanyLocation().getId();
									List<SubcontractorInvoice> invoices = genericDAO.executeSimpleQuery(subcquery);
									if(!invoices.isEmpty()&&invoices.size()>0){
									if (!StringUtils.isEmpty(invoices.get(0).getMiscelleneousCharges()))
										miscelleneousCharge += Double.parseDouble(invoices.get(0).getMiscelleneousCharges());
									}
								}
							}
							
							if (companyName.getId().equals(billing.getCompanyLocationId())) {
								System.out.println("\nsubcontractor invoiced ticket TotAmt()  for terminal==>"+billing.getTotAmt()+"\n");
								System.out.println("\nbilling.getOtherCharges()for terminal==>"+billing.getOtherCharges()+"\n");
								System.out.println("\nmiscelleneousCharge)=for terminal=>"+miscelleneousCharge+"\n");
								subchargesForTerminal += billing.getTotAmt()+billing.getOtherCharges()+miscelleneousCharge;
							//}
							System.out.println("\nticketsForTerminalOFsubcontractor  with VoucherStatus=2===>\n");
							
							
						} else {
							// if ticket is not invoice
							double amount=ProcessSubcontractorAmount(ticket,billing);
							subchargesForTerminal += amount;
							System.out.println("\nsubchargesForTerminal=====>"+subchargesForTerminal+"\n");
						}
					}
					
					wrapper.setSubcontractorCharge(subchargesForTerminal);
					System.out.println("\nSubcontractor charge for terminal End\n");
					*/}
					// UP TO sUBCONTRACTOR CHARGE
					
					// TOLL TAG CHARGE
				
					//*******************************************************************
					//*******************************************************************
					/*System.out.println("Enetered here in toll new logic");
					
					StringBuffer TolltagCharge = new StringBuffer("");								
					TolltagCharge
					.append("select sum(obj.amount) from EzToll obj where obj.terminal='"
								+ terminalName.getId()
								+ "' and obj.transactiondate in ("
								+ dateRanges
								+ ") and obj.plateNumber in ("
								+ unitIds
								+")");

					if (!StringUtils.isEmpty(company)) {
						TolltagCharge.append("and  obj.company in ("
								+ company + ")");
					}
				if (!StringUtils.isEmpty(truck)) {
					TolltagCharge.append("and  obj.plateNumber in ("
							+ truck + ")");
				}
				
				System.out.println("******* the toll query is "+TolltagCharge);
				
					
				List<EzToll> TollListforTerminal = genericDAO.executeSimpleQuery(TolltagCharge.toString());
				System.out.println("******** list value is "+TollListforTerminal);
				System.out.println("******** the list value is "+TollListforTerminal.get(0));
		        if (TollListforTerminal != null	&& TollListforTerminal.size() > 0) {		        	
			       for (Object tollObj : TollListforTerminal) {
			    	  if(tollObj!=null)
						tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
			       }
		        }													
				wrapper.setTollTagAmount(tollNetValue);	*/
				//*******************************************************************
				//*******************************************************************
					
					/*
					StringBuffer TolltagCharge = new StringBuffer("");
					TolltagCharge
							.append("select obj.terminal,sum(obj.amount) from EzToll obj where obj.terminal='"
									+ terminalName.getId()
									+ "'and obj.transactiondate>='"
									+ dateRangeFrom
									+ "' and obj.transactiondate<= '"
									+ dateRangeTo + "'");

					if (!StringUtils.isEmpty(company)) {
						TolltagCharge.append("and  obj.company in ("
								+ company + ")");
					}
					if (!StringUtils.isEmpty(truck)) {
						
						String vehiclequery="select obj from Vehicle obj where obj.type=1 and obj.unit in ("
								+truck
								+")";
							
							System.out.println("******** the truck query is "+vehiclequery);
							
							List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
							String truckIds="";
							if(vehicleLists!=null && vehicleLists.size()>0){				
								int count=0;
							for(Vehicle vehicleObj : vehicleLists) {
								if(count==0){
									count++;
									truckIds=String.valueOf(vehicleObj.getId());
								}
								else{
								truckIds=truckIds+","+String.valueOf(vehicleObj.getId());
								}
							}
							}
							System.out.println("********* truck id is "+truckIds);
						
						
						TolltagCharge.append("and  obj.plateNumber in ("
								+ truckIds + ")");
					}

					TolltagCharge.append(" group by obj.terminal ");

					List<NetReportWrapper> TollListforterminal = genericDAO
							.executeSimpleQuery(TolltagCharge.toString());
					if (TollListforterminal != null
							&& TollListforterminal.size() > 0) {
						for (Object TollObjforTerminal : TollListforterminal) {
							Object[] tollobjArry = (Object[]) TollObjforTerminal;

							 Double tollchargesForTerminal = Double
									.parseDouble(tollobjArry[1].toString());
							wrapper.setTollTagAmount(tollchargesForTerminal);
						}
					}
				*/
				
				/*else{

					StringBuffer TolltagCharge = new StringBuffer("");
					TolltagCharge
							.append("select obj.terminal,sum(obj.amount) from EzToll obj where obj.terminal='"
									+ terminalName.getId()
									+ "' "
									+ "and obj.transactiondate between '"
									+ oracleFormatter.format(startLoadDate)
									+ "' and '"
									+ oracleFormatter.format(endLoadDate)+"'");

					if (!StringUtils.isEmpty(company)) {
						TolltagCharge.append("and  obj.company in ("
								+ company + ")");
					}
					if (!StringUtils.isEmpty(truck)) {
						
						String vehiclequery="select obj from Vehicle obj where obj.type=1 and obj.unit in ("
								+truck
								+")";
							
							System.out.println("******** the truck query is "+vehiclequery);
							
							List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
							String truckIds="";
							if(vehicleLists!=null && vehicleLists.size()>0){				
								int count=0;
							for(Vehicle vehicleObj : vehicleLists) {
								if(count==0){
									count++;
									truckIds=String.valueOf(vehicleObj.getId());
								}
								else{
								truckIds=truckIds+","+String.valueOf(vehicleObj.getId());
								}
							}
							}
							System.out.println("********* truck id is "+truckIds);
						
						
						TolltagCharge.append("and  obj.plateNumber in ("
								+ truckIds + ")");
					}

					TolltagCharge.append(" group by obj.terminal ");

					List<NetReportWrapper> TollListforterminal = genericDAO
							.executeSimpleQuery(TolltagCharge.toString());
					if (TollListforterminal != null
							&& TollListforterminal.size() > 0) {
						for (Object TollObjforTerminal : TollListforterminal) {
							Object[] tollobjArry = (Object[]) TollObjforTerminal;

							 Double tollchargesForTerminal = Double
									.parseDouble(tollobjArry[1].toString());
							wrapper.setTollTagAmount(tollchargesForTerminal);
						}
					}					
					
				}*/
				
				
					// UP TO TOLL TAG CHARGE

					// else ticket is not invoice

					/*
					 * System.out.println("\nCompany===>"+companyName.getName()+"\n"
					 * ); System.out.println("\nrevenue===>"+revenue+"\n");
					 */
				//}// for(Ticket ticket:tickets)
				System.out.println("\nterminalName===>"
						+ l.getName() + "\n");
				System.out.println("\nrevenue===>" + revenue + "\n");
				netamount = revenue- (fuelNetValue + subchargesForCompanyInv+subchargesForCompanyNonInv +miscelleneousCharge+ tollNetValue);
				wrapper.setTerminal(l.getName());
				wrapper.setSumTotal(revenue);
				wrapper.setNetAmount(netamount);
				wrapperlist.add(wrapper);
			}// for(int no=0;no<ticketsdestinct.size();no++)
		}// if(TerminalReport!=null){
		
		
		
		// For Truck Report
		if (TruckReport != null) {
			String disting = "select distinct obj.vehicle from Ticket obj where obj.id in ("+ ticketIds + ") order by obj.vehicle.unit";
			List<Vehicle> ticketsdestinct = genericDAO.executeSimpleQuery(disting);
			ticketsdestinct.size();
			Date startLoadDate=null;
			Date endLoadDate=null;
			/* for(int no=0;no<ticketsdestinct.size();no++){ */
		    String vehid="";
			
			
			for (Vehicle v : ticketsdestinct) {
				if(StringUtils.isEmpty(vehid)){
					vehid=v.getUnit().toString();  //  getId().toString();
				}
				else{
				    vehid=vehid+","+v.getUnit();
				}
				//Vehicle vehicleName = genericDAO.getById(Vehicle.class,v.getId());
				String ticketsForAVehicle = "select obj from Ticket obj where obj.vehicle="
						+ v.getId()
						+ " and obj.id in ("
						+ ticketIds
						+ ") order by companyLocation asc ,terminal asc,loadDate asc, unloadDate desc";
				List<Ticket> ticketsForAvehicle = genericDAO.executeSimpleQuery(ticketsForAVehicle);
				System.out.println("\nticketsForATruck.size()===>"
						+ ticketsForAvehicle.size() + "\n");
				
				NetReportWrapper wrapper = new NetReportWrapper();
				Double fuelchargesForTruck = 0.0;
				Double subchargesForTruck = 0.0;
				Double tollchargesForTruck = 0.0;
				Double netamount = 0.0;
				Double fuelNetValue=0.0;
				Double tollNetValue=0.0;
				Double subchargesForCompanyInv = 0.0;
				Double subchargesForCompanyNonInv = 0.0;
				Double miscelleneousCharge=0.0;				
				String dateRanges="";
				String unitIds="";
				HashSet<String> dates = null;
				String tempVehicle = "";
				String tempCompany ="";
				String tempTerminal ="";
				Date tempLoadDate = null;
				Date tempUnloadDate = null;
				HashSet<String> tempcompany=null;
				HashSet<String> tempDriver=null;
				HashSet<String> tempterminal=null;
				
				double revenue = 0.0;
				//Map<String, List<BillingRate>> billingMap = new HashMap<String, List<BillingRate>>();
				StringBuffer ticketsForAlocationid=new StringBuffer("");
				
				Map map = new HashMap();
				
				for (Ticket ticket : ticketsForAvehicle) {

					String trckIDs = "";
					Vehicle vehicle = genericDAO.getById(Vehicle.class,ticket.getVehicle().getId());
					map.clear();
					map.put("unit",vehicle.getUnit());
					
					List<Vehicle> trucks = genericDAO.findByCriteria(Vehicle.class,map);
					
					if(trucks.size() > 0 && trucks!=null ){						
						for(Vehicle vehs: trucks ){							
						  if(trckIDs.equals("")){
							  trckIDs = vehs.getId().toString();
						  }
						  else{
							  trckIDs = trckIDs+","+vehs.getId();
						  }  
						}
					}
					
					
					ticketsForAlocationid.append(ticket.getId());
					ticketsForAlocationid.append(",");	
					
					StringBuffer fuellogQuery = new StringBuffer("");	
					StringBuffer tollquery = new StringBuffer("");
					if(!tempCompany.equals(ticket.getCompanyLocation().getId().toString()) || !tempTerminal.equals(ticket.getTerminal().getId().toString())){				
						
						 dates = new HashSet<String>();
						 //tempVehicle = ticket.getVehicle().getId().toString();
						 tempTerminal = ticket.getTerminal().getId().toString();
						 tempCompany = ticket.getCompanyLocation().getId().toString();
						 tempLoadDate = ticket.getLoadDate();
						 tempUnloadDate = ticket.getUnloadDate();
						 tempcompany = new HashSet<String>();
						 tempcompany.add(ticket.getCompanyLocation().getId().toString());
						 tempDriver = new HashSet<String>();
						 tempDriver.add( ticket.getDriver().getId().toString());
						 tempterminal = new HashSet<String>();
						 tempterminal.add(ticket.getTerminal().getId().toString());
						 
						 int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
						 for (int i=0; i < days; i++) {
							    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
							    dates.add(df.format(d.toDate()));
							    
						 }
						 dates.add(ticket.getLoadDate().toString());
						 dates.add(ticket.getUnloadDate().toString());
						 
						 String transferDateFrom = mysqldf.format(ticket.getLoadDate());
						 String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
					
						 fuellogQuery.append("select sum(obj.amount) from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
					//if(typeKey.equalsIgnoreCase("company"))
					//{
							fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
							fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
							fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
							//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
					//}
							List<FuelLog> fuellogListforCompany = genericDAO
							.executeSimpleQuery(fuellogQuery.toString());
							
							if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
								for(Object fuelobj:fuellogListforCompany){							
									if(fuelobj!=null)	
										fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
								}				
							}
							
							
							tollquery.append("select sum(obj.amount) from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
									+ transferDateTo
									+ " 23:59:59'");
						/*if(typeKey.equalsIgnoreCase("company"))
						{*/
							tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
							tollquery.append(" and obj.plateNumber in (").append(trckIDs).append(")");
							tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
						//}		
							
							List<EzToll> TollListforCompany = genericDAO.executeSimpleQuery(tollquery.toString());
							
							if (TollListforCompany != null	&& TollListforCompany.size() > 0) {	        	
								for (Object tollObj : TollListforCompany) {
									if(tollObj!=null)
										tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
								}
							}
							
							
				}
				else{
					
					if((ticket.getLoadDate().after(tempLoadDate) || ticket.getLoadDate().equals(tempLoadDate)) && (ticket.getUnloadDate().before(tempUnloadDate)|| ticket.getUnloadDate().equals(tempUnloadDate))){
						/*if((!tempcompany.contains(ticket.getCompanyLocation().getId().toString()) && !tempDriver.contains(ticket.getDriver().getId().toString()) && !tempterminal.contains(ticket.getTerminal().getId().toString())) || (!tempcompany.contains(ticket.getCompanyLocation().getId().toString())) || (!tempterminal.contains(ticket.getTerminal().getId().toString()) )){

							String transferDateFrom = mysqldf.format(ticket.getLoadDate());
							 String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
						 tempcompany.add(ticket.getCompanyLocation().getId().toString());
						 tempDriver.add(ticket.getDriver().getId().toString());
						 tempterminal.add(ticket.getTerminal().getId().toString());	
						 fuellogQuery.append("select sum(obj.amount) from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
									+ transferDateTo
									+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								fuellogQuery.append(" and obj.unit in (").append(ticket.getVehicle().getId()).append(")");
								fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
						//}
								List<FuelLog> fuellogListforCompany = genericDAO
								.executeSimpleQuery(fuellogQuery.toString());
								
								if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
									for(Object fuelobj:fuellogListforCompany){							
										if(fuelobj!=null)	
											fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
									}				
								}
								
								
								tollquery.append("select sum(obj.amount) from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
										+ transferDateTo
										+ " 23:59:59'");
							if(typeKey.equalsIgnoreCase("company"))
							{
								tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								tollquery.append(" and obj.plateNumber in (").append(ticket.getVehicle().getId()).append(")");
								tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
							//}		
								
								List<EzToll> TollListforCompany = genericDAO.executeSimpleQuery(tollquery.toString());
								
								if (TollListforCompany != null	&& TollListforCompany.size() > 0) {	        	
									for (Object tollObj : TollListforCompany) {
										if(tollObj!=null)
											tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
									}
								}
							
							
						
							
						}
						else if(!tempDriver.contains(ticket.getDriver().getId().toString())) {							
						
							tempcompany.add(ticket.getCompanyLocation().getId().toString());
							tempDriver.add(ticket.getDriver().getId().toString());
							tempterminal.add(ticket.getTerminal().getId().toString());	
							String transferDateFrom = mysqldf.format(ticket.getLoadDate());
							 String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
						
							 fuellogQuery.append("select sum(obj.amount) from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
									+ transferDateTo
									+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								fuellogQuery.append(" and obj.unit in (").append(ticket.getVehicle().getId()).append(")");
								fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
						//}
								List<FuelLog> fuellogListforCompany = genericDAO
								.executeSimpleQuery(fuellogQuery.toString());
								
								if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
									for(Object fuelobj:fuellogListforCompany){							
										if(fuelobj!=null)	
											fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
									}				
								}
							
						}*/
						
					}
					else{
						
						Date tempDateVar =null;
						boolean valueset = false;
						tempLoadDate = 	ticket.getLoadDate();
						tempUnloadDate = ticket.getUnloadDate();					 
						 if(dates.contains(ticket.getLoadDate().toString())){
							 //do nothing						
						 }
						 else{
						   	if(!valueset){					   		
						    	valueset=true;					  
								tempDateVar = ticket.getLoadDate();
							}					   	
						    	dates.add(ticket.getLoadDate().toString());
						 } 
						 
						int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
						 for (int i=0; i < days; i++) {
							    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
							   
							    if(dates.contains(df.format(d.toDate()))){
							      //do nothing						    	
							    }
							    else{
							    	if(!valueset){
							    	valueset=true;						    	
							    	tempDateVar = d.toDate();
							    }
							    	dates.add(df.format(d.toDate()));
							    }
						 }
						 //dates.add(new LocalDate(ticket.getLoadDate()));
						
						if(tempDateVar!=null){
							String transferDateFrom = mysqldf.format(tempDateVar);					
							String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
						
							 fuellogQuery.append("select sum(obj.amount) from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
								fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
								List<FuelLog> fuellogListforCompany = genericDAO
								.executeSimpleQuery(fuellogQuery.toString());
								
								if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
									for(Object fuelobj:fuellogListforCompany){							
										if(fuelobj!=null)	
											fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
									}				
								}
								
								
								
								tollquery.append("select sum(obj.amount) from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
										+ transferDateTo
										+ " 23:59:59'");
							/*if(typeKey.equalsIgnoreCase("company"))
							{*/
								tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								tollquery.append(" and obj.plateNumber in (").append(trckIDs).append(")");
								tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
							//}		
								
								List<EzToll> TollListforCompany = genericDAO.executeSimpleQuery(tollquery.toString());
								
								if (TollListforCompany != null	&& TollListforCompany.size() > 0) {	        	
									for (Object tollObj : TollListforCompany) {
										if(tollObj!=null)
											tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
									}
								}
								
						}						
						else {
						  if(dates.contains(ticket.getUnloadDate().toString())){
							  //do nothing
						  }
						  else{
							  dates.add(ticket.getUnloadDate().toString());
							  String transferDateFrom = mysqldf.format(ticket.getUnloadDate());					
							  String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
							
							  fuellogQuery.append("select sum(obj.amount) from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
								fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
								List<FuelLog> fuellogListforCompany = genericDAO
								.executeSimpleQuery(fuellogQuery.toString());
								
								if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
									for(Object fuelobj:fuellogListforCompany){							
										if(fuelobj!=null)	
											fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
									}				
								}
								
								
								tollquery.append("select sum(obj.amount) from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
										+ transferDateTo
										+ " 23:59:59'");
							/*if(typeKey.equalsIgnoreCase("company"))
							{*/
								tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								tollquery.append(" and obj.plateNumber in (").append(trckIDs).append(")");
								tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
							//}		
								
								List<EzToll> TollListforCompany = genericDAO.executeSimpleQuery(tollquery.toString());
								
								if (TollListforCompany != null	&& TollListforCompany.size() > 0) {	        	
									for (Object tollObj : TollListforCompany) {
										if(tollObj!=null)
											tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
									}
								}
								
						  }
						}
					}						
				}
							
					
					if(unitIds.equals("")){
						unitIds=String.valueOf(ticket.getVehicle().getId());
					}
					else
					{
						unitIds=unitIds+","+String.valueOf(ticket.getVehicle().getId());
					}					
					
								
				
					
					
					
					
				
				}
				wrapper.setFuellogCharge(fuelNetValue);
				wrapper.setTollTagAmount(tollNetValue);	
				/*
				
				if(dates.size()>0 && dates!=null){
					for(LocalDate obj:dates){						
						if(dateRanges.equals("")){
							dateRanges="'"+String.valueOf(obj)+" 00:00:00'";
						}
						else{
							dateRanges=dateRanges+",'"+String.valueOf(obj)+" 00:00:00'";
						}					
						System.out.println("***********");
						System.out.println("*********** the date is "+obj);
						System.out.println("***********");
					}
					System.out.println("******* the dateRange value is "+dateRanges);
				}
				System.out.println("******** unit id is "+unitIds);*/
				
				/*if(ticketsForAvehicle.size()>0){
					int lstindex=ticketsForAvehicle.size()-1;
					startLoadDate=ticketsForAvehicle.get(0).getLoadDate();
					endLoadDate=ticketsForAvehicle.get(lstindex).getUnloadDate();
					
					wrapper.setFromDate(sdf.format(startLoadDate));
					wrapper.setToDate(sdf.format(endLoadDate));
					System.out.println("****** the start date is "+startLoadDate);
					System.out.println("****** the end date is "+endLoadDate);
					System.out.println("****** othr value is truck "+vehicleName.getId());
					
				}*/
				
				
				
				if(ticketsForAlocationid.length()>0){
					int t=ticketsForAlocationid.lastIndexOf(",");
					ticketsForAlocationid.deleteCharAt(t);
					
					String query ="select sum(obj.totAmt) from Billing_New obj where obj.ticket in ("+ticketsForAlocationid+")";
					List<Billing_New> billinglist =genericDAO.executeSimpleQuery(query);
					if(!billinglist.isEmpty()&&billinglist.size()>0){
						for(Object obj:billinglist){
							//Object[] objarry=(Object[])obj;
							if(obj!=null){
							revenue=Double.parseDouble(obj.toString());
							}
						}
					}
					
				}
				/*for (Ticket ticket : ticketsForAvehicle) {
					Billing billing = new Billing();

					Map criterias = new HashMap();
					if (ticket.getTicketStatus() == 2) {
						Billing invoice = null;
						criterias.put("ticket.id", ticket.getId());
						invoice = genericDAO.getByCriteria(Billing.class,
								criterias);
						if (invoice == null)
							continue;

						billing = invoice;

						//if (vehicleName.getId()==billing.getId()) {
							revenue += billing.getTotAmt();
						//}
					} 
					else {
						double amount= ProcessAmount(ticket,billing);
						
						System.out.println("\namount===>" + amount + "\n");
						revenue += amount;
					}
				}*/
					// FOR FUELLOG
				
				//****************************************************************
				//****************************************************************
                   /* System.out.println("Enetered here in new logic");
					
					System.out.println("inside ticket for loop ok ok");
					StringBuffer fuellogQuery = new StringBuffer("");						
					fuellogQuery
					.append("select sum(obj.amount) from FuelLog obj where obj.unit='"
								+ vehicleName.getId()
								+ "' "
								+ "and obj.transactiondate in ("
								+ dateRanges
								+ ")" );
					if (!StringUtils.isEmpty(company)) {
						fuellogQuery.append("and  obj.company in (" + company
								+ ")");
					}
					if (!StringUtils.isEmpty(driver)) {
						fuellogQuery.append("and  obj.driversid in (" + driver
								+ ")");
					}
					if (!StringUtils.isEmpty(terminal)) {
						fuellogQuery.append("and  obj.terminal in (" + terminal + ")");
					}
				if (!StringUtils.isEmpty(truck)) {
					fuellogQuery.append("and  obj.unit in (" + truck + ")");
				}

				
				System.out.println("********* The query is ====> "+fuellogQuery.toString());

				List<FuelLog> fuellogListforTruck = genericDAO
						.executeSimpleQuery(fuellogQuery.toString());
						
				if (fuellogListforTruck != null && fuellogListforTruck.size() > 0) {
					
					System.out.println("inside fuel if ok ok"+fuellogListforTruck.size());
					for(Object fuelobj:fuellogListforTruck){							
						if(fuelobj!=null)	
						fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
						}												
				}				    
				System.out.println("****** the net fuel valyue is "+fuelNetValue);
				wrapper.setFuellogCharge(fuelNetValue);*/
				//****************************************************************			
				//****************************************************************			
					
					/*StringBuffer fuellogQuery = new StringBuffer("");
					fuellogQuery
							.append("select obj.unit,sum(obj.amount) from FuelLog obj where obj.unit='"
									+ vehicleName.getId()
									+ "' "
									+ "and obj.transactiondate>='"
									+ dateRangeFrom
									+ "' and obj.transactiondate<= '"
									+ dateRangeTo + "'");
					if (!StringUtils.isEmpty(company)) {
						fuellogQuery.append("and  obj.company in (" + company
								+ ")");
					}
					if (!StringUtils.isEmpty(driver)) {
						fuellogQuery.append("and  obj.driversid in (" + driver
								+ ")");
					}
					if (!StringUtils.isEmpty(terminal)) {
						fuellogQuery.append("and  obj.terminal in (" + terminal + ")");
					}

					fuellogQuery.append(" group by obj.unit ");

					List<NetReportWrapper> fuellogListforCompany = genericDAO
							.executeSimpleQuery(fuellogQuery.toString());
					if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
						for (Object fuellogObj1 : fuellogListforCompany) {
							Object[] fuelobjArry = (Object[]) fuellogObj1;
							 Double fuelchargesForTruck = Double.parseDouble(fuelobjArry[1].toString());
							wrapper.setFuellogCharge(fuelchargesForTruck);
						}
					}*/
				
				/*else{

					StringBuffer fuellogQuery = new StringBuffer("");
					fuellogQuery
							.append("select obj.unit,sum(obj.amount) from FuelLog obj where obj.unit='"
									+ vehicleName.getId()
									+ "' "
									+ "and obj.transactiondate between '"
									+ oracleFormatter.format(startLoadDate)
									+ "' and '"
									+ oracleFormatter.format(endLoadDate)+"'");
					if (!StringUtils.isEmpty(company)) {
						fuellogQuery.append("and  obj.company in (" + company
								+ ")");
					}
					if (!StringUtils.isEmpty(driver)) {
						fuellogQuery.append("and  obj.driversid in (" + driver
								+ ")");
					}
					if (!StringUtils.isEmpty(terminal)) {
						fuellogQuery.append("and  obj.terminal in (" + terminal + ")");
					}

					fuellogQuery.append(" group by obj.unit ");

					List<NetReportWrapper> fuellogListforCompany = genericDAO
							.executeSimpleQuery(fuellogQuery.toString());
					if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
						for (Object fuellogObj1 : fuellogListforCompany) {
							Object[] fuelobjArry = (Object[]) fuellogObj1;
							 Double fuelchargesForTruck = Double.parseDouble(fuelobjArry[1].toString());
							wrapper.setFuellogCharge(fuelchargesForTruck);
						}
					}
				
					
				}*/
				

					// UP TO FOR FUELLOG

					//For subcontractor charge
					if(ticketIds.length()>0&& subticketIds.length()>0){
						
					String SubticketsForAVehicle = "select obj from Ticket obj where obj.vehicle='"
							+ v.getId()+"'"
							+ " and obj.id in ("
							+ subticketIds
							+ ")";
					List<Ticket> ticketsForvehicle = genericDAO.executeSimpleQuery(SubticketsForAVehicle);
					System.out.println("\nticketsForAcampanyOFsubcontractor.size()===>"+ ticketsForvehicle.size() + "\n");				
				
					
					String tickids="";
					String tickNonInvoced="";
					List<String> str = new ArrayList<String>();
					
					for (Ticket ticket : ticketsForvehicle) {				
						
						if (ticket.getVoucherStatus() == 2) {
							if(tickids.equals("")){
								tickids=String.valueOf(ticket.getId());
							}
							else{
								tickids=tickids+","+String.valueOf(ticket.getId());
							}						 
						}						
						else{
							if(tickNonInvoced.equals("")){
								tickNonInvoced=String.valueOf(ticket.getId());
							}
							else{
								tickNonInvoced=tickNonInvoced+","+ticket.getId();
							}
						}
						
						
					}	
						
						
						if(!StringUtils.isEmpty(tickids)){							
							String query1="select sum(obj.totAmt) from SubcontractorBilling obj where obj.ticket in ("+tickids+")";
							System.out.println("======>>>> Query1 "+query1);
							List<SubcontractorBilling> sumtotalamount=genericDAO.executeSimpleQuery(query1);
						
							if(sumtotalamount!=null && sumtotalamount.size()>0){							
								for(Object obj:sumtotalamount){									
									if(obj!=null)									
									subchargesForCompanyInv=Double.parseDouble(obj.toString());
									
								}						
							}
							
							
							String miscellQuery="select distinct obj.subcontractorId ,obj.miscelleneousCharges from SubcontractorBilling obj where obj.ticket in ("+tickids+")";
							
							List<SubcontractorBilling> misscellamount=genericDAO.executeSimpleQuery(miscellQuery);
							
							if(misscellamount!=null && misscellamount.size()>0){							
								for(Object obj:misscellamount){	
									Object[] objs=(Object[])obj;
									
									if(objs[1]!=null)
									{
										String misamt=objs[1].toString();
										String[] miscell=misamt.split(",");										
										for(int i=0;i<miscell.length;i++){
											
											miscelleneousCharge+=Double.parseDouble(miscell[i]);
										}
										
									}
									//subchargesForCompanyInv=Double.parseDouble(obj.toString());
								}						
							}							
						}
						
						if(!StringUtils.isEmpty(tickNonInvoced)){						
							String query2="select sum(obj.totAmt) from SubcontractorBillingNew obj where obj.ticket in ("+tickNonInvoced+")";
							System.out.println("======>>>> Query2 "+query2);
							List<SubcontractorBillingNew> subtotalamount=genericDAO.executeSimpleQuery(query2);
						
							if(subtotalamount!=null && subtotalamount.size()>0){							
								for(Object obj:subtotalamount){									
									if(obj!=null)
									subchargesForCompanyNonInv=Double.parseDouble(obj.toString());
								}						
							}						
						}
						
						System.out.println("\nsubchargesForCompany=====>"+(subchargesForCompanyInv+subchargesForCompanyNonInv+miscelleneousCharge)+"\n");
						wrapper.setSubcontractorCharge(subchargesForCompanyInv+subchargesForCompanyNonInv+miscelleneousCharge);
						System.out.println("***** the get of wrapper is "+wrapper.getSubcontractorCharge());
						
						/*
						System.out.println("\nSubcontractor charge for terminal start\n");
					String SubticketsForAVehicle = "select obj from Ticket obj where obj.vehicle='"
							+ vehicleName.getId()+"'"
							+ " and obj.id in ("
							+ subticketIds
							+ ")";
					List<Ticket> ticketsForvehicle = genericDAO.executeSimpleQuery(SubticketsForAVehicle);
					System.out.println("\nticketsForAcampanyOFsubcontractor.size()===>"+ ticketsForvehicle.size() + "\n");
					
					
					List<String> str = new ArrayList<String>();
					for (Ticket ticket : ticketsForvehicle) {
						SubcontractorBilling billing = new SubcontractorBilling();
                        
						Map criterias = new HashMap();
						if (ticket.getVoucherStatus() == 2) {
							boolean cont=false;
							double miscelleneousCharge=0.0;
							SubcontractorBilling invoice = null;
							criterias.put("ticket.id", ticket.getId());
							invoice = genericDAO.getByCriteria(SubcontractorBilling.class,criterias);
							if (invoice == null)
								continue;

							billing = invoice;

							
							if (!StringUtils.isEmpty(ticket.getVoucherNumber())&& !StringUtils.isEmpty(ticket.getVoucherDate().toString())
									&& !StringUtils.isEmpty(ticket.getCompanyLocation().getName())) 
							{
								cont = str.contains(ticket.getVoucherNumber() + "_"
										+ ticket.getSubcontractor().getId() + "_"
										+ ticket.getCompanyLocation().getId());

								if (!cont) {
									str.add(ticket.getVoucherNumber() + "_"
											+ ticket.getSubcontractor().getId() + "_"
											+ ticket.getCompanyLocation().getId());
									String subcquery = "select obj from SubcontractorInvoice obj where obj.voucherNumber='"
											+ ticket.getVoucherNumber()
											+ "' and obj.subContractorId="
											+ ticket.getSubcontractor().getId()
											+ " and obj.companyLocationId="
											+ ticket.getCompanyLocation().getId();
									List<SubcontractorInvoice> invoices = genericDAO.executeSimpleQuery(subcquery);
									if (!StringUtils.isEmpty(invoices.get(0).getMiscelleneousCharges()))
										miscelleneousCharge += Double.parseDouble(invoices.get(0).getMiscelleneousCharges());
								}
							}
							
							if (companyName.getId().equals(billing.getCompanyLocationId())) {
								System.out.println("\nsubcontractor invoiced ticket TotAmt()  for truck==>"+billing.getTotAmt()+"\n");
								System.out.println("\nbilling.getOtherCharges()for truck==>"+billing.getOtherCharges()+"\n");
								System.out.println("\nmiscelleneousCharge)=for truck=>"+miscelleneousCharge+"\n");
								subchargesForTruck += billing.getTotAmt()+billing.getOtherCharges()+miscelleneousCharge;
							//}
							System.out.println("\nticketsFortruckOFsubcontractor  with VoucherStatus=2===>\n");
							
							
						} else {
							// if ticket is not invoice
							double amount=ProcessSubcontractorAmount(ticket,billing);
							subchargesForTruck += amount;
							System.out.println("\nsubchargesForTerminal=====>"+subchargesForTruck+"\n");
						}
					}
					
					wrapper.setSubcontractorCharge(subchargesForTruck);
					System.out.println("\nSubcontractor charge for truck End\n");
					*/}
					
					
					
					
					
                    /*StringBuffer subcontractorCharge=new StringBuffer("");
                    subcontractorCharge.append("select obj.unit,sum(obj.totAmt) from SubcontractorBilling obj where obj.unit='"+vehicleName.getUnit()+"'");
                    if(subticketIds.length()>0){
                    	 subcontractorCharge.append("and  obj.ticket in ("+ subticketIds + ")");
                    }
                    subcontractorCharge.append("group by obj.unit");
                    System.out.println("\n subcontractor query in unit-->"+subcontractorCharge);
                    List<NetReportWrapper> SubListforUnit = genericDAO.executeSimpleQuery(subcontractorCharge.toString());
                    if (SubListforUnit != null && SubListforUnit.size() > 0) {
	                        for(Object subBillingObjforUnit:SubListforUnit){
		                        Object[] subBillingobjArry=(Object[]) subBillingObjforUnit;
		        
		                        Double subchargesForTruck=Double.parseDouble(subBillingobjArry[1].toString());
		                        wrapper.setSubcontractorCharge(subchargesForTruck);
		                     }
                      }*/
                  
                    //upto here for subcontractor charge

					// TOLL TAG CHARGE
				
					//****************************************************************			
					//****************************************************************			
				/*	System.out.println("Enetered here in toll new logic");
					
					StringBuffer TolltagCharge = new StringBuffer("");								
					TolltagCharge.append("select sum(obj.amount) from EzToll obj where obj.plateNumber='" 
		                    + vehicleName.getId()+"' and obj.transactiondate in ("
								+ dateRanges
								+ ")");

					if (!StringUtils.isEmpty(company)) {
						TolltagCharge.append("and  obj.company in ("+ company + ")");
				    }
				    if (!StringUtils.isEmpty(terminal)) {
				    	TolltagCharge.append("and  obj.terminal in ("+ terminal + ")");
				    }
				if (!StringUtils.isEmpty(truck)) {
					TolltagCharge.append("and  obj.plateNumber in ("
							+ truck + ")");
				}
				
				System.out.println("******* the toll query is "+TolltagCharge);
				
					
				List<EzToll> TollListforTruck = genericDAO.executeSimpleQuery(TolltagCharge.toString());
				System.out.println("******** list value is "+TollListforTruck);
				System.out.println("******** the list value is "+TollListforTruck.get(0));
		        if (TollListforTruck != null	&& TollListforTruck.size() > 0) {		        	
			       for (Object tollObj : TollListforTruck) {
			    	  if(tollObj!=null)
						tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
			       }
		        }													
				wrapper.setTollTagAmount(tollNetValue);	*/
				//****************************************************************			
				//****************************************************************				
					
					
					/*
                    StringBuffer Tollquery=new StringBuffer("");
				       Tollquery.append("select obj.plateNumber,sum(obj.amount) from EzToll obj where obj.plateNumber='" 
		                    + vehicleName.getId()+"' and obj.transactiondate>='"
     	                         +dateRangeFrom+"' and obj.transactiondate<= '"
     	                         +dateRangeTo+"'");
				       if (!StringUtils.isEmpty(company)) {
				    	   Tollquery.append("and  obj.company in ("+ company + ")");
				    	 }
				    	if (!StringUtils.isEmpty(terminal)) {
				    		Tollquery.append("and  obj.terminal in ("+ terminal + ")");
				    	 }
				    	Tollquery.append(" group by obj.plateNumber ");
				       
                     List<NetReportWrapper> TollListforUnit = genericDAO.executeSimpleQuery(Tollquery.toString());
                     if (TollListforUnit != null && TollListforUnit.size() > 0) {
	                        for(Object TollObjforunit:TollListforUnit){
		                        Object[] tollobjArry=(Object[]) TollObjforunit;
		        
		                        Double tollchargesForTruck=Double.parseDouble(tollobjArry[1].toString());
		                        wrapper.setTollTagAmount(tollchargesForTruck);
		                     }
	                      }
				*/
				/*else{
                    StringBuffer Tollquery=new StringBuffer("");
				       Tollquery.append("select obj.plateNumber,sum(obj.amount) from EzToll obj where obj.plateNumber='" 
		                    + vehicleName.getId()
		                    + "' "
		                    + "and obj.transactiondate between '"
		                    + oracleFormatter.format(startLoadDate)
		                    + "' and '"
		                    + oracleFormatter.format(endLoadDate)+"'");
				       if (!StringUtils.isEmpty(company)) {
				    	   Tollquery.append("and  obj.company in ("+ company + ")");
				    	 }
				    	if (!StringUtils.isEmpty(terminal)) {
				    		Tollquery.append("and  obj.terminal in ("+ terminal + ")");
				    	 }
				    	Tollquery.append(" group by obj.plateNumber ");
				       
                     List<NetReportWrapper> TollListforUnit = genericDAO.executeSimpleQuery(Tollquery.toString());
                     if (TollListforUnit != null && TollListforUnit.size() > 0) {
	                        for(Object TollObjforunit:TollListforUnit){
		                        Object[] tollobjArry=(Object[]) TollObjforunit;
		        
		                        Double tollchargesForTruck=Double.parseDouble(tollobjArry[1].toString());
		                        wrapper.setTollTagAmount(tollchargesForTruck);
		                     }
	                      }
				
					
				}*/
                  // up to TOLL TAG CHARGE
				
				
				netamount = revenue- (fuelNetValue + subchargesForCompanyInv+subchargesForCompanyNonInv +miscelleneousCharge+ tollNetValue);
				wrapper.setUnit(v.getUnit().toString());
				wrapper.setUnitID(v.getId().toString());
				wrapper.setCompany(v.getOwner().getName());
				wrapper.setSumTotal(revenue);
				wrapper.setNetAmount(netamount);
				wrapperlist.add(wrapper);
			}// for(int no=0;no<ticketsdestinct.size();no++)
			
			
			
			
			
		        if(!StringUtils.isEmpty(vehid)){
		        	String vehquery="";
		        if(TruckReport.equalsIgnoreCase("Truckcc") || TruckReport.equalsIgnoreCase("Truckca"))	{
		        	vehquery="select obj from Vehicle obj where obj.type=1 and obj.unit not in ("+vehid+")and obj.owner in ("+company+")  and  (obj.validFrom <='"+oracleFormatter.format(mainStartDate)+"' and obj.validTo >='"+oracleFormatter.format(mainEndDate)+"') OR (obj.validFrom >='"+oracleFormatter.format(mainStartDate)+"' and obj.validTo <='"+oracleFormatter.format(mainEndDate)+"') OR (obj.validFrom <='"+oracleFormatter.format(mainStartDate)+"' and (obj.validTo >='"+oracleFormatter.format(mainStartDate)+"' and obj.validTo <='"+oracleFormatter.format(mainEndDate)+"')) OR ((obj.validFrom >='"+oracleFormatter.format(mainStartDate)+"' and obj.validFrom <='"+oracleFormatter.format(mainEndDate)+"')and obj.validTo >='"+oracleFormatter.format(mainEndDate)+"')) order by obj.unit";	
		        }
		        else{
				 vehquery="select obj from Vehicle obj where obj.type=1 and obj.unit not in ("+vehid+")and (obj.validFrom <='"+oracleFormatter.format(mainStartDate)+"' and obj.validTo >='"+oracleFormatter.format(mainEndDate)+"') OR (obj.validFrom >='"+oracleFormatter.format(mainStartDate)+"' and obj.validTo <='"+oracleFormatter.format(mainEndDate)+"') OR (obj.validFrom <='"+oracleFormatter.format(mainStartDate)+"' and (obj.validTo >='"+oracleFormatter.format(mainStartDate)+"' and obj.validTo <='"+oracleFormatter.format(mainEndDate)+"')) OR ((obj.validFrom >='"+oracleFormatter.format(mainStartDate)+"' and obj.validFrom <='"+oracleFormatter.format(mainEndDate)+"')and obj.validTo >='"+oracleFormatter.format(mainEndDate)+"')) order by obj.unit";			
		        }
				
				List<Vehicle> vehlist=genericDAO.executeSimpleQuery(vehquery);				
				if(vehlist!=null && vehlist.size()>0){
					
					for(Vehicle veh:vehlist){
						NetReportWrapper wrapper = new NetReportWrapper();
						wrapper.setCompany(veh.getOwner().getName());
						wrapper.setFuellogCharge(0.0);
						wrapper.setNetAmount(0.0);
						wrapper.setSubcontractorCharge(0.0);
						wrapper.setSumTotal(0.0);
						wrapper.setUnit(veh.getUnit().toString());
						wrapper.setUnitID(veh.getId().toString());
						wrapper.setTollTagAmount(0.0);					
						wrapperlist.add(wrapper);						
					}					
				}
				
		        }	
		        
		        if (wrapperlist.size() > 0) {
					
					    Collections.sort(wrapperlist, new Comparator<NetReportWrapper>() {
					        @Override
					        public int compare(final NetReportWrapper object1, final NetReportWrapper object2) {
					            return (Integer.parseInt(object1.getUnit())-Integer.parseInt(object2.getUnit()));
					        }
					       } );
					   }
		        
		        
		}// if(TruckReport!=null)
		
		//for Trailer Report
		if(TrailerReport!=null){
			String disting = "select distinct obj.trailer from Ticket obj where obj.id in ("+ ticketIds + ") order by obj.trailer.unit";
			System.out.println("*(*********** the ");
			List<Vehicle> ticketsdestinct = genericDAO.executeSimpleQuery(disting);
			System.out.println("*(*********** distinct trailer is"+ticketsdestinct.size());

			for (Vehicle v : ticketsdestinct) {
				System.out.println("*********** trailer id is "+v.getId());
				System.out.println("********* trailer unit is "+v.getUnit());
				//Vehicle vehicleName = genericDAO.getById(Vehicle.class,v.getId());
				String ticketsForTrailer = "select obj from Ticket obj where obj.trailer="
						+ v.getId()
						+ " and obj.id in ("
						+ ticketIds
						+ ")";
				
				List<Ticket> ticketsForAvehicle = genericDAO.executeSimpleQuery(ticketsForTrailer);
				
				
				NetReportWrapper wrapper = new NetReportWrapper();
				Double fuelchargesForTrailer = 0.0;
				Double subchargesForTrailer = 0.0;
				Double tollchargesForTrailer = 0.0;
				Double netamount = 0.0;
				double revenue = 0.0;
				Double fuelNetValue=0.0;
				Double tollNetValue=0.0;
				Double subchargesForCompanyInv = 0.0;
				Double subchargesForCompanyNonInv = 0.0;
				Double miscelleneousCharge=0.0;				
				String dateRanges="";
				String unitIds="";
				HashSet<LocalDate> dates = new HashSet<LocalDate>();
				
				
				StringBuffer ticketsForAlocationid=new StringBuffer("");
				System.out.println("******** each trailer query size is "+ticketsForAvehicle.size());
				for (Ticket ticket : ticketsForAvehicle) {
					ticketsForAlocationid.append(ticket.getId());
					ticketsForAlocationid.append(",");					
				}
				
				
				
			
					
					
				
				if(ticketsForAlocationid.length()>0){
					int t=ticketsForAlocationid.lastIndexOf(",");
					ticketsForAlocationid.deleteCharAt(t);
					
					String query ="select sum(obj.totAmt) from Billing_New obj where obj.ticket in ("+ticketsForAlocationid+")";
					System.out.println("********* the ticketsForAlocationid query is "+query);
					List<Billing_New> billinglist =genericDAO.executeSimpleQuery(query);
					if(!billinglist.isEmpty()&&billinglist.size()>0){
						for(Object obj:billinglist){
							//Object[] objarry=(Object[])obj;
							System.out.println("*******************");
							System.out.println("*******************");
							System.out.println("*******************");
							System.out.println("*******************");
							System.out.println("******************* revenue amount"+obj.toString());
							if(obj!=null){
							revenue=Double.parseDouble(obj.toString());
							}
						}
					}					
				}
			/*	for (Ticket ticket : ticketsForAvehicle) {
					Billing billing = new Billing();

					Map criterias = new HashMap();
					if (ticket.getTicketStatus() == 2) {
						Billing invoice = null;
						criterias.put("ticket.id", ticket.getId());
						invoice = genericDAO.getByCriteria(Billing.class,
								criterias);
						if (invoice == null)
							continue;

						billing = invoice;

							revenue += billing.getTotAmt();
					} 
					else {
						double amount= ProcessAmount(ticket,billing);
						
						revenue += amount;
					}
				}*/
				

					//For subcontractor charge
					if(ticketIds.length()>0&& subticketIds.length()>0){	
					
						String subticketsForTrailer = "select obj from Ticket obj where obj.trailer='"
							+ v.getId()+"'"
							+ " and obj.id in ("
							+ subticketIds
							+ ")";
						
					List<Ticket> ticketsForvehicle = genericDAO.executeSimpleQuery(subticketsForTrailer);
					System.out.println("\nticketsForAcampanyOFsubcontractor.size()===>"+ ticketsForvehicle.size() + "\n");				
				
					
					String tickids="";
					String tickNonInvoced="";
					List<String> str = new ArrayList<String>();
					
					for (Ticket ticket : ticketsForvehicle) {						
						if (ticket.getVoucherStatus() == 2) {
							if(tickids.equals("")){
								tickids=String.valueOf(ticket.getId());
							}
							else{
								tickids=tickids+","+String.valueOf(ticket.getId());
							}						 
						}						
						else{
							if(tickNonInvoced.equals("")){
								tickNonInvoced=String.valueOf(ticket.getId());
							}
							else{
								tickNonInvoced=tickNonInvoced+","+ticket.getId();
							}
						}						
					}	
						
						
						if(!StringUtils.isEmpty(tickids)){							
							String query1="select sum(obj.totAmt) from SubcontractorBilling obj where obj.ticket in ("+tickids+")";
							System.out.println("======>>>> Query1 "+query1);
							List<SubcontractorBilling> sumtotalamount=genericDAO.executeSimpleQuery(query1);
						
							if(sumtotalamount!=null && sumtotalamount.size()>0){							
								for(Object obj:sumtotalamount){									
									if(obj!=null)									
									subchargesForCompanyInv=Double.parseDouble(obj.toString());
									
								}						
							}
							
							
							String miscellQuery="select distinct obj.subcontractorId ,obj.miscelleneousCharges from SubcontractorBilling obj where obj.ticket in ("+tickids+")";
							
							List<SubcontractorBilling> misscellamount=genericDAO.executeSimpleQuery(miscellQuery);
							
							if(misscellamount!=null && misscellamount.size()>0){							
								for(Object obj:misscellamount){	
									Object[] objs=(Object[])obj;
									
									if(objs[1]!=null)
									{
										String misamt=objs[1].toString();
										String[] miscell=misamt.split(",");										
										for(int i=0;i<miscell.length;i++){
											
											miscelleneousCharge+=Double.parseDouble(miscell[i]);
										}
										
									}
									//subchargesForCompanyInv=Double.parseDouble(obj.toString());
								}						
							}							
						}
						
						if(!StringUtils.isEmpty(tickNonInvoced)){						
							String query2="select sum(obj.totAmt) from SubcontractorBillingNew obj where obj.ticket in ("+tickNonInvoced+")";
							System.out.println("======>>>> Query2 "+query2);
							List<SubcontractorBillingNew> subtotalamount=genericDAO.executeSimpleQuery(query2);
						
							if(subtotalamount!=null && subtotalamount.size()>0){							
								for(Object obj:subtotalamount){									
									if(obj!=null)
									subchargesForCompanyNonInv=Double.parseDouble(obj.toString());
								}						
							}						
						}
						
						System.out.println("\nsubchargesForCompany=====>"+(subchargesForCompanyInv+subchargesForCompanyNonInv+miscelleneousCharge)+"\n");
						wrapper.setSubcontractorCharge(subchargesForCompanyInv+subchargesForCompanyNonInv+miscelleneousCharge);
						
						
						
						
						/*
					String subticketsForTrailer = "select obj from Ticket obj where obj.trailer='"
							+ vehicleName.getId()+"'"
							+ " and obj.id in ("
							+ subticketIds
							+ ")";
					List<Ticket> ticketsForTailer = genericDAO.executeSimpleQuery(subticketsForTrailer);
					System.out.println("\nticketsForAcampanyOFsubcontractor.size()===>"+ ticketsForTailer.size() + "\n");
					
					
					List<String> str = new ArrayList<String>();
					for (Ticket ticket : ticketsForTailer) {
						SubcontractorBilling billing = new SubcontractorBilling();
                        
						Map criterias = new HashMap();
						if (ticket.getVoucherStatus() == 2) {
							boolean cont=false;
							double miscelleneousCharge=0.0;
							SubcontractorBilling invoice = null;
							criterias.put("ticket.id", ticket.getId());
							invoice = genericDAO.getByCriteria(SubcontractorBilling.class,criterias);
							if (invoice == null)
								continue;

							billing = invoice;

							
							if (!StringUtils.isEmpty(ticket.getVoucherNumber())&& !StringUtils.isEmpty(ticket.getVoucherDate().toString())
									&& !StringUtils.isEmpty(ticket.getCompanyLocation().getName())) 
							{
								cont = str.contains(ticket.getVoucherNumber() + "_"
										+ ticket.getSubcontractor().getId() + "_"
										+ ticket.getCompanyLocation().getId());

								if (!cont) {
									str.add(ticket.getVoucherNumber() + "_"
											+ ticket.getSubcontractor().getId() + "_"
											+ ticket.getCompanyLocation().getId());
									String subcquery = "select obj from SubcontractorInvoice obj where obj.voucherNumber='"
											+ ticket.getVoucherNumber()
											+ "' and obj.subContractorId="
											+ ticket.getSubcontractor().getId()
											+ " and obj.companyLocationId="
											+ ticket.getCompanyLocation().getId();
									List<SubcontractorInvoice> invoices = genericDAO.executeSimpleQuery(subcquery);
									if (!StringUtils.isEmpty(invoices.get(0).getMiscelleneousCharges()))
										miscelleneousCharge += Double.parseDouble(invoices.get(0).getMiscelleneousCharges());
								}
							}
							
							
								subchargesForTrailer += billing.getTotAmt()+billing.getOtherCharges()+miscelleneousCharge;
							
							
							
						} else {
							// if ticket is available
							double amount=ProcessSubcontractorAmount(ticket,billing);
							subchargesForTrailer += amount;
						}
					}
					
					wrapper.setSubcontractorCharge(subchargesForTrailer);
					*/}
				
				netamount = revenue- (fuelNetValue + subchargesForCompanyInv+subchargesForCompanyNonInv +miscelleneousCharge+ tollNetValue);
				wrapper.setUnit(v.getUnit().toString());
				wrapper.setUnitID(v.getId().toString());
				wrapper.setCompany(v.getOwner().getName());
				wrapper.setSumTotal(revenue);
				wrapper.setNetAmount(netamount);
				wrapperlist.add(wrapper);
			}
			
		}
		
		
		// For Driver Report
		if (DriverReport != null) {
			if(ticketIds.length()>0){
			String disting = "select distinct obj.driver from Ticket obj where obj.id in ("+ ticketIds + ") order by obj.driver.fullName";
			List<Driver> ticketsdestinct = genericDAO.executeSimpleQuery(disting);
			
			Date startLoadDate=null;
			Date endLoadDate=null;
			
			
			String drvid="";
			/*for (Driver drv : ticketsdestinct) {
				if(StringUtils.isEmpty(drvid)){
					drvid=drv.getId().toString();
				}
				else{
				    drvid=drvid+","+drv.getId();
				}
			}*/
			
			
			
            System.out.println("\n ticket ids -->"+ticketIds);
			/* for(int no=0;no<ticketsdestinct.size();no++){ */
			for (Driver d1 : ticketsdestinct) {
				if(StringUtils.isEmpty(drvid)){
					drvid=d1.getId().toString();
				}
				else{
				    drvid=drvid+","+d1.getId();
				}
				
				//Driver driverName = genericDAO.getById(Driver.class,d1.getId());
				String ticketForADiver = "select obj from Ticket obj where obj.driver="
						+ d1.getId()
						+ " and obj.id in ("
						+ ticketIds
						+ ") order by vehicle asc,companyLocation asc,loadDate asc, unloadDate desc";
				List<Ticket> ticketsForADriver = genericDAO.executeSimpleQuery(ticketForADiver);
				
				NetReportWrapper wrapper = new NetReportWrapper();
				Double fuelchargesForDriver = 0.0;
				Double subchargesForDriver = 0.0;
				Double tollchargesForDriver = 0.0;
				Double netamount = 0.0;
				double revenue = 0.0;
				Double fuelNetValue=0.0;
				Double tollNetValue=0.0;
				Double subchargesForCompanyInv = 0.0;
				Double subchargesForCompanyNonInv = 0.0;
				Double miscelleneousCharge=0.0;				
				String dateRanges="";
				String unitIds="";
				HashSet<String> dates = null;
				String tempVehicle = "";
				String tempCompany="";
				String tempTerminal="";
				Date tempLoadDate = null;
				Date tempUnloadDate = null;
				HashSet<String> tempcompany=null;				
				HashSet<String> tempterminal=null;
				//Map<String, List<BillingRate>> billingMap = new HashMap<String, List<BillingRate>>();
				StringBuffer ticketsForAlocationid=new StringBuffer("");
				Map map = new HashMap();
				
				for (Ticket ticket : ticketsForADriver) {					
					
					String trckIDs = "";
					Vehicle vehicle = genericDAO.getById(Vehicle.class,ticket.getVehicle().getId());
					map.clear();
					map.put("unit",vehicle.getUnit());
					
					List<Vehicle> trucks = genericDAO.findByCriteria(Vehicle.class,map);
					
					if(trucks.size() > 0 && trucks!=null ){						
						for(Vehicle vehs: trucks ){							
						  if(trckIDs.equals("")){
							  trckIDs = vehs.getId().toString();
						  }
						  else{
							  trckIDs = trckIDs+","+vehs.getId();
						  }  
						}
					}
					
					ticketsForAlocationid.append(ticket.getId());
					ticketsForAlocationid.append(",");	
					
					System.out.println("************** driver is "+ticket.getDriver().getId()+" and "+ticket.getLoadDate()+" and "+ticket.getUnloadDate());
					System.out.println("******** driver name is "+ticket.getDriver().getFullName());
					System.out.println("********* other value is "+ticket.getCompanyLocation().getId()+" and "+ticket.getTerminal().getId()+ " and "+ticket.getVehicle().getId());
					StringBuffer fuellogQuery = new StringBuffer("");	
					StringBuffer tollquery = new StringBuffer("");
					if(!tempVehicle.equals(ticket.getVehicle().getId().toString()) || !tempCompany.equals(ticket.getCompanyLocation().getId().toString())){				
						
						
						System.out.println("******** eneterd if confd");
						 dates = new HashSet<String>();
						 tempVehicle = ticket.getVehicle().getId().toString();
						 tempCompany = ticket.getCompanyLocation().getId().toString();
						 tempTerminal = ticket.getTerminal().getId().toString();
						 tempLoadDate = ticket.getLoadDate();
						 tempUnloadDate = ticket.getUnloadDate();
						 dates.add(ticket.getLoadDate().toString());
						 dates.add(ticket.getUnloadDate().toString());
						 
						 int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
						 for (int i=0; i < days; i++) {
							    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
							    dates.add(df.format(d.toDate()));
							    
						 }
						 
						 
						 String transferDateFrom = mysqldf.format(ticket.getLoadDate());
						 String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
					
						 fuellogQuery.append("select sum(obj.amount) from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
					//if(typeKey.equalsIgnoreCase("company"))
					//{
							fuellogQuery.append(" and obj.company in (").append(ticket.getCompanyLocation().getId()).append(")");
							fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
							fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
							fuellogQuery.append(" and obj.driversid ='").append(ticket.getDriver().getId()).append("'");
					//}
							
							List<FuelLog> fuellogListforCompany = genericDAO
							.executeSimpleQuery(fuellogQuery.toString());
							
							if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
								for(Object fuelobj:fuellogListforCompany){							
									if(fuelobj!=null)	
										fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
								}				
							}
							
							
							tollquery.append("select sum(obj.amount) from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
									+ transferDateTo
									+ " 23:59:59'");
						/*if(typeKey.equalsIgnoreCase("company"))
						{*/
							tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
							tollquery.append(" and obj.plateNumber in (").append(trckIDs).append(")");
							tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
						//}		
							
							List<EzToll> TollListforCompany = genericDAO.executeSimpleQuery(tollquery.toString());
							
							if (TollListforCompany != null	&& TollListforCompany.size() > 0) {	        	
								for (Object tollObj : TollListforCompany) {
									if(tollObj!=null)
										tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
								}
							}
							
							
				}
				else{
					
					if((ticket.getLoadDate().after(tempLoadDate) || ticket.getLoadDate().equals(tempLoadDate)) && (ticket.getUnloadDate().before(tempUnloadDate)|| ticket.getUnloadDate().equals(tempUnloadDate))){
						System.out.println("******** eneterd else's if confd");
					}
					else{
						System.out.println("******** else's else  confd");
						Date tempDateVar =null;
						boolean valueset = false;
						tempLoadDate = 	ticket.getLoadDate();
						tempUnloadDate = ticket.getUnloadDate();					 
						 if(dates.contains(ticket.getLoadDate().toString())){
							 //do nothing						
						 }
						 else{
						   	if(!valueset){					   		
						    	valueset=true;					  
								tempDateVar = ticket.getLoadDate();
							}					   	
						    	dates.add(ticket.getLoadDate().toString());
						 } 
						 
						int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
						 for (int i=0; i < days; i++) {
							    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
							   
							    if(dates.contains(df.format(d.toDate()))){
							      //do nothing						    	
							    }
							    else{
							    	if(!valueset){
							    	valueset=true;						    	
							    	tempDateVar = d.toDate();
							    }
							    	dates.add(df.format(d.toDate()));
							    }
						 }
						 //dates.add(new LocalDate(ticket.getLoadDate()));
						
						if(tempDateVar!=null){
							String transferDateFrom = mysqldf.format(tempDateVar);					
							String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
						
							 fuellogQuery.append("select sum(obj.amount) from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
								fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
								List<FuelLog> fuellogListforCompany = genericDAO
								.executeSimpleQuery(fuellogQuery.toString());
								
								if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
									for(Object fuelobj:fuellogListforCompany){							
										if(fuelobj!=null)	
											fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
									}				
								}
								
								
								
								tollquery.append("select sum(obj.amount) from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
										+ transferDateTo
										+ " 23:59:59'");
							/*if(typeKey.equalsIgnoreCase("company"))
							{*/
								tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								tollquery.append(" and obj.plateNumber in (").append(trckIDs).append(")");
								tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
							//}		
								
								List<EzToll> TollListforCompany = genericDAO.executeSimpleQuery(tollquery.toString());
								
								if (TollListforCompany != null	&& TollListforCompany.size() > 0) {	        	
									for (Object tollObj : TollListforCompany) {
										if(tollObj!=null)
											tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
									}
								}
								
						}						
						else {
						  if(dates.contains(ticket.getUnloadDate().toString())){
							  //do nothing
						  }
						  else{
							  dates.add(ticket.getUnloadDate().toString());
							  String transferDateFrom = mysqldf.format(ticket.getUnloadDate());					
							  String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
							
							  fuellogQuery.append("select sum(obj.amount) from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
								fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
								
								List<FuelLog> fuellogListforCompany = genericDAO
								.executeSimpleQuery(fuellogQuery.toString());
								
								if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
									for(Object fuelobj:fuellogListforCompany){							
										if(fuelobj!=null)	
											fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
									}				
								}
								
								
								tollquery.append("select sum(obj.amount) from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
										+ transferDateTo
										+ " 23:59:59'");
							/*if(typeKey.equalsIgnoreCase("company"))
							{*/
								tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								tollquery.append(" and obj.plateNumber in (").append(trckIDs).append(")");
								tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
							//}		
								
								List<EzToll> TollListforCompany = genericDAO.executeSimpleQuery(tollquery.toString());
								
								if (TollListforCompany != null	&& TollListforCompany.size() > 0) {	        	
									for (Object tollObj : TollListforCompany) {
										if(tollObj!=null)
											tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
									}
								}
								
						  }
						}
					}						
				}		

					
				}

	
				wrapper.setFuellogCharge(fuelNetValue);
				wrapper.setTollTagAmount(tollNetValue);
			/*	
				
				if(dates.size()>0 && dates!=null){
					for(LocalDate obj:dates){						
						if(dateRanges.equals("")){
							dateRanges="'"+String.valueOf(obj)+" 00:00:00'";
						}
						else{
							dateRanges=dateRanges+",'"+String.valueOf(obj)+" 00:00:00'";
						}					
						System.out.println("***********");
						System.out.println("*********** the date is "+obj);
						System.out.println("***********");
					}
					System.out.println("******* the dateRange value is "+dateRanges);
				}
				System.out.println("******** unit id is "+unitIds);
				*/
				/*if(ticketsForADriver.size()>0){
					int lstindex=ticketsForADriver.size()-1;
					startLoadDate=ticketsForADriver.get(0).getLoadDate();
					endLoadDate=ticketsForADriver.get(lstindex).getUnloadDate();
					wrapper.setFromDate(sdf.format(startLoadDate));
					wrapper.setToDate(sdf.format(endLoadDate));
					System.out.println("****** the start date is "+startLoadDate);
					System.out.println("****** the end date is "+endLoadDate);
					System.out.println("****** othr value is driver "+driverName.getId());
				}*/
				
				
				if(ticketsForAlocationid.length()>0){
					int t=ticketsForAlocationid.lastIndexOf(",");
					ticketsForAlocationid.deleteCharAt(t);
					
					String query ="select sum(obj.totAmt) from Billing_New obj where obj.ticket in ("+ticketsForAlocationid+")";
					List<Billing_New> billinglist =genericDAO.executeSimpleQuery(query);
					if(!billinglist.isEmpty()&&billinglist.size()>0){
						for(Object obj:billinglist){
							//Object[] objarry=(Object[])obj;
							if(obj!=null){
							revenue=Double.parseDouble(obj.toString());
							}
						}
					}
					
				}
			/*	for (Ticket ticket : ticketsForADriver) {
					Billing billing = new Billing();

					Map criterias = new HashMap();
					if (ticket.getTicketStatus() == 2) {
						Billing invoice = null;
						criterias.put("ticket.id", ticket.getId());
						invoice = genericDAO.getByCriteria(Billing.class,
								criterias);
						if (invoice == null)
							continue;

						billing = invoice;

						//if (vehicleName.getId()==billing.getId()) {
							revenue += billing.getTotAmt();
						//}
					} 
					else {
						double amount= ProcessAmount(ticket,billing);
						revenue += amount;
					}
				}*/
					// FOR FUELLOG
				
				//***********************************************************	
				//***********************************************************
					/*System.out.println("Enetered here in new logic");
					
					System.out.println("inside ticket for loop ok ok");
					StringBuffer fuellogQuery = new StringBuffer("");						
					fuellogQuery
					.append("select sum(obj.amount) from FuelLog obj where obj.driversid='"
								+ driverName.getId()
								+ "' "
								+ "and obj.transactiondate in ("
								+ dateRanges
								+ ")" );
					if (!StringUtils.isEmpty(company)) {
						fuellogQuery.append("and  obj.company in (" + company
								+ ")");
					}
					if (!StringUtils.isEmpty(truck)) {
						String vehiclequery="select obj from Vehicle obj where obj.type=1 and obj.unit in ("
								+truck
								+")";
							
							System.out.println("******** the truck query is "+vehiclequery);
							
							List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
							String truckIds="";
							if(vehicleLists!=null && vehicleLists.size()>0){				
								int count=0;
							for(Vehicle vehicleObj : vehicleLists) {
								if(count==0){
									count++;
									truckIds=String.valueOf(vehicleObj.getId());
								}
								else{
								truckIds=truckIds+","+String.valueOf(vehicleObj.getId());
								}
							}
							}
							System.out.println("********* truck id is "+truckIds);
						
						
						fuellogQuery.append("and  obj.unit in (" + truckIds
								+ ")");
					}
					if (!StringUtils.isEmpty(terminal)) {
						fuellogQuery.append("and  obj.terminal in (" + terminal + ")");
					}
				if (!StringUtils.isEmpty(truck)) {
					fuellogQuery.append("and  obj.unit in (" + truck + ")");
				}

				
				System.out.println("********* The query is ====> "+fuellogQuery.toString());

				List<FuelLog> fuellogListforDriver = genericDAO
						.executeSimpleQuery(fuellogQuery.toString());
						
				if (fuellogListforDriver != null && fuellogListforDriver.size() > 0) {
					
					System.out.println("inside fuel if ok ok"+fuellogListforDriver.size());
					for(Object fuelobj:fuellogListforDriver){							
						if(fuelobj!=null)	
						fuelNetValue=fuelNetValue+Double.parseDouble(fuelobj.toString());
						}												
				}				    
				System.out.println("****** the net fuel valyue is "+fuelNetValue);
				wrapper.setFuellogCharge(fuelNetValue);*/
				//***********************************************************		
				//***********************************************************	
					/*
					StringBuffer fuellogQuery = new StringBuffer("");
					fuellogQuery
							.append("select obj.driversid,sum(obj.amount) from FuelLog obj where obj.driversid='"
									+ driverName.getId()
									+ "' "
									+ "and obj.transactiondate>='"
									+ dateRangeFrom
									+ "' and obj.transactiondate<= '"
									+ dateRangeTo + "'");
					if (!StringUtils.isEmpty(company)) {
						fuellogQuery.append("and  obj.company in (" + company
								+ ")");
					}
					if (!StringUtils.isEmpty(truck)) {
						String vehiclequery="select obj from Vehicle obj where obj.type=1 and obj.unit in ("
								+truck
								+")";
							
							System.out.println("******** the truck query is "+vehiclequery);
							
							List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
							String truckIds="";
							if(vehicleLists!=null && vehicleLists.size()>0){				
								int count=0;
							for(Vehicle vehicleObj : vehicleLists) {
								if(count==0){
									count++;
									truckIds=String.valueOf(vehicleObj.getId());
								}
								else{
								truckIds=truckIds+","+String.valueOf(vehicleObj.getId());
								}
							}
							}
							System.out.println("********* truck id is "+truckIds);
						
						
						fuellogQuery.append("and  obj.unit in (" + truckIds
								+ ")");
					}
					if (!StringUtils.isEmpty(terminal)) {
						fuellogQuery.append("and  obj.terminal in (" + terminal + ")");
					}

					fuellogQuery.append(" group by obj.driversid ");

					List<NetReportWrapper> fuellogListforCompany = genericDAO
							.executeSimpleQuery(fuellogQuery.toString());
					if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
						for (Object fuellogObj1 : fuellogListforCompany) {
							Object[] fuelobjArry = (Object[]) fuellogObj1;
							 Double fuelchargesForDriver = Double.parseDouble(fuelobjArry[1].toString());
							wrapper.setFuellogCharge(fuelchargesForDriver);
						}
					}
				*//*
				else{

					StringBuffer fuellogQuery = new StringBuffer("");
					fuellogQuery
							.append("select obj.driversid,sum(obj.amount) from FuelLog obj where obj.driversid='"
									+ driverName.getId()
									+ "' "
									+ "and obj.transactiondate between '"
									+ oracleFormatter.format(startLoadDate)
									+ "' and '"
									+ oracleFormatter.format(endLoadDate)+"'");
					if (!StringUtils.isEmpty(company)) {
						fuellogQuery.append("and  obj.company in (" + company
								+ ")");
					}
					if (!StringUtils.isEmpty(truck)) {
						
						String vehiclequery="select obj from Vehicle obj where obj.type=1 and obj.unit in ("
								+truck
								+")";
							
							System.out.println("******** the truck query is "+vehiclequery);
							
							List<Vehicle> vehicleLists=genericDAO.executeSimpleQuery(vehiclequery);
							String truckIds="";
							if(vehicleLists!=null && vehicleLists.size()>0){				
								int count=0;
							for(Vehicle vehicleObj : vehicleLists) {
								if(count==0){
									count++;
									truckIds=String.valueOf(vehicleObj.getId());
								}
								else{
								truckIds=truckIds+","+String.valueOf(vehicleObj.getId());
								}
							}
							}
							System.out.println("********* truck id is "+truckIds);
						
						
						fuellogQuery.append("and  obj.unit in (" + truckIds
								+ ")");
					}
					if (!StringUtils.isEmpty(terminal)) {
						fuellogQuery.append("and  obj.terminal in (" + terminal + ")");
					}

					fuellogQuery.append(" group by obj.driversid ");

					List<NetReportWrapper> fuellogListforCompany = genericDAO
							.executeSimpleQuery(fuellogQuery.toString());
					if (fuellogListforCompany != null && fuellogListforCompany.size() > 0) {
						for (Object fuellogObj1 : fuellogListforCompany) {
							Object[] fuelobjArry = (Object[]) fuellogObj1;
							 Double fuelchargesForDriver = Double.parseDouble(fuelobjArry[1].toString());
							wrapper.setFuellogCharge(fuelchargesForDriver);
						}
					}
				
					
					
				}*/
				
				
					// UP TO FOR FUELLOG

			//For subcontractor charge
					
					
					if(ticketIds.length()>0 && subticketIds.length()>0){
						
					String SubticketsForADriver = "select obj from Ticket obj where obj.driver='"
							+ d1.getId()+"'"
							+ " and obj.id in ("
							+ subticketIds
							+ ")";
						
					List<Ticket> ticketsForDriver = genericDAO.executeSimpleQuery(SubticketsForADriver);
					System.out.println("\nticketsForAcampanyOFsubcontractor.size()===>"+ ticketsForDriver.size() + "\n");				
				
					
					String tickids="";
					String tickNonInvoced="";
					List<String> str = new ArrayList<String>();
					
					for (Ticket ticket : ticketsForDriver) {						
						if (ticket.getVoucherStatus() == 2) {
							if(tickids.equals("")){
								tickids=String.valueOf(ticket.getId());
							}
							else{
								tickids=tickids+","+String.valueOf(ticket.getId());
							}						 
						}						
						else{
							if(tickNonInvoced.equals("")){
								tickNonInvoced=String.valueOf(ticket.getId());
							}
							else{
								tickNonInvoced=tickNonInvoced+","+ticket.getId();
							}
						}						
					}	
						
						
						if(!StringUtils.isEmpty(tickids)){							
							String query1="select sum(obj.totAmt) from SubcontractorBilling obj where obj.ticket in ("+tickids+")";
							System.out.println("======>>>> Query1 "+query1);
							List<SubcontractorBilling> sumtotalamount=genericDAO.executeSimpleQuery(query1);
						
							if(sumtotalamount!=null && sumtotalamount.size()>0){							
								for(Object obj:sumtotalamount){									
									if(obj!=null)									
									subchargesForCompanyInv=Double.parseDouble(obj.toString());
									
								}						
							}
							
							
							String miscellQuery="select distinct obj.subcontractorId ,obj.miscelleneousCharges from SubcontractorBilling obj where obj.ticket in ("+tickids+")";
							
							List<SubcontractorBilling> misscellamount=genericDAO.executeSimpleQuery(miscellQuery);
							
							if(misscellamount!=null && misscellamount.size()>0){							
								for(Object obj:misscellamount){	
									Object[] objs=(Object[])obj;
									
									if(objs[1]!=null)
									{
										String misamt=objs[1].toString();
										String[] miscell=misamt.split(",");										
										for(int i=0;i<miscell.length;i++){
											
											miscelleneousCharge+=Double.parseDouble(miscell[i]);
										}
										
									}
									//subchargesForCompanyInv=Double.parseDouble(obj.toString());
								}						
							}							
						}
						
						if(!StringUtils.isEmpty(tickNonInvoced)){						
							String query2="select sum(obj.totAmt) from SubcontractorBillingNew obj where obj.ticket in ("+tickNonInvoced+")";
							System.out.println("======>>>> Query2 "+query2);
							List<SubcontractorBillingNew> subtotalamount=genericDAO.executeSimpleQuery(query2);
						
							if(subtotalamount!=null && subtotalamount.size()>0){							
								for(Object obj:subtotalamount){									
									if(obj!=null)
									subchargesForCompanyNonInv=Double.parseDouble(obj.toString());
								}						
							}						
						}
						
						System.out.println("\nsubchargesForCompany=====>"+(subchargesForCompanyInv+subchargesForCompanyNonInv+miscelleneousCharge)+"\n");
						wrapper.setSubcontractorCharge(subchargesForCompanyInv+subchargesForCompanyNonInv+miscelleneousCharge);
						
						
						
						
						
						/*
						System.out.println("\nSubcontractor charge for terminal start\n");
					String SubticketsForADriver = "select obj from Ticket obj where obj.driver='"
							+ driverName.getId()+"'"
							+ " and obj.id in ("
							+ subticketIds
							+ ")";
					List<Ticket> ticketsFordriver = genericDAO.executeSimpleQuery(SubticketsForADriver);
					System.out.println("\nticketsForAdriverOFDriver.size()===>"+ ticketsFordriver.size() + "\n");
					
					
					List<String> str = new ArrayList<String>();
					for (Ticket ticket : ticketsFordriver) {
						SubcontractorBilling billing = new SubcontractorBilling();
                        
						Map criterias = new HashMap();
						if (ticket.getVoucherStatus() == 2) {
							boolean cont=false;
							double miscelleneousCharge=0.0;
							SubcontractorBilling invoice = null;
							criterias.put("ticket.id", ticket.getId());
							invoice = genericDAO.getByCriteria(SubcontractorBilling.class,criterias);
							if (invoice == null)
								continue;

							billing = invoice;

							
							if (!StringUtils.isEmpty(ticket.getVoucherNumber())&& !StringUtils.isEmpty(ticket.getVoucherDate().toString())
									&& !StringUtils.isEmpty(ticket.getCompanyLocation().getName())) 
							{
								cont = str.contains(ticket.getVoucherNumber() + "_"
										+ ticket.getSubcontractor().getId() + "_"
										+ ticket.getCompanyLocation().getId());

								if (!cont) {
									str.add(ticket.getVoucherNumber() + "_"
											+ ticket.getSubcontractor().getId() + "_"
											+ ticket.getCompanyLocation().getId());
									String subcquery = "select obj from SubcontractorInvoice obj where obj.voucherNumber='"
											+ ticket.getVoucherNumber()
											+ "' and obj.subContractorId="
											+ ticket.getSubcontractor().getId()
											+ " and obj.companyLocationId="
											+ ticket.getCompanyLocation().getId();
									List<SubcontractorInvoice> invoices = genericDAO.executeSimpleQuery(subcquery);
									if(!invoices.isEmpty()){
									if (!StringUtils.isEmpty(invoices.get(0).getMiscelleneousCharges()))
										miscelleneousCharge += Double.parseDouble(invoices.get(0).getMiscelleneousCharges());
									}
								}
							}
							
							if (companyName.getId().equals(billing.getCompanyLocationId())) {
								System.out.println("\nsubcontractor invoiced ticket TotAmt()  for Driver==>"+billing.getTotAmt()+"\n");
								System.out.println("\nbilling.getOtherCharges()for Driver==>"+billing.getOtherCharges()+"\n");
								System.out.println("\nmiscelleneousCharge)=for Driver=>"+miscelleneousCharge+"\n");
								subchargesForDriver += billing.getTotAmt()+billing.getOtherCharges()+miscelleneousCharge;
							//}
							System.out.println("\nticketsFortruckOFDriver  with VoucherStatus=2===>\n");
							
							
						} else {
							// if ticket is not invoice
							double amount=ProcessSubcontractorAmount(ticket,billing);
							subchargesForDriver += amount;
							System.out.println("\nsubchargesForDriver=====>"+subchargesForDriver+"\n");
						}
					}
					
					wrapper.setSubcontractorCharge(subchargesForDriver);
					System.out.println("\nSubcontractor charge for Driver End\n");
					*/}
					
					

               //FOR tolltag amount
			  /* To get the total for the Tolls for the Net Report by Driver, 
			   * reference back to tickets using unit number, load date and driver name. 
			   * Connect all those to get the right toll value for the given date range.*/ 
					//***********************************************************	
					//***********************************************************
            	 /* System.out.println("Enetered here in toll new logic");
					
					StringBuffer TolltagCharge = new StringBuffer("");								
					TolltagCharge.append("select sum(obj.amount) from EzToll obj where obj.transactiondate in ("
								+ dateRanges
								+ ") and obj.plateNumber in ("
								+ unitIds
								+")");

				if (!StringUtils.isEmpty(terminal)) {
					TolltagCharge.append("and  obj.terminal in ("
							+ terminal + ")");
				}
				if (!StringUtils.isEmpty(truck)) {
					TolltagCharge.append("and  obj.plateNumber in ("
							+ truck + ")");
				}
				
				System.out.println("******* the toll query is "+TolltagCharge);
				
					
				List<EzToll> TollListforCompany = genericDAO.executeSimpleQuery(TolltagCharge.toString());
				System.out.println("******** list value is "+TollListforCompany);
				System.out.println("******** the list value is "+TollListforCompany.get(0));
		        if (TollListforCompany != null	&& TollListforCompany.size() > 0) {
		        	
			       for (Object tollObj : TollListforCompany) {
			    	  if(tollObj!=null)
						tollNetValue=tollNetValue+Double.parseDouble(tollObj.toString());													   
			       }
		        }													
				wrapper.setTollTagAmount(tollNetValue);*/
				//***********************************************************	
				//***********************************************************  
            	  /*
				StringBuffer dupeztolls=new StringBuffer("");
                for(Ticket ticket:ticketsForADriver){
                	
 			            	 //if(ticket.getDriver().getFullName().equalsIgnoreCase( objArry[0].toString())){
 			        	          String query1="select obj from EzToll obj where obj.plateNumber='"
 			        	                         + ticket.getVehicle().getId()+"' and obj.transactiondate>='"
 			        	                         +ticket.getLoadDate()+"' and obj.transactiondate<= '"
 			        	                         +ticket.getUnloadDate()+"'";
                	StringBuffer query1=new StringBuffer("select obj from EzToll obj where obj.plateNumber='"
                         + ticket.getVehicle().getId()+"' and obj.transactiondate>='"
                         +ticket.getLoadDate()+"' and obj.transactiondate<= '"
                         +ticket.getUnloadDate()+"'");
                	
                           if(dupeztolls.length()>0){
                	              int i=dupeztolls.lastIndexOf(",");
                	              if(i>0){
                	                  dupeztolls.deleteCharAt(i);
                	               }
                	                query1.append("and obj.id not in("+dupeztolls+")");
                	                dupeztolls.append(",");
                	         }
 			        	                 List<EzToll> eztolls=genericDAO.executeSimpleQuery(query1.toString());
 			        	                 if(!eztolls.isEmpty() && eztolls.size()>0){
 			        	                	
 			        	                 	for(EzToll eztoll:eztolls){
 			        	                 		
 			        	                 		dupeztolls.append(eztoll.getId());
 			        	                 		dupeztolls.append(",");
 			        	                 		 
 			        	                 		tollchargesForDriver=tollchargesForDriver+eztoll.getAmount();
 			        	   	                 }
 			        	                   }
 			        	        
 			       }
 			       wrapper.setTollTagAmount(tollchargesForDriver);
              */
              
 			       //}
                //till here (FOR tolltag amount)
				
 			     
				netamount = revenue- (fuelNetValue + subchargesForCompanyInv+subchargesForCompanyNonInv +miscelleneousCharge+ tollNetValue);
				wrapper.setDriver(d1.getFullName());
				wrapper.setCompany(d1.getCompany().getName());
				wrapper.setSumTotal(revenue);
				wrapper.setNetAmount(netamount);
				wrapperlist.add(wrapper);
			}
			if(!StringUtils.isEmpty(drvid)){
				
				String drvquery="";
				if(DriverReport.equalsIgnoreCase("Drivercc") || DriverReport.equalsIgnoreCase("Driverca"))	{
		        	drvquery="select obj from Driver obj where obj.status=1 and obj.id not in ("+drvid+") and obj.company in ("+company+") and (obj.dateHired <='"+oracleFormatter.format(mainStartDate)+"' and obj.dateTerminated >='"+oracleFormatter.format(mainEndDate)+"') OR (obj.dateHired >='"+oracleFormatter.format(mainStartDate)+"' and obj.dateTerminated <='"+oracleFormatter.format(mainEndDate)+"') OR (obj.dateHired <='"+oracleFormatter.format(mainStartDate)+"' and (obj.dateTerminated >='"+oracleFormatter.format(mainStartDate)+"' and obj.dateTerminated <='"+oracleFormatter.format(mainEndDate)+"')) OR ((obj.dateHired >='"+oracleFormatter.format(mainStartDate)+"' and obj.dateHired <='"+oracleFormatter.format(mainEndDate)+"')and obj.dateTerminated >='"+oracleFormatter.format(mainEndDate)+"'))";
				}
		        else{
		        	drvquery="select obj from Driver obj where obj.status=1 and obj.id not in ("+drvid+") and (obj.dateHired <='"+oracleFormatter.format(mainStartDate)+"' and obj.dateTerminated >='"+oracleFormatter.format(mainEndDate)+"') OR (obj.dateHired >='"+oracleFormatter.format(mainStartDate)+"' and obj.dateTerminated <='"+oracleFormatter.format(mainEndDate)+"') OR (obj.dateHired <='"+oracleFormatter.format(mainStartDate)+"' and (obj.dateTerminated >='"+oracleFormatter.format(mainStartDate)+"' and obj.dateTerminated <='"+oracleFormatter.format(mainEndDate)+"')) OR ((obj.dateHired >='"+oracleFormatter.format(mainStartDate)+"' and obj.dateHired <='"+oracleFormatter.format(mainEndDate)+"')and obj.dateTerminated >='"+oracleFormatter.format(mainEndDate)+"'))";		
		        }				
				
				
				
				
				
				System.out.println("******* the vehicle query is "+drvquery );
				List<Driver> drvlist=genericDAO.executeSimpleQuery(drvquery);				
				if(drvlist!=null && drvlist.size()>0){
					for(Driver drv:drvlist){
						NetReportWrapper wrapper = new NetReportWrapper();
						wrapper.setCompany(drv.getCompany().getName());
						wrapper.setFuellogCharge(0.0);
						wrapper.setNetAmount(0.0);
						wrapper.setSubcontractorCharge(0.0);
						wrapper.setSumTotal(0.0);
						wrapper.setDriver(drv.getFullName());
						wrapper.setTollTagAmount(0.0);					
						wrapperlist.add(wrapper);
					}
					
				}
				
			}
			
			}// for(int no=0;no<ticketsdestinct.size();no++)			
			 if (wrapperlist.size() > 0) {
				 System.out.println("***** enetered here");
				    Collections.sort(wrapperlist, new Comparator<NetReportWrapper>() {
				        @Override
				        public int compare(final NetReportWrapper object1, final NetReportWrapper object2) {
				            return object1.getDriver().compareTo(object2.getDriver());
				        }
				       } );
				   }
		}// if(TruckReport!=null)	

		return wrapperlist;
	}
	
	
	
	
	double ProcessAmount(Ticket ticket,Billing billing){
		System.out.println("\nTicket is not invoiced\n");
		Map<String, List<BillingRate>> billingMap = new HashMap<String, List<BillingRate>>();
		BillingRate billingRate = null;
		Double sumFuelSurcharge = 0.0;
		Double sumTonnage = 0.0;
		Double sumDemmurage = 0.0;

		try {
			Long destination_id;
			Location location = genericDAO.getById(
					Location.class, ticket.getDestination()
							.getId());
			if (location.getName().equalsIgnoreCase("grows")
					|| location.getName().equalsIgnoreCase(
							"tullytown")) {
				destination_id = 91l;
			} else {
				destination_id = ticket.getDestination()
						.getId();
			}
			String rateQuery = "select obj from BillingRate obj where obj.transferStation='"
					+ ticket.getOrigin().getId()
					+ "' and obj.landfill='"
					+ destination_id
					+ "'";
			String key = ticket.getOrigin().getId() + "_"
					+ destination_id;
			List<BillingRate> fs = null;
			fs = billingMap.get(key);
			if (fs == null) {
				fs = genericDAO.executeSimpleQuery(rateQuery);
				billingMap.put(key, fs);
			}

			if (fs != null && fs.size() > 0) {
				for (BillingRate rate : fs) {
					if (rate.getRateUsing() == null) {
						billingRate = rate;
						break;
					} else if (rate.getRateUsing() == 1) {
						// calculation for a load date
						if ((ticket.getLoadDate().getTime() >= rate
								.getValidFrom().getTime())
								&& (ticket.getLoadDate()
										.getTime() <= rate
										.getValidTo().getTime())) {
							billingRate = rate;
							break;
						}
					} else if (rate.getRateUsing() == 2) {
						// calculation for a unload date
						if ((ticket.getUnloadDate().getTime() >= rate
								.getValidFrom().getTime())
								&& (ticket.getUnloadDate()
										.getTime() <= rate
										.getValidTo().getTime())) {
							billingRate = rate;
							break;
						}
					}
				}
			}// if (fs != null && fs.size() > 0)

		} catch (Exception e) {

		}
		if (billingRate != null) {
			// billing.setCustomer(billingRate.getCustomername().getName());
			int billUsing = (billingRate.getBillUsing() == null) ? 1
					: billingRate.getBillUsing();
			int rateType = billingRate.getRateType();
			if (billUsing == 1) {
				billing.setBillUsing("Transfer");
			}
			if (billUsing == 2) {
				billing.setBillUsing("Landfill");
			}
			if (billUsing == 1) {
				if (rateType == 2 || rateType == 3) {
					Double minbilgrosswt = billingRate
							.getMinbillablegrossWeight();
					if (minbilgrosswt != null
							&& ticket.getTransferGross() < minbilgrosswt) {
						billing.setEffectiveGrossWt(minbilgrosswt);
						billing.setMinimumbillablegrossweight(minbilgrosswt);
						billing.setEffectiveTareWt(ticket
								.getTransferTare());
						Double originNetWt = minbilgrosswt
								- ticket.getTransferTare();
						billing.setEffectiveNetWt(originNetWt);
						billing.setEffectiveTonsWt(originNetWt / 2000.0);
					} else {
						billing.setEffectiveGrossWt(ticket
								.getTransferGross());
						billing.setMinimumbillablegrossweight(minbilgrosswt);
						billing.setEffectiveTareWt(ticket
								.getTransferTare());
						billing.setEffectiveNetWt(ticket
								.getTransferNet());
						billing.setEffectiveTonsWt(ticket
								.getTransferTons());
					}
				}
			} else {
				if (rateType == 2 || rateType == 3) {
					Double minbilgrosswt = billingRate
							.getMinbillablegrossWeight();
					if (minbilgrosswt != null
							&& ticket.getLandfillGross() < minbilgrosswt) {
						billing.setEffectiveGrossWt(minbilgrosswt);
						billing.setMinimumbillablegrossweight(minbilgrosswt);
						billing.setEffectiveTareWt(ticket
								.getLandfillTare());
						Double destinationNetWt = minbilgrosswt
								- ticket.getLandfillTare();
						billing.setEffectiveNetWt(destinationNetWt);
						billing.setEffectiveTonsWt(destinationNetWt / 2000.0);

					} else {
						billing.setEffectiveGrossWt(ticket
								.getLandfillGross());
						billing.setMinimumbillablegrossweight(minbilgrosswt);
						billing.setEffectiveTareWt(ticket
								.getLandfillTare());
						billing.setEffectiveNetWt(ticket
								.getLandfillNet());
						billing.setEffectiveTonsWt(ticket
								.getLandfillTons());
					}
				}
			}
			// int rateType = billingRate.getRateType();
			if (rateType == 1) {
				if (billUsing == 1) {
					Double minbilgrosswt = billingRate
							.getMinbillablegrossWeight();
					if (minbilgrosswt != null
							&& ticket.getTransferGross() < minbilgrosswt) {
						billing.setEffectiveGrossWt(minbilgrosswt);
						billing.setMinimumbillablegrossweight(minbilgrosswt);
						billing.setEffectiveTareWt(ticket
								.getTransferTare());
						Double originNetWt = minbilgrosswt
								- ticket.getTransferTare();
						billing.setEffectiveNetWt(originNetWt);
					} else {
						billing.setEffectiveGrossWt(ticket
								.getTransferGross());
						billing.setMinimumbillablegrossweight(minbilgrosswt);
						billing.setEffectiveTareWt(ticket
								.getTransferTare());
						billing.setEffectiveNetWt(ticket
								.getTransferNet());
					}
				} else {
					Double minbilgrosswt = billingRate
							.getMinbillablegrossWeight();
					if (minbilgrosswt != null
							&& ticket.getLandfillGross() < minbilgrosswt) {
						billing.setEffectiveGrossWt(minbilgrosswt);
						billing.setMinimumbillablegrossweight(minbilgrosswt);
						billing.setEffectiveTareWt(ticket
								.getLandfillTare());
						Double destinationNetWt = minbilgrosswt
								- ticket.getLandfillTare();
						billing.setEffectiveNetWt(destinationNetWt);
					} else {
						billing.setEffectiveGrossWt(ticket
								.getLandfillGross());
						billing.setMinimumbillablegrossweight(minbilgrosswt);
						billing.setEffectiveTareWt(ticket
								.getLandfillTare());
						billing.setEffectiveNetWt(ticket
								.getLandfillNet());
					}
				}
				billing.setRate(billingRate.getValue());
				billing.setAmount((billing.getEffectiveNetWt() / 8.34)
						* billingRate.getValue());
			} else if (rateType == 2) {
				// per load
				billing.setRate(billingRate.getValue());
				billing.setAmount(billingRate.getValue());
			} else if (rateType == 3) {
				// per tonne
				billing.setRate(billingRate.getValue());
				billing.setAmount(billing.getEffectiveTonsWt()
						* billingRate.getValue());
			}
			// sumGallon+=billing.getGallon();
			// sumBillableTon+=billing.getEffectiveTonsWt();
			// sumOriginTon+=billing.getOriginTonsWt();
			// sumDestinationTon+=billing.getDestinationTonsWt();
			// sumNet+=billing.getEffectiveNetWt();
			// sumAmount+=billing.getAmount();
			billing.setAmount(MathUtil.roundUp(
					billing.getAmount(), 2));
			String fuelSurchargeType = billingRate
					.getFuelSurchargeType();
			Double fuelSurcharge = 0.0;
			if ("N".equalsIgnoreCase(fuelSurchargeType)) {
				fuelSurcharge = 0.0;
			}
			if ("M".equalsIgnoreCase(fuelSurchargeType)) {
				Double fuelSurchargePerTon = billingRate
						.getSurchargePerTon();
				Double surchargeAmount = billingRate
						.getSurchargeAmount();
				if (fuelSurchargePerTon == null
						&& surchargeAmount == null)
					fuelSurcharge = 0.0;
				else if (fuelSurchargePerTon != null) {
					fuelSurcharge = billing
							.getEffectiveTonsWt()
							* fuelSurchargePerTon;
				} else {
					fuelSurcharge = surchargeAmount;
				}
			}

			if ("A".equalsIgnoreCase(fuelSurchargeType)) {
				FuelSurchargePadd currentPadd = billingRate
						.getPadd();
				if (currentPadd != null) {
					Integer paddUsing = billingRate
							.getPaddUsing();
					Double padd = 0.0;
					StringBuffer paddBuffer = new StringBuffer(
							"select obj from FuelSurchargePadd obj where obj.code='"
									+ currentPadd.getCode()
									+ "'");
					Date effectiveDate = null;
					if (paddUsing != null) {
						if (paddUsing == 1) {
							effectiveDate = ticket
									.getLoadDate();
						} else if (paddUsing == 2) {
							effectiveDate = ticket
									.getUnloadDate();
						} else if (paddUsing == 3) {
							effectiveDate = ticket
									.getBillBatch();
						}
					}
					if (effectiveDate != null) {
						paddBuffer.append(" and obj.validTo>='"
								+ mysqldf.format(effectiveDate)
								+ "' and obj.validFrom<='"
								+ mysqldf.format(effectiveDate)
								+ "'");
					}
					List<FuelSurchargePadd> padds = genericDAO
							.executeSimpleQuery(paddBuffer
									.toString());
					if (padds != null && padds.size() > 0) {
						padd = padds.get(0).getAmount();
					}
					if ((padd != -1)
							&& (billingRate.getPeg() != null)
							&& (billingRate.getMiles() != null)) {
						int sign = 1;
						if ((padd - billingRate.getPeg()) < 0) {
							sign = -1;
						}
						double term = Math.floor(sign
								* (padd - billingRate.getPeg())
								/ 0.05);
						fuelSurcharge = sign * term
								* billingRate.getMiles() * 0.01;
					}
					if ((padd != -1)
							&& (billingRate.getPeg() != null)
							&& (billingRate.getMiles() == null)) {
						double percentage = Math
								.floor((padd - billingRate
										.getPeg()) / 0.08);
						if (rateType == 2) {
							fuelSurcharge = percentage
									* billingRate.getValue()
									* 0.01;
						} else if (rateType == 3) {
							// per tonne
							fuelSurcharge = billing
									.getEffectiveTonsWt()
									* billingRate.getValue()
									* percentage * 0.01;
						}
					}
				}
				// Weekly fuel surcharge calculation
				int wfsr = billingRate
						.getFuelsurchargeweeklyRate();
				if (wfsr == 1) {
					StringBuffer weeklyRateQuery = new StringBuffer(
							"select obj from FuelSurchargeWeeklyRate obj where obj.transferStations="
									+ ticket.getOrigin()
											.getId()
									+ " and obj.landfillStations="
									+ ticket.getDestination()
											.getId() + " ");
					FuelSurchargeWeeklyRate fuelsurchargeweeklyrate = null;
					Date effectiveDatePadd = null;
					if (billingRate.getWeeklyRateUsing() != null) {
						if (billingRate.getWeeklyRateUsing() == 1) {
							effectiveDatePadd = ticket
									.getLoadDate();
						}
						if (billingRate.getWeeklyRateUsing() == 2) {
							effectiveDatePadd = ticket
									.getUnloadDate();
						}
						if (billingRate.getWeeklyRateUsing() == 3) {
							effectiveDatePadd = ticket
									.getBillBatch();
						}
						weeklyRateQuery
								.append(" and obj.fromDate <= '"
										+ mysqldf
												.format(effectiveDatePadd)
										+ "' and obj.toDate >= '"
										+ mysqldf
												.format(effectiveDatePadd)
										+ "'");
					}
					List<FuelSurchargeWeeklyRate> listfswr = genericDAO
							.executeSimpleQuery(weeklyRateQuery
									.toString());
					if (listfswr != null && listfswr.size() > 0) {
						fuelsurchargeweeklyrate = listfswr
								.get(0);
					}
					if (fuelsurchargeweeklyrate != null) {
						int fswrateType = fuelsurchargeweeklyrate
								.getRateType();
						if (fswrateType == 3) {
							fuelSurcharge = billing
									.getEffectiveTonsWt()
									* fuelsurchargeweeklyrate
											.getFuelSurchargeRate();
						}
						if (fswrateType == 2) {
							fuelSurcharge = fuelsurchargeweeklyrate
									.getFuelSurchargeRate();
						}

						if (fswrateType == 5) {
							fuelSurcharge = fuelsurchargeweeklyrate
									.getFuelSurchargeRate()
									* billing.getAmount();
						}

						if (fswrateType == 1) {
							fuelSurcharge = (billing
									.getEffectiveNetWt() / 8.34)
									* fuelsurchargeweeklyrate
											.getFuelSurchargeRate();
						}
					}
				}
			}// end of Weekly fuel surcharge calculation
			sumFuelSurcharge += fuelSurcharge;
			fuelSurcharge = MathUtil.roundUp(fuelSurcharge, 2);
			billing.setFuelSurcharge(fuelSurcharge);

			// if (billingRate.getTonnagePremium() != null) {
			if (billingRate.getTonnagePremium().getCode() != null) {
				Double premiumTonne = billingRate
						.getTonnagePremium().getPremiumTonne();
				Double rate = billingRate.getTonnagePremium()
						.getRate();
				if (billing.getEffectiveTonsWt() > premiumTonne) {
					billing.setTonnagePremium((billing
							.getEffectiveTonsWt() - premiumTonne)
							* rate);
				}
			} else {
				billing.setTonnagePremium(0.0);
			}
			sumTonnage += billing.getTonnagePremium();
			billing.setTonnagePremium(MathUtil.roundUp(
					billing.getTonnagePremium(), 2));
			if(billingRate.getDemmurageCharge()!=null){
			if (billingRate.getDemmurageCharge().getDemurragecode() != null) {
				Integer chargeAfterTime = billingRate.getDemmurageCharge().getChargeAfter();							
				Integer incrementTime = billingRate.getDemmurageCharge().getTimeIncrements();
				Double rate = billingRate.getDemmurageCharge().getDemurragerate();
				if(billingRate.getDemmurageCharge().getTimesUsed().equals("1")){
					String[] landfillInhourMin = ticket.getLandfillTimeIn().split(":");
				    int landfillInhour = Integer.parseInt(landfillInhourMin[0]);
				    int landfillInmins = Integer.parseInt(landfillInhourMin[1]);
				    int landfillInhoursInMins = landfillInhour * 60;
				    int landfilltimein = landfillInhoursInMins+landfillInmins;
				   
				    String[] landfillOuthourMin = ticket.getLandfillTimeOut().split(":");
				    int landfillOuthour = Integer.parseInt(landfillOuthourMin[0]);
				    int landfillOutmins = Integer.parseInt(landfillOuthourMin[1]);
				    int landfillOuthoursInMins = landfillOuthour * 60;
				    int landfilltimeout = landfillOuthoursInMins+landfillOutmins;
				   
				    int diffTime = landfilltimeout - landfilltimein;
				    if(diffTime < 0){
				    	diffTime = 1440+diffTime;
				    }
				    double minCharge = 0.0;
				    if(diffTime > chargeAfterTime){
				    	minCharge = rate;
				    	
				    	int timeRemaining = diffTime - (chargeAfterTime+incrementTime);
				    	double numberOfIteration = (double)timeRemaining / (double)incrementTime;					    	
				    	for(int i=0;i<numberOfIteration;i++){					    		
				    		//if(timeRemaining > incrementTime){
				    			minCharge = minCharge + rate;
				    			timeRemaining = timeRemaining - incrementTime;
				    		//}
				    	}					    	
				    }	
				    billing.setDemurrageCharge(minCharge);
				}
				else if(billingRate.getDemmurageCharge().getTimesUsed().equals("2")){
					String[] landfillInhourMin = ticket.getTransferTimeIn().split(":");
				    int landfillInhour = Integer.parseInt(landfillInhourMin[0]);
				    int landfillInmins = Integer.parseInt(landfillInhourMin[1]);
				    int landfillInhoursInMins = landfillInhour * 60;
				    int landfilltimein = landfillInhoursInMins+landfillInmins;				    
				    String[] landfillOuthourMin = ticket.getTransferTimeOut().split(":");
				    int landfillOuthour = Integer.parseInt(landfillOuthourMin[0]);
				    int landfillOutmins = Integer.parseInt(landfillOuthourMin[1]);
				    int landfillOuthoursInMins = landfillOuthour * 60;
				    int landfilltimeout = landfillOuthoursInMins+landfillOutmins;
				    
				    int diffTime = landfilltimeout - landfilltimein;
				    if(diffTime < 0){
				    	diffTime = 1440+diffTime;
				    }
				    
				    double minCharge = 0.0;
				    if(diffTime > chargeAfterTime){
				    	minCharge = rate;
				    	
				    	int timeRemaining = diffTime - (chargeAfterTime+incrementTime);
				    	double numberOfIteration = (double) timeRemaining / (double) incrementTime;					    	
				    	for(int i=0;i<numberOfIteration;i++){					    		
				    		//if(timeRemaining > incrementTime){
				    			minCharge = minCharge + rate;
				    			timeRemaining = timeRemaining - incrementTime;
				    		//}
				    	}
				    	
				    }
				    
				    billing.setDemurrageCharge(minCharge);
				}
				
			} 
			else {
				billing.setDemurrageCharge(0.0);
			}
		}
		else{
			billing.setDemurrageCharge(0.0);
		}
			
			
			sumDemmurage += billing.getDemurrageCharge();
			billing.setDemurrageCharge(MathUtil.roundUp(
					billing.getDemurrageCharge(), 2));

		} else {
			billing.setRate(0.0);
			billing.setFuelSurcharge(0.0);
		}
		double amount = billing.getAmount()
				+ billing.getFuelSurcharge()
				+ billing.getDemurrageCharge()
				+ billing.getTonnagePremium();
		return amount;
	}
	
	double ProcessSubcontractorAmount(Ticket ticket,SubcontractorBilling billing){
		double amount=0.0;
		double sumTotal=0.0;
		
		double sumOtherCharges=0.0;
		double sumAmount=0.0;
		
		double sumFuelSurcharge=0.0;
		SubcontractorRate billingRate = null;
		try {
			String rateQuery = "select obj from SubcontractorRate obj where obj.subcontractor='"
					+ ticket.getSubcontractor().getId()
					+ "' and obj.transferStation='"
					+ ticket.getOrigin().getId()
					+ "' and obj.landfill='"
					+ ticket.getDestination().getId()
					+ "' order by obj.validFrom desc";
			List<SubcontractorRate> fs = genericDAO
					.executeSimpleQuery(rateQuery);
			if (fs != null && fs.size() > 0) {
				for (SubcontractorRate rate : fs) {
					if (rate.getRateUsing() == null) {
						billingRate = rate;
						break;
					} else if (rate.getRateUsing() == 1) {
						// calculation for a load date
						if ((ticket.getLoadDate().getTime() >= rate
								.getValidFrom().getTime())
								&& (ticket.getLoadDate().getTime() <= rate
										.getValidTo().getTime())) {
							billingRate = rate;
							break;
						}
					} else if (rate.getRateUsing() == 2) {
						// calculation for a unload date
						if ((ticket.getUnloadDate().getTime() >= rate
								.getValidFrom().getTime())
								&& (ticket.getUnloadDate().getTime() <= rate
										.getValidTo().getTime())) {
							billingRate = rate;
							break;
						}
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		//
		if (billingRate != null) {
			int billUsing = (billingRate.getBillUsing() == null) ? 1
					: billingRate.getBillUsing();
			int rateType = billingRate.getRateType();
			if (billUsing == 1) {
				billing.setBillUsing("Transfer");
			}
			if (billUsing == 2) {
				billing.setBillUsing("Landfill");
			}
			if (billUsing == 1) {
				if (rateType == 2 || rateType == 3) {
					Double minbilgrosswt = billingRate
							.getMinbillablegrossWeight();
					if (minbilgrosswt != null
							&& ticket.getTransferGross() < minbilgrosswt) {
						billing.setEffectiveGrossWt(minbilgrosswt);
						billing.setMinimumbillablegrossweight(minbilgrosswt);
						billing.setEffectiveTareWt(ticket
								.getTransferTare());
						Double originNetWt = minbilgrosswt
								- ticket.getTransferTare();
						billing.setEffectiveNetWt(originNetWt);
						billing.setEffectiveTonsWt(originNetWt / 2000.0);
					} else {
						billing.setEffectiveGrossWt(ticket
								.getTransferGross());
						billing.setMinimumbillablegrossweight(minbilgrosswt);
						billing.setEffectiveTareWt(ticket
								.getTransferTare());
						billing.setEffectiveNetWt(ticket
								.getTransferNet());
						billing.setEffectiveTonsWt(ticket
								.getTransferTons());
					}
				}
			} else {
				if (rateType == 2 || rateType == 3) {
					Double minbilgrosswt = billingRate
							.getMinbillablegrossWeight();
					if (minbilgrosswt != null
							&& ticket.getLandfillGross() < minbilgrosswt) {
						billing.setEffectiveGrossWt(minbilgrosswt);
						billing.setMinimumbillablegrossweight(minbilgrosswt);
						billing.setEffectiveTareWt(ticket
								.getLandfillTare());
						Double destinationNetWt = minbilgrosswt
								- ticket.getLandfillTare();
						billing.setEffectiveNetWt(destinationNetWt);
						billing.setEffectiveTonsWt(destinationNetWt / 2000.0);

					} else {
						billing.setEffectiveGrossWt(ticket
								.getLandfillGross());
						billing.setMinimumbillablegrossweight(minbilgrosswt);
						billing.setEffectiveTareWt(ticket
								.getLandfillTare());
						billing.setEffectiveNetWt(ticket
								.getLandfillNet());
						billing.setEffectiveTonsWt(ticket
								.getLandfillTons());
					}
				}
			}
			// int rateType = billingRate.getRateType();
			if (rateType == 1) {
				if (billUsing == 1) {
					Double minbilgrosswt = billingRate
							.getMinbillablegrossWeight();
					if (minbilgrosswt != null
							&& ticket.getTransferGross() < minbilgrosswt) {
						billing.setEffectiveGrossWt(minbilgrosswt);
						billing.setMinimumbillablegrossweight(minbilgrosswt);
						billing.setEffectiveTareWt(ticket
								.getTransferTare());
						Double originNetWt = minbilgrosswt
								- ticket.getTransferTare();
						billing.setEffectiveNetWt(originNetWt);
					} else {
						billing.setEffectiveGrossWt(ticket
								.getTransferGross());
						billing.setMinimumbillablegrossweight(minbilgrosswt);
						billing.setEffectiveTareWt(ticket
								.getTransferTare());
						billing.setEffectiveNetWt(ticket
								.getTransferNet());
					}
				} else {
					Double minbilgrosswt = billingRate
							.getMinbillablegrossWeight();
					if (minbilgrosswt != null
							&& ticket.getLandfillGross() < minbilgrosswt) {
						billing.setEffectiveGrossWt(minbilgrosswt);
						billing.setMinimumbillablegrossweight(minbilgrosswt);
						billing.setEffectiveTareWt(ticket
								.getLandfillTare());
						Double destinationNetWt = minbilgrosswt
								- ticket.getLandfillTare();
						billing.setEffectiveNetWt(destinationNetWt);
					} else {
						billing.setEffectiveGrossWt(ticket
								.getLandfillGross());
						billing.setMinimumbillablegrossweight(minbilgrosswt);
						billing.setEffectiveTareWt(ticket
								.getLandfillTare());
						billing.setEffectiveNetWt(ticket
								.getLandfillNet());
					}
				}
				billing.setRate(billingRate.getValue());
				billing.setAmount((billing.getEffectiveNetWt() / 8.34)
						* billingRate.getValue());
			} else if (rateType == 2) {
				// per load
				billing.setRate(billingRate.getValue());
				billing.setAmount(billingRate.getValue());
			} else if (rateType == 3) {
				// per tonne
				billing.setRate(billingRate.getValue());
				billing.setAmount(billing.getEffectiveTonsWt()
						* billingRate.getValue());
			}
			/*sumBillableTon += billing.getEffectiveTonsWt();
			sumOriginTon += billing.getOriginTonsWt();
			sumDestinationTon += billing.getDestinationTonsWt();
			sumNet += billing.getEffectiveNetWt();*/
			sumAmount += billing.getAmount();
			billing.setAmount(MathUtil.roundUp(billing.getAmount(), 2));

			Double otherCharges = billingRate.getOtherCharges();
			otherCharges = MathUtil.roundUp(otherCharges, 2);
			billing.setOtherCharges(otherCharges);
			sumOtherCharges += otherCharges;

			Double fuelSurcharge = billingRate.getFuelSurchargeAmount();
			fuelSurcharge = MathUtil.roundUp(fuelSurcharge, 2);
			billing.setFuelSurcharge(fuelSurcharge);
			sumFuelSurcharge += fuelSurcharge;

			sumOtherCharges = MathUtil.roundUp(sumOtherCharges, 2);
			sumFuelSurcharge = MathUtil.roundUp(sumFuelSurcharge, 2);

		} else {

			billing.setRate(0.0);
			billing.setFuelSurcharge(0.0);
			/*sumOriginTon += billing.getOriginTonsWt();
			sumDestinationTon += billing.getDestinationTonsWt();*/

		}
		if (billingRate != null) {
			amount = billing.getAmount() + billing.getFuelSurcharge()+ billing.getOtherCharges();
			billing.setTotAmt(amount);
		}
		/*sumBillableTon = MathUtil.roundUp(sumBillableTon, 2);*/
        /*sumOriginTon = MathUtil.roundUp(sumOriginTon, 2);
        sumDestinationTon = MathUtil.roundUp(sumDestinationTon, 2);*/
        /*sumNet = MathUtil.roundUp(sumNet, 2);*/
       // sumAmount = MathUtil.roundUp(sumAmount, 2);
		sumTotal = sumAmount + sumFuelSurcharge + sumOtherCharges;
		
		System.out.println("\nFor Subcontractor --sumtotal===>"+sumTotal);
		
		
		
		return sumTotal;
	}
	
}
