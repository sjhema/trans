package com.primovision.lutransport.controller.hr;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.ValidationException;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;

import com.google.gson.Gson;
import com.primovision.lutransport.controller.BaseController;
import com.primovision.lutransport.controller.CRUDController;
import com.primovision.lutransport.controller.editor.AbstractModelEditor;
import com.primovision.lutransport.core.util.DateUtil;
import com.primovision.lutransport.core.util.MathUtil;
import com.primovision.lutransport.core.util.ReportDateUtil;
import com.primovision.lutransport.model.Driver;
import com.primovision.lutransport.model.Location;
import com.primovision.lutransport.model.SearchCriteria;
import com.primovision.lutransport.model.SubContractor;
import com.primovision.lutransport.model.Ticket;
import com.primovision.lutransport.model.Vehicle;
import com.primovision.lutransport.model.hr.BonusType;
import com.primovision.lutransport.model.hr.EmpBonusTypesList;
//import com.primovision.lutransport.model.hr.Employee;
import com.primovision.lutransport.model.hr.EmployeeBonus;
import com.primovision.lutransport.model.hr.EmployeeCatagory;
import com.primovision.lutransport.service.DynamicReportService;
import com.primovision.lutransport.service.HrReportService;
import com.primovision.lutransport.model.hr.MiscellaneousAmount;
import com.primovision.lutransport.model.report.Summary;


@Controller
@RequestMapping("/hr/miscellaneousamount")
public class MiscellaneousAmountController extends CRUDController<MiscellaneousAmount> {	
	
	public MiscellaneousAmountController() {		
		setUrlContext("/hr/miscellaneousamount");
	}
		
		@Autowired
		protected HrReportService hrReportService;
		
		public void setHrReportService(
				HrReportService hrReportService) {
			this.hrReportService = hrReportService;
		}
		
		@Override
		 public void initBinder(WebDataBinder binder) { 
			SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");
			dateFormat.setLenient(false);
			binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true));
			binder.registerCustomEditor(Location.class, new AbstractModelEditor(Location.class));			
			binder.registerCustomEditor(Driver.class, new AbstractModelEditor(Driver.class));
			
		}
		
		public void setupCreate(ModelMap model, HttpServletRequest request) {
			SearchCriteria criteria = (SearchCriteria) request.getSession().getAttribute("searchCriteria");			
			Map criterias = new HashMap();
			criterias.put("status", 1);
			model.addAttribute("employees", genericDAO.findByCriteria(Driver.class, criterias,"fullName",false));
			criterias.clear();	
			criterias.put("type", 3);
			model.addAttribute("companies",genericDAO.findByCriteria(Location.class, criterias,"name",false));
			criterias.put("type", 4);
			model.addAttribute("terminals", genericDAO.findByCriteria(Location.class, criterias,"name",false));
			criterias.clear();		
			model.addAttribute("miscellaneousDesc", genericDAO.executeSimpleQuery("select obj from SetupData obj where dataType='Miscellaneous_Desc'  order by ABS(obj.dataValue)"));
		}
		
		@Override
		public void setupList(ModelMap model, HttpServletRequest request) {
			populateSearchCriteria(request, request.getParameterMap());
			setupCreate(model, request);
		}
		
		
		@Override
		public String list(ModelMap model, HttpServletRequest request) {
			setupList(model, request);
			SearchCriteria criteria = (SearchCriteria) request.getSession()
					.getAttribute("searchCriteria");
			 model.addAttribute("list",genericDAO.search(getEntityClass(), criteria));
			return urlContext + "/list";
		}
		
		@Override
		public String save(HttpServletRequest request,@ModelAttribute("modelObject") MiscellaneousAmount entity,
				BindingResult bindingResult, ModelMap model) {
			
			request.getSession().setAttribute("company", entity.getCompany());
			request.getSession().setAttribute("terminal", entity.getTerminal());			
			request.getSession().setAttribute("batchFrom", entity.getBatchFrom());
			request.getSession().setAttribute("batchTo", entity.getBatchTo());
			request.getSession().setAttribute("miscNotes", entity.getMiscNotes());		
			
			
			if(entity.getCompany()==null){				
				bindingResult.rejectValue("company", "error.select.option",null, null);
			}
			
			if(entity.getTerminal()==null){
				bindingResult.rejectValue("terminal", "error.select.option",null, null);
			}
			
			if(entity.getDriver()==null){
				bindingResult.rejectValue("driver", "error.select.option",null, null);
			}		
			
			if(entity.getMisamount()==null){
				bindingResult.rejectValue("misamount", "error.select.option",null, null);
			}
			 
		    if(entity.getMiscNotes().equals("")){
				bindingResult.rejectValue("miscNotes", "error.select.option",null, null);
			}
			
			
			 
				
				try {
					getValidator().validate(entity, bindingResult);
				} catch (ValidationException e) {
					e.printStackTrace();
					log.warn("Error in validation :" + e);
				}
				// return to form if we had errors
				if (bindingResult.hasErrors()) {
					setupCreate(model, request);
					return urlContext + "/form";
				}
				beforeSave(request, entity, model);
				// merge into datasource
				genericDAO.saveOrUpdate(entity);
				cleanUp(request);
				
				setupCreate(model, request);
				request.getSession().setAttribute("msg",
						"Record added successfully");
				
				if(!StringUtils.isEmpty(request.getParameter("id")) && request.getParameter("id")!=null){
					
					return "redirect:list.do";
				}
				else{
					
					return "redirect:create.do";
				}
			
		}
		
		
		@Override
		protected String processAjaxRequest(HttpServletRequest request,String action, Model model) 
		{
			
			if("findDCompany".equalsIgnoreCase(action)){
	 			if(!StringUtils.isEmpty(request.getParameter("driver"))){
	 				List<Location> company=new ArrayList<Location>();
	 				Driver driver=genericDAO.getById(Driver.class,Long.parseLong(request.getParameter("driver")));
	 				company.add(driver.getCompany());
	 				Gson gson = new Gson();
	 				return gson.toJson(company);
	 			}
	 			else{
	 				Map criterias = new HashMap();
					criterias.put("type", 3);
					List<Location> company=new ArrayList<Location>();
					company=genericDAO.findByCriteria(Location.class, criterias,"name",false);
					Gson gson = new Gson();
					return gson.toJson(company);
	 			}
	 		
	 		}
	 		if("findDTerminal".equalsIgnoreCase(action)){
	 			if(!StringUtils.isEmpty(request.getParameter("driver"))){
	 				List<Location> terminal=new ArrayList<Location>();
	 				Driver driver=genericDAO.getById(Driver.class,Long.parseLong(request.getParameter("driver")));
	 				terminal.add(driver.getTerminal());
	 				Gson gson = new Gson();
	 				return gson.toJson(terminal);
	 			}
	 			else{
	 				Map criterias = new HashMap();
					criterias.put("type", 4);
					List<Location> terminal=new ArrayList<Location>();
					terminal=genericDAO.findByCriteria(Location.class, criterias,"name",false);
					Gson gson = new Gson();
					return gson.toJson(terminal);
	 			}
	 		
	 		}
	 		
	 		if("findDCategory".equalsIgnoreCase(action)){
	 			if(!StringUtils.isEmpty(request.getParameter("driver"))){
	 				List<EmployeeCatagory> category=new ArrayList<EmployeeCatagory>();
	 				Driver driver=genericDAO.getById(Driver.class,Long.parseLong(request.getParameter("driver")));
	 				category.add(driver.getCatagory());
	 				Gson gson = new Gson();
	 				return gson.toJson(category);
	 			}
	 			else{
	 				Map criterias = new HashMap();
	 				List<EmployeeCatagory> category=new ArrayList<EmployeeCatagory>();
	 				category=genericDAO.findByCriteria(EmployeeCatagory.class, criterias,"name",false);
	 				Gson gson = new Gson();
	 				return gson.toJson(category);
	 			}
	 		
	 		}
	 		
	 		if("findhireex".equalsIgnoreCase(action)){
	 			List<String> list = new ArrayList<String>();
	 			if(!StringUtils.isEmpty(request.getParameter("driver"))){
	 				Driver driver=genericDAO.getById(Driver.class,Long.parseLong(request.getParameter("driver")));
	 				 SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");
	 				Date dateHired = driver.getDateHired();
	 				list.add(dateFormat.format(dateHired));
	 				Calendar currentDate = Calendar.getInstance();
	 				int d=DateUtil.daysBetween(dateHired, currentDate.getTime());
	 			  int year	=(d /365);
	 			  double days=(d %365);
	 			  
	 			  if(days>30){
	 				 double month=(days/30);
	 				int finmonths=(int)MathUtil.roundUp(month, 0);
	 				StringBuffer exp=new StringBuffer("");
	 				if(finmonths>11){
	 					exp.append((year+1)+".0");
	 				}else{
	 					exp.append(year+"."+finmonths);
	 				}
	 				 list.add(exp.toString());
	 			  }
	 				
	 			}
	 			else{
	 				list.add("");
	 				list.add("");
	 			}
	 			Gson gson = new Gson();
					return gson.toJson(list);
	 		}
			if("findref".equalsIgnoreCase(action)){
				List<String> list = new ArrayList<String>();
				if(!StringUtils.isEmpty(request.getParameter("driver"))){
	 				Driver driver=genericDAO.getById(Driver.class,Long.parseLong(request.getParameter("driver")));
	 				 SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");
	 				Date dateHired = driver.getDateHired();
	 				list.add(dateFormat.format(dateHired));
	 				Gson gson = new Gson();
					return gson.toJson(list);
				}
			}
			
			if("findamount".equalsIgnoreCase(action)){
				if(!StringUtils.isEmpty(request.getParameter("bid"))){
					String idin=(String)request.getParameter("bid");
					String ids[]=idin.split(",");
					List<BonusType> bonusTypes=new ArrayList<BonusType>();
					for(String id:ids){
						System.out.println("\n id-->"+id);
						if(!StringUtils.isEmpty(id)){
						BonusType bonusType=genericDAO.getById(BonusType.class,Long.parseLong(id));
						bonusTypes.add(bonusType);
						}
					}
					//List<String> list = new ArrayList<String>();
					/*BonusType bonusType=genericDAO.getById(BonusType.class,Long.parseLong(request.getParameter("bid")));*/
				//	DecimalFormat df = new DecimalFormat("#0");
				//	Double amount=bonusType.getAmount();
					/*if(amount!=null){
						list.add(df.format(amount));
					}*/
					Gson gson = new Gson();
					return gson.toJson(bonusTypes);
				}
			}
	if("findticket".equalsIgnoreCase(action)){
		String batchfrom=request.getParameter("p1");
		String batchto=request.getParameter("p2");
		String empid=request.getParameter("empid");
		batchfrom=ReportDateUtil.getFromDate(batchfrom);
		batchto=ReportDateUtil.getToDate(batchto);
		Driver driver=null;
		if(!StringUtils.isEmpty(empid)){
		 Driver driver1=genericDAO.getById(Driver.class, Long.parseLong(empid));
		 Map criterias=new HashMap();
		 criterias.put("fullName", driver1.getFullName());
		 driver =genericDAO.getByCriteria(Driver.class, criterias);
		}
				StringBuffer query=new StringBuffer("");
				query.append("select  obj.origin.name,obj.destination.name ,count(obj)from Ticket obj where obj.status=1 ");
				if(driver!=null){
					query.append(" and obj.driver="+driver.getId());
				}
				if(!StringUtils.isEmpty(batchfrom)){
					query.append(" and  obj.billBatch>='").append(batchfrom+"'");
				}
				if(!StringUtils.isEmpty(batchto)){
					query.append(" and  obj.billBatch<='").append(batchto+"'");
				}
				query.append(" group by origin,destination order by obj.origin.name asc,obj.destination.name asc");
				List<Summary> list = genericDAO.executeSimpleQuery(query.toString());
				List<Summary> summarylist=new ArrayList<Summary>();		
				for(Object obj:list){						
					Object[] objArry=(Object[]) obj;
					Summary summary=new Summary();				
					summary.setOrigin(objArry[0].toString());
					summary.setDestination(objArry[1].toString());				
					summary.setCount(Integer.parseInt(objArry[2].toString()));		
					summarylist.add(summary);
					}
				Gson gson = new Gson();
				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				return gson.toJson(summarylist);
			}
			
			return "";
		}
	
		
		
		@ModelAttribute("modelObject")
		public MiscellaneousAmount setupModel(HttpServletRequest request) {
			String pk = request.getParameter(getPkParam());
			if (pk == null || org.apache.commons.lang.StringUtils.isEmpty(pk)) {
				MiscellaneousAmount miscAmount = getEntityInstance();
				miscAmount.setCompany((Location)request.getSession().getAttribute("company") );				
				miscAmount.setTerminal((Location)request.getSession().getAttribute("terminal"));
				miscAmount.setMiscNotes((String)request.getSession().getAttribute("miscNotes"));
				miscAmount.setBatchFrom((Date)request.getSession().getAttribute("batchFrom"));
				miscAmount.setBatchTo((Date)request.getSession().getAttribute("batchTo"));				
				return miscAmount;
			} else {
				return genericDAO.getById(getEntityClass(), Long.parseLong(pk));
			}
		}
}
