package com.primovision.lutransport.controller.hr;

import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ValidationException;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.beans.propertyeditors.CustomNumberEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.primovision.lutransport.controller.CRUDController;
import com.primovision.lutransport.controller.editor.AbstractModelEditor;
import com.primovision.lutransport.core.configuration.Configuration;
import com.primovision.lutransport.model.BillingRate;
import com.primovision.lutransport.model.Invoice;
import com.primovision.lutransport.model.Location;
import com.primovision.lutransport.model.SearchCriteria;
import com.primovision.lutransport.model.hr.HourlyPayrollInvoice;
import com.primovision.lutransport.model.hrreport.HourlyPayrollInvoiceDetails;
import com.primovision.lutransport.model.report.Billing;
import com.primovision.lutransport.service.DateUpdateService;
import com.primovision.lutransport.service.DynamicReportService;
import com.primovision.lutransport.service.HrReportService;
import com.primovision.lutransport.service.ReportService;

@Controller
@RequestMapping("/hr/uploadpayrollrun")
public class UploadHourlyPayrollRunController extends CRUDController<HourlyPayrollInvoice> {
	public static SimpleDateFormat mysqldf = new SimpleDateFormat("yyyy-MM-dd");
	public UploadHourlyPayrollRunController() {
		setUrlContext("hr/uploadpayrollrun");
	}
	
	@Autowired
	private DateUpdateService dateupdateService;
	
	@Autowired
	private HrReportService HrreportService;
	
	public void setHrReportService(HrReportService HrreportService) {
		this.HrreportService = HrreportService;
	}

	@Autowired
	protected DynamicReportService dynamicReportService;

	public void setDynamicReportService(
			DynamicReportService dynamicReportService) {
		this.dynamicReportService = dynamicReportService;
	}
	
	@Override
	@InitBinder
	public void initBinder(WebDataBinder binder) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");
		dateFormat.setLenient(false);
		binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true));
		binder.registerCustomEditor(Long.TYPE, new CustomNumberEditor(Long.class, false));
		binder.registerCustomEditor(Location.class, new AbstractModelEditor(Location.class));
	}
	
	@Override
	public void setupCreate(ModelMap model, HttpServletRequest request) {
		//Map criterias = new HashMap();
		//criterias.put("type", 1);
		}
	
	@Override
	public void setupList(ModelMap model, HttpServletRequest request) {
		populateSearchCriteria(request, request.getParameterMap());
		setupCreate(model, request);
	}
	
	
	@ModelAttribute("modelObject")
	public HourlyPayrollInvoice setupModel(HttpServletRequest request) {
		String pk = request.getParameter(getPkParam());
		if (pk == null || org.apache.commons.lang.StringUtils.isEmpty(pk)) {
			HourlyPayrollInvoice runinvoice = getEntityInstance();
			runinvoice.setPayrollinvoicedate(Calendar.getInstance().getTime());
		return runinvoice;
		} else {
			return genericDAO.getById(getEntityClass(), Long.parseLong(pk));
		}
	}
	
	@Override
	public String search2(ModelMap model, HttpServletRequest request) {
		setupList(model, request);
		SearchCriteria criteria = (SearchCriteria) request.getSession().getAttribute("searchCriteria");
		dateupdateService.updateDate(request, "Payrollinvoicedate", "payrollinvoicedate");
	
		model.addAttribute("list",genericDAO.search(getEntityClass(), criteria));
	     criteria.getSearchMap().put("Payrollinvoicedate", request.getParameter("Payrollinvoicedate"));
	
		return urlContext + "/list";
	}
	
	
	
	@RequestMapping(value="/downloadrun.do")
	public String downlodrun(HttpServletRequest request,Model model,HttpServletResponse response)
	{
		String payrollRunId=request.getParameter("id");
		String type=request.getParameter("type");
		HourlyPayrollInvoice runinvoice=genericDAO.getById(HourlyPayrollInvoice.class, Long.valueOf(payrollRunId));
		try 
		{
			Map params = new HashMap();
			List<HourlyPayrollInvoiceDetails> datas=null;
			params.put("date", new SimpleDateFormat("yyyy-MM-dd").format(runinvoice.getPayrollinvoicedate()));
			datas = genericDAO.findByCriteria(HourlyPayrollInvoiceDetails.class, params);
		
			if (datas!=null && datas.size()>0) {
		     try{
				params.clear();
				//params.put("date", runinvoice.getPayrollinvoicedate());
				params.put("date", new SimpleDateFormat("MM-dd-yyyy").format(runinvoice.getPayrollinvoicedate()));
				params.put("sumtotalAmount", runinvoice.getSumtotalamount());
				params.put("sumdtAmount", runinvoice.getSumdtamount());
				params.put("sumotAmount", runinvoice.getSumotamount());
				params.put("sumregularAmount", runinvoice.getSumregularamount());
				System.out.println("\ndownloadrun() of UploadHourlyPayroll\n");
				ByteArrayOutputStream out = new ByteArrayOutputStream();
				
				out = dynamicReportService.generateStaticReport("hourlyPayrollinvoice",datas, params, type, request);
			    response.setHeader("Content-Disposition","attachment;filename=payrollRun" + runinvoice.getPayrollinvoicedate()+"."+type);
				    out.writeTo(response.getOutputStream());
				    out.close();
					return null;
					
		        }catch (Exception e) 
			    {
					e.printStackTrace();
					request.getSession().setAttribute("errors", e.getMessage());
					return "error";
				}
			}
		     request.getSession().setAttribute("errors", "Unable to download payroll run. Plesae try again later");
				return "error";
		
		}catch(Exception ex){
			ex.printStackTrace();
			request.getSession().setAttribute("errors", "Unable to download payroll run. Plesae try again later");
			return "error";
		}
	}
	
	
	@Override
	public String delete(@ModelAttribute("modelObject") HourlyPayrollInvoice entity,
			BindingResult bindingResult, HttpServletRequest request) {
		try {
			HourlyPayrollInvoice invoice=genericDAO.getById(HourlyPayrollInvoice.class, Long.valueOf(entity.getId()));
			HrreportService.deleteEmployeePayrollData(invoice);
		} catch (Exception ex) {
			request.getSession().setAttribute(
					"error",
					"This payroll data can't be deleted");
			log.warn("Error deleting record " + entity.getId(), ex);
		}
		// return to list
		return "redirect:/" + urlContext + "/list.do";
	}
	
	
	public ByteArrayOutputStream downloadattachment(String path,
			HttpServletRequest request) {
		ByteArrayOutputStream baos=new ByteArrayOutputStream();
		try {
			FileInputStream fis=new FileInputStream(new File(path));
			BufferedInputStream bis=new BufferedInputStream(fis);
			int i;
			while((i=bis.read())!=-1){
				baos.write(i);
			}
			fis.close();
			bis.close();;
		} catch (Exception e) {	
			e.printStackTrace(); 
		}
		return baos;
	}
	
}
