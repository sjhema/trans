package com.primovision.lutransport.controller.hr;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.lang.StringUtils;
import javax.servlet.http.HttpServletRequest;
import javax.validation.ValidationException;

import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;

import com.google.gson.Gson;
import com.primovision.lutransport.controller.CRUDController;
import com.primovision.lutransport.controller.editor.AbstractModelEditor;
import com.primovision.lutransport.model.Location;
import com.primovision.lutransport.model.hr.DriverPayRate;
import com.primovision.lutransport.model.hr.EmployeeCatagory;

/**
 * @author kishor
 *
 */
@Controller
@RequestMapping("/hr/driverpayrate")
public class DriverPayRateController extends CRUDController<DriverPayRate>{
	
	public DriverPayRateController() {
		setUrlContext("/hr/driverpayrate");
	}

	
	@Override
	public void setupList(ModelMap model, HttpServletRequest request) {
		populateSearchCriteria(request, request.getParameterMap());
		setupCreate(model, request);
	}
	public void setupCreate(ModelMap model, HttpServletRequest request) {
		Map criterias = new HashMap();
		model.addAttribute("catagories", genericDAO.findByCriteria(EmployeeCatagory.class, criterias,"name",false));
		criterias.put("type", 3);
		model.addAttribute("companies",genericDAO.findByCriteria(Location.class, criterias,"name",false));
		criterias.put("type", 4);
		model.addAttribute("terminals", genericDAO.findByCriteria(Location.class, criterias,"name",false));
		criterias.put("type", 1);
		model.addAttribute("transferStation",genericDAO.findByCriteria(Location.class, criterias, "name", false));
		criterias.put("type", 2);
		model.addAttribute("landfill",genericDAO.findByCriteria(Location.class, criterias, "name", false));
		model.addAttribute("rateTypes", listStaticData("RATE_TYPE"));
		model.addAttribute("rateUsing", listStaticData("RATE_USING"));
	}
	
	@Override
	 public void initBinder(WebDataBinder binder) { 
		SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");
		dateFormat.setLenient(false);
		binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true));
		binder.registerCustomEditor(Location.class, new AbstractModelEditor(Location.class));
		binder.registerCustomEditor(EmployeeCatagory.class, new AbstractModelEditor(EmployeeCatagory.class));
	}
	@Override
	public String save(HttpServletRequest request,@ModelAttribute("modelObject") DriverPayRate entity,
			BindingResult bindingResult, ModelMap model) {
		if(entity.getTransferStation() == null){
			bindingResult.rejectValue("transferStation", "error.select.option", null, null);
		}
		if(entity.getLandfill() == null){
			bindingResult.rejectValue("landfill", "error.select.option", null, null);
		}
		if(entity.getRateType() == null){
			bindingResult.rejectValue("rateType", "error.select.option", null, null);
		}
		if(entity.getRateUsing()== null){
			bindingResult.rejectValue("rateUsing", "error.select.option", null, null);
		}
		if(entity.getCatagory()==null){
			bindingResult.rejectValue("catagory", "error.select.option",
					null, null);
		}
		if(entity.getCompany()==null){
			bindingResult.rejectValue("company", "error.select.option",
					null, null);
		}
		if(entity.getTerminal()==null){
			bindingResult.rejectValue("terminal", "error.select.option",
					null, null);
		}
		try {
			getValidator().validate(entity, bindingResult);
		} catch (ValidationException e) {
			e.printStackTrace();
			log.warn("Error in validation :" + e);
		}
		
		// return to form if we had errors
		if (bindingResult.hasErrors()) {
			System.out.println("\n bindingResult-->"+bindingResult.getFieldError());
			setupCreate(model, request);
			return urlContext + "/form";
		}
		
		return super.save(request, entity, bindingResult, model);
	}
	
	protected String processAjaxRequest(HttpServletRequest request,
			String action, Model model) {
		if("findDestinationLoad".equalsIgnoreCase(action)){
			if(!StringUtils.isEmpty(request.getParameter("origin"))){
		
				List<Location> destinatioLoad=new ArrayList<Location>();
				Map criterias = new HashMap();
				criterias.put("transferStation.id", Long.parseLong(request.getParameter("origin")));
				List<DriverPayRate> billing=genericDAO.findByCriteria(DriverPayRate.class, criterias, "transferStation", false);
				for(DriverPayRate bill:billing){
					destinatioLoad.add(bill.getLandfill());
				}
				Gson gson = new Gson();
				return gson.toJson(destinatioLoad);
			}
		}
		if("findOriginLoad".equalsIgnoreCase(action)){
			if(!StringUtils.isEmpty(request.getParameter("destination"))){
				
				List<Location> originLoad=new ArrayList<Location>();
				Map criterias = new HashMap();
				criterias.put("landfill.id", Long.parseLong(request.getParameter("destination")));
				List<DriverPayRate> billing=genericDAO.findByCriteria(DriverPayRate.class, criterias, "landfill", false);
				for(DriverPayRate bill:billing){
					originLoad.add(bill.getTransferStation());
				}
				Gson gson = new Gson();
				return gson.toJson(originLoad);
			}
		}
		return "";
	}
}
