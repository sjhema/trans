package com.primovision.lutransport.controller.report;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.primovision.lutransport.controller.BaseController;
import com.primovision.lutransport.core.util.MathUtil;
import com.primovision.lutransport.core.util.MimeUtil;
import com.primovision.lutransport.model.Driver;
import com.primovision.lutransport.model.EzToll;
import com.primovision.lutransport.model.FuelLog;
import com.primovision.lutransport.model.Location;
import com.primovision.lutransport.model.Ticket;
import com.primovision.lutransport.model.Vehicle;
import com.primovision.lutransport.model.report.EztollReportWrapper;
import com.primovision.lutransport.service.DynamicReportService;
import com.primovision.lutransport.service.ReportService;



@Controller
@SuppressWarnings("unchecked")
@RequestMapping("/reportuser/report/tolldrilldownreport")
public class TollChargesDrillDownReport extends BaseController {

public static SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy");
public static SimpleDateFormat mysqldf = new SimpleDateFormat("yyyy-MM-dd ");
public static SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd 00:00:00.0");	
public static SimpleDateFormat tdff = new SimpleDateFormat("yyyy-MM-dd");	
	@Autowired
	protected DynamicReportService dynamicReportService;

	public void setDynamicReportService(
			DynamicReportService dynamicReportService) {
		this.dynamicReportService = dynamicReportService;
	}
	
	
	@Autowired
	private ReportService reportService;
	
	public void setReportService(ReportService reportService) {
		this.reportService = reportService;
	}
	
	@RequestMapping(method = { RequestMethod.GET, RequestMethod.POST }, value = "/tolldrilldownexport.do")
	public String downloadFuelDrillDown(ModelMap model, HttpServletRequest request,HttpServletResponse response,@RequestParam(required = false, 
			value = "type") String typeKey,@RequestParam(required = false, value = "typeValue") String typeValue) throws IOException {
		

		String ticktquery=(String)request.getSession().getAttribute("netTicktQuery");
	    System.out.println("**** the drill ticket query is "+ticktquery);
		List<Ticket> tickets = genericDAO.executeSimpleQuery(ticktquery);
			//StringBuffer ticketIds = new StringBuffer("");
		String ticktIds="";
		if(tickets!=null && tickets.size()>0 ){
			for(Ticket ticObj:tickets){
			  if(ticktIds.equals("")){
				  ticktIds=String.valueOf(ticObj.getId());
			  }
			  else
			  {
				  ticktIds=ticktIds+","+String.valueOf(ticObj.getId());				  
			  }
			}
		}
		Map criti=new HashMap(); 
		Location locObj=null;
		Location terminalObj=null;
		Vehicle truckObj=null;
		Vehicle trailerObj=null;
		Driver driverObj=null;
		List<EzToll> fsAll=new ArrayList<EzToll>();
		StringBuffer query=new StringBuffer("select obj from Ticket obj where obj.id in ("
				+ticktIds.toString()+")");
		if(typeKey.equalsIgnoreCase("company"))
		{				
			criti.clear();
			criti.put("name",typeValue);
			locObj=genericDAO.getByCriteria(Location.class, criti);
			if(locObj!=null)
			query.append(" and obj.companyLocation='").append(locObj.getId()).append("'");
			query.append(" order by vehicle asc, terminal asc ,loadDate asc, unloadDate desc ");
		}			
		if(typeKey.equalsIgnoreCase("terminal"))
		{
			criti.clear();
			criti.put("name",typeValue);
			terminalObj=genericDAO.getByCriteria(Location.class, criti);
			if(terminalObj!=null)
			query.append(" and obj.terminal='").append(terminalObj.getId()).append("'");
			query.append(" order by vehicle asc, companyLocation asc, driver asc ,loadDate asc, unloadDate desc ");
		}
		if(typeKey.equalsIgnoreCase("truck"))
		{
			truckObj=genericDAO.getById(Vehicle.class,Long.parseLong(typeValue));
			if(truckObj!=null)
			query.append(" and obj.vehicle='").append(truckObj.getId()).append("'");
			query.append(" order by companyLocation asc ,terminal asc, driver asc ,loadDate asc, unloadDate desc ");
		}
		if(typeKey.equalsIgnoreCase("trailer"))
		{
			trailerObj=genericDAO.getById(Vehicle.class,Long.parseLong(typeValue));
			if(trailerObj!=null)
			query.append(" and obj.trailer='").append(trailerObj.getId()).append("'");
		}
		if(typeKey.equalsIgnoreCase("driver"))
		{				
			criti.clear();
			criti.put("fullName",typeValue);				
			driverObj=genericDAO.getByCriteria(Driver.class, criti);
			if(driverObj!=null)
			query.append(" and obj.driver='").append(driverObj.getId()).append("'");
			query.append(" order by vehicle asc,companyLocation asc,terminal asc,loadDate asc, unloadDate desc ");
		}			
			//query.append(" order by vehicle asc, companyLocation asc, driver asc ,loadDate asc, unloadDate desc ");
			List<Ticket> filteredTickets=genericDAO.executeSimpleQuery(query.toString());
			String dateRanges="";
			String unitIds="";
			HashSet<String> dates = null;
			String tempVehicle = "";			
			String tempCompany = "";
			String tempTerminal ="";
			Date tempLoadDate = null;
			Date tempUnloadDate = null;
			HashSet<String> tempcompany=null;
			HashSet<String> tempDriver=null;
			HashSet<String> tempterminal=null;
			for(Ticket ticket : filteredTickets) {	
				
				StringBuffer tollquery = new StringBuffer("");
				
				
				if(typeKey.equalsIgnoreCase("company")) {
					
					if(!tempVehicle.equals(ticket.getVehicle().getId().toString()) || !tempTerminal.equals(ticket.getTerminal().getId().toString())){
									
							
							 dates = new HashSet<String>();
							 tempVehicle = ticket.getVehicle().getId().toString();
							 
							 tempTerminal = ticket.getTerminal().getId().toString();
							 tempLoadDate = ticket.getLoadDate();
							 tempUnloadDate = ticket.getUnloadDate();
							 tempcompany = new HashSet<String>();
							 tempcompany.add(ticket.getCompanyLocation().getId().toString());
							 tempDriver = new HashSet<String>();
							 tempDriver.add( ticket.getDriver().getId().toString());
							 tempterminal = new HashSet<String>();
							 tempterminal.add(ticket.getTerminal().getId().toString());
							 int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
							 for (int i=0; i < days; i++) {
								    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
								    dates.add(df.format(d.toDate()));
								    
							 }
							 dates.add(ticket.getLoadDate().toString());
							 dates.add(ticket.getUnloadDate().toString());
							 
							 String transferDateFrom = mysqldf.format(ticket.getLoadDate());
							 String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
						
						tollquery.append("select obj from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
									+ transferDateTo
									+ " 23:59:59'");
						/*if(typeKey.equalsIgnoreCase("company"))
						{*/
							tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
							tollquery.append(" and obj.plateNumber in (").append(ticket.getVehicle().getId()).append(")");
							tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
						//}
							List<EzToll> fs  = genericDAO.executeSimpleQuery(tollquery.toString());
							for(int i=0; i<fs.size();i++){
								fsAll.add(fs.get(i));
							}
						/*if(typeKey.equalsIgnoreCase("terminal"))
						{
							tollquery.append(" and obj.terminal='").append(terminalObj.getId()).append("'");
							tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
						}
						if(typeKey.equalsIgnoreCase("truck"))
						{
								tollquery.append(" and obj.plateNumber='").append(truckObj.getId()).append("'");
						}
						if(typeKey.equalsIgnoreCase("trailer"))
						{
								tollquery.append(" and obj.trailer='").append(trailerObj.getId()).append("'");
						}
						if(typeKey.equalsIgnoreCase("driver"))
						{				
							tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
						}*/
					}
					else{
						
						if((ticket.getLoadDate().after(tempLoadDate) || ticket.getLoadDate().equals(tempLoadDate)) && (ticket.getUnloadDate().before(tempUnloadDate)|| ticket.getUnloadDate().equals(tempUnloadDate))){			
							
							
							
							
						}
						else{
							Date tempDateVar =null;
							boolean valueset = false;
							tempLoadDate = 	ticket.getLoadDate();
							tempUnloadDate = ticket.getUnloadDate();
							tempcompany.add(ticket.getCompanyLocation().getId().toString());
							tempDriver.add(ticket.getDriver().getId().toString());
							tempterminal.add(ticket.getTerminal().getId().toString());
							 
							 if(dates.contains(ticket.getLoadDate().toString())){
								 //do nothing
								
							  }
							  else{
							   	if(!valueset){					   		
							    	valueset=true;					  
									tempDateVar = ticket.getLoadDate();
								}					   	
							    	dates.add(ticket.getLoadDate().toString());
							   } 
							 
							int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
							 for (int i=0; i < days; i++) {
								    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
								   
								    if(dates.contains(df.format(d.toDate()))){
								      //do nothing
								    	
								    }
								    else{
								    	if(!valueset){
								    	valueset=true;						    	
								    	tempDateVar = d.toDate();
								    	
								    	}
								    	dates.add(df.format(d.toDate()));
								    }
							 }
							 //dates.add(new LocalDate(ticket.getLoadDate()));
							
							if(tempDateVar!=null){
								String transferDateFrom = mysqldf.format(tempDateVar);					
								String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
							
							tollquery.append("select obj from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
										+ transferDateTo
										+ " 23:59:59'");
							/*if(typeKey.equalsIgnoreCase("company"))
							{*/
								tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								tollquery.append(" and obj.plateNumber in (").append(ticket.getVehicle().getId()).append(")");
								tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								
								List<EzToll> fs = genericDAO.executeSimpleQuery(tollquery.toString());
								
								for(int i=0; i<fs.size();i++){
									fsAll.add(fs.get(i));
								}
							}						
							else {
							  if(dates.contains(ticket.getUnloadDate().toString())){
								  //do nothing
							  }
							  else{
								  dates.add(ticket.getUnloadDate().toString());
								  String transferDateFrom = mysqldf.format(ticket.getUnloadDate());					
								  String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
								
								tollquery.append("select obj from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
											+ transferDateTo
											+ " 23:59:59'");
								/*if(typeKey.equalsIgnoreCase("company"))
								{*/
									tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
									tollquery.append(" and obj.plateNumber in (").append(ticket.getVehicle().getId()).append(")");
									tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
									System.out.println("****** second the query is "+tollquery);
									List<EzToll> fs = genericDAO.executeSimpleQuery(tollquery.toString());
									
									for(int i=0; i<fs.size();i++){
										fsAll.add(fs.get(i));
									}
							  }
							}
						}
					}
						
						
					
										
			
				}
				
				
				if(typeKey.equalsIgnoreCase("terminal")) {				
					
					if(!tempVehicle.equals(ticket.getVehicle().getId().toString()) || !tempCompany.equals(ticket.getCompanyLocation().getId().toString())   ){
										
							
							 dates = new HashSet<String>();
							 tempVehicle = ticket.getVehicle().getId().toString();
							 tempCompany = ticket.getCompanyLocation().getId().toString();
							 
							 tempLoadDate = ticket.getLoadDate();
							 tempUnloadDate = ticket.getUnloadDate();
							 tempcompany = new HashSet<String>();
							 tempcompany.add(ticket.getCompanyLocation().getId().toString());
							 tempDriver = new HashSet<String>();
							 tempDriver.add( ticket.getDriver().getId().toString());
							 tempterminal = new HashSet<String>();
							 tempterminal.add(ticket.getTerminal().getId().toString());
							 int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
							 for (int i=0; i < days; i++) {
								    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
								    dates.add(df.format(d.toDate()));
								    
							 }
							 dates.add(ticket.getLoadDate().toString());
							 dates.add(ticket.getUnloadDate().toString());
							 
							 String transferDateFrom = mysqldf.format(ticket.getLoadDate());
							 String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
						
						tollquery.append("select obj from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
									+ transferDateTo
									+ " 23:59:59'");
						/*if(typeKey.equalsIgnoreCase("company"))
						{*/
							tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
							tollquery.append(" and obj.plateNumber in (").append(ticket.getVehicle().getId()).append(")");
							tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
						//}
							List<EzToll> fs  = genericDAO.executeSimpleQuery(tollquery.toString());
							for(int i=0; i<fs.size();i++){
								fsAll.add(fs.get(i));
							}
						/*if(typeKey.equalsIgnoreCase("terminal"))
						{
							tollquery.append(" and obj.terminal='").append(terminalObj.getId()).append("'");
							tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
						}
						if(typeKey.equalsIgnoreCase("truck"))
						{
								tollquery.append(" and obj.plateNumber='").append(truckObj.getId()).append("'");
						}
						if(typeKey.equalsIgnoreCase("trailer"))
						{
								tollquery.append(" and obj.trailer='").append(trailerObj.getId()).append("'");
						}
						if(typeKey.equalsIgnoreCase("driver"))
						{				
							tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
						}*/
					}
					else{
						
						if((ticket.getLoadDate().after(tempLoadDate) || ticket.getLoadDate().equals(tempLoadDate)) && (ticket.getUnloadDate().before(tempUnloadDate)|| ticket.getUnloadDate().equals(tempUnloadDate))){			
							
							
							
							
						}
						else{
							Date tempDateVar =null;
							boolean valueset = false;
							tempLoadDate = 	ticket.getLoadDate();
							tempUnloadDate = ticket.getUnloadDate();
							tempcompany.add(ticket.getCompanyLocation().getId().toString());
							tempDriver.add(ticket.getDriver().getId().toString());
							tempterminal.add(ticket.getTerminal().getId().toString());
							 
							 if(dates.contains(ticket.getLoadDate().toString())){
								 //do nothing
								
							  }
							  else{
							   	if(!valueset){					   		
							    	valueset=true;					  
									tempDateVar = ticket.getLoadDate();
								}					   	
							    	dates.add(ticket.getLoadDate().toString());
							   } 
							 
							int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
							 for (int i=0; i < days; i++) {
								    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
								   
								    if(dates.contains(df.format(d.toDate()))){
								      //do nothing
								    	
								    }
								    else{
								    	if(!valueset){
								    	valueset=true;						    	
								    	tempDateVar = d.toDate();
								    	
								    	}
								    	dates.add(df.format(d.toDate()));
								    }
							 }
							 //dates.add(new LocalDate(ticket.getLoadDate()));
							
							if(tempDateVar!=null){
								String transferDateFrom = mysqldf.format(tempDateVar);					
								String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
							
							tollquery.append("select obj from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
										+ transferDateTo
										+ " 23:59:59'");
							/*if(typeKey.equalsIgnoreCase("company"))
							{*/
								tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								tollquery.append(" and obj.plateNumber in (").append(ticket.getVehicle().getId()).append(")");
								tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								
								List<EzToll> fs = genericDAO.executeSimpleQuery(tollquery.toString());
								
								for(int i=0; i<fs.size();i++){
									fsAll.add(fs.get(i));
								}
							}						
							else {
							  if(dates.contains(ticket.getUnloadDate().toString())){
								  //do nothing
							  }
							  else{
								  dates.add(ticket.getUnloadDate().toString());
								  String transferDateFrom = mysqldf.format(ticket.getUnloadDate());					
								  String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
								
								tollquery.append("select obj from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
											+ transferDateTo
											+ " 23:59:59'");
								/*if(typeKey.equalsIgnoreCase("company"))
								{*/
									tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
									tollquery.append(" and obj.plateNumber in (").append(ticket.getVehicle().getId()).append(")");
									tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
									System.out.println("****** second the query is "+tollquery);
									List<EzToll> fs = genericDAO.executeSimpleQuery(tollquery.toString());
									
									for(int i=0; i<fs.size();i++){
										fsAll.add(fs.get(i));
									}
							  }
							}
						}
					}
									
			
					
				}
				
				if(typeKey.equalsIgnoreCase("truck")) {
					
					if(!tempCompany.equals(ticket.getCompanyLocation().getId().toString()) || !tempTerminal.equals(ticket.getTerminal().getId().toString())){
							
							
							 dates = new HashSet<String>();
							 tempVehicle = ticket.getVehicle().getId().toString();
							 tempCompany = ticket.getCompanyLocation().getId().toString();
							 tempTerminal = ticket.getTerminal().getId().toString();
							 tempLoadDate = ticket.getLoadDate();
							 tempUnloadDate = ticket.getUnloadDate();
							 tempcompany = new HashSet<String>();
							 tempcompany.add(ticket.getCompanyLocation().getId().toString());
							 tempDriver = new HashSet<String>();
							 tempDriver.add( ticket.getDriver().getId().toString());
							 tempterminal = new HashSet<String>();
							 tempterminal.add(ticket.getTerminal().getId().toString());
							 int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
							 for (int i=0; i < days; i++) {
								    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
								    dates.add(df.format(d.toDate()));
								    
							 }
							 dates.add(ticket.getLoadDate().toString());
							 dates.add(ticket.getUnloadDate().toString());
							 
							 String transferDateFrom = mysqldf.format(ticket.getLoadDate());
							 String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
						
						tollquery.append("select obj from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
									+ transferDateTo
									+ " 23:59:59'");
						/*if(typeKey.equalsIgnoreCase("company"))
						{*/
							tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
							tollquery.append(" and obj.plateNumber in (").append(ticket.getVehicle().getId()).append(")");
							tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
						//}
							List<EzToll> fs  = genericDAO.executeSimpleQuery(tollquery.toString());
							for(int i=0; i<fs.size();i++){
								fsAll.add(fs.get(i));
							}
						/*if(typeKey.equalsIgnoreCase("terminal"))
						{
							tollquery.append(" and obj.terminal='").append(terminalObj.getId()).append("'");
							tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
						}
						if(typeKey.equalsIgnoreCase("truck"))
						{
								tollquery.append(" and obj.plateNumber='").append(truckObj.getId()).append("'");
						}
						if(typeKey.equalsIgnoreCase("trailer"))
						{
								tollquery.append(" and obj.trailer='").append(trailerObj.getId()).append("'");
						}
						if(typeKey.equalsIgnoreCase("driver"))
						{				
							tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
						}*/
					}
					else{
						
						if((ticket.getLoadDate().after(tempLoadDate) || ticket.getLoadDate().equals(tempLoadDate)) && (ticket.getUnloadDate().before(tempUnloadDate)|| ticket.getUnloadDate().equals(tempUnloadDate))){			
							
							
							
							
						}
						else{
							Date tempDateVar =null;
							boolean valueset = false;
							tempLoadDate = 	ticket.getLoadDate();
							tempUnloadDate = ticket.getUnloadDate();
							tempcompany.add(ticket.getCompanyLocation().getId().toString());
							tempDriver.add(ticket.getDriver().getId().toString());
							tempterminal.add(ticket.getTerminal().getId().toString());
							 
							 if(dates.contains(ticket.getLoadDate().toString())){
								 //do nothing
								
							  }
							  else{
							   	if(!valueset){					   		
							    	valueset=true;					  
									tempDateVar = ticket.getLoadDate();
								}					   	
							    	dates.add(ticket.getLoadDate().toString());
							   } 
							 
							int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
							 for (int i=0; i < days; i++) {
								    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
								   
								    if(dates.contains(df.format(d.toDate()))){
								      //do nothing
								    	
								    }
								    else{
								    	if(!valueset){
								    	valueset=true;						    	
								    	tempDateVar = d.toDate();
								    	
								    	}
								    	dates.add(df.format(d.toDate()));
								    }
							 }
							 //dates.add(new LocalDate(ticket.getLoadDate()));
							
							if(tempDateVar!=null){
								String transferDateFrom = mysqldf.format(tempDateVar);					
								String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
							
							tollquery.append("select obj from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
										+ transferDateTo
										+ " 23:59:59'");
							/*if(typeKey.equalsIgnoreCase("company"))
							{*/
								tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								tollquery.append(" and obj.plateNumber in (").append(ticket.getVehicle().getId()).append(")");
								tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								
								List<EzToll> fs = genericDAO.executeSimpleQuery(tollquery.toString());
								
								for(int i=0; i<fs.size();i++){
									fsAll.add(fs.get(i));
								}
							}						
							else {
							  if(dates.contains(ticket.getUnloadDate().toString())){
								  //do nothing
							  }
							  else{
								  dates.add(ticket.getUnloadDate().toString());
								  String transferDateFrom = mysqldf.format(ticket.getUnloadDate());					
								  String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
								
								tollquery.append("select obj from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
											+ transferDateTo
											+ " 23:59:59'");
								/*if(typeKey.equalsIgnoreCase("company"))
								{*/
									tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
									tollquery.append(" and obj.plateNumber in (").append(ticket.getVehicle().getId()).append(")");
									tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
									System.out.println("****** second the query is "+tollquery);
									List<EzToll> fs = genericDAO.executeSimpleQuery(tollquery.toString());
									
									for(int i=0; i<fs.size();i++){
										fsAll.add(fs.get(i));
									}
							  }
							}
						}
					}							
			
				}
				
				
				if(typeKey.equalsIgnoreCase("driver")) {				
					
					if(!tempVehicle.equals(ticket.getVehicle().getId().toString()) || !tempCompany.equals(ticket.getCompanyLocation().getId().toString()) || !tempTerminal.equals(ticket.getTerminal().getId().toString())){
										
							
							 dates = new HashSet<String>();
							 tempVehicle = ticket.getVehicle().getId().toString();
							 tempCompany = ticket.getCompanyLocation().getId().toString();
							 tempTerminal = ticket.getTerminal().getId().toString();
							 tempLoadDate = ticket.getLoadDate();
							 tempUnloadDate = ticket.getUnloadDate();
							 tempcompany = new HashSet<String>();
							 tempcompany.add(ticket.getCompanyLocation().getId().toString());
							 tempDriver = new HashSet<String>();
							 tempDriver.add( ticket.getDriver().getId().toString());
							 tempterminal = new HashSet<String>();
							 tempterminal.add(ticket.getTerminal().getId().toString());
							 int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
							 for (int i=0; i < days; i++) {
								    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
								    dates.add(df.format(d.toDate()));
								    
							 }
							 dates.add(ticket.getLoadDate().toString());
							 dates.add(ticket.getUnloadDate().toString());
							 
							 String transferDateFrom = mysqldf.format(ticket.getLoadDate());
							 String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
						
						tollquery.append("select obj from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
									+ transferDateTo
									+ " 23:59:59'");
						/*if(typeKey.equalsIgnoreCase("company"))
						{*/
							tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
							tollquery.append(" and obj.plateNumber in (").append(ticket.getVehicle().getId()).append(")");
							tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
						//}
							List<EzToll> fs  = genericDAO.executeSimpleQuery(tollquery.toString());
							for(int i=0; i<fs.size();i++){
								fsAll.add(fs.get(i));
							}
						/*if(typeKey.equalsIgnoreCase("terminal"))
						{
							tollquery.append(" and obj.terminal='").append(terminalObj.getId()).append("'");
							tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
						}
						if(typeKey.equalsIgnoreCase("truck"))
						{
								tollquery.append(" and obj.plateNumber='").append(truckObj.getId()).append("'");
						}
						if(typeKey.equalsIgnoreCase("trailer"))
						{
								tollquery.append(" and obj.trailer='").append(trailerObj.getId()).append("'");
						}
						if(typeKey.equalsIgnoreCase("driver"))
						{				
							tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
						}*/
					}
					else{
						
						if((ticket.getLoadDate().after(tempLoadDate) || ticket.getLoadDate().equals(tempLoadDate)) && (ticket.getUnloadDate().before(tempUnloadDate)|| ticket.getUnloadDate().equals(tempUnloadDate))){			
							
							
							
							
						}
						else{
							Date tempDateVar =null;
							boolean valueset = false;
							tempLoadDate = 	ticket.getLoadDate();
							tempUnloadDate = ticket.getUnloadDate();
							tempcompany.add(ticket.getCompanyLocation().getId().toString());
							tempDriver.add(ticket.getDriver().getId().toString());
							tempterminal.add(ticket.getTerminal().getId().toString());
							 
							 if(dates.contains(ticket.getLoadDate().toString())){
								 //do nothing
								
							  }
							  else{
							   	if(!valueset){					   		
							    	valueset=true;					  
									tempDateVar = ticket.getLoadDate();
								}					   	
							    	dates.add(ticket.getLoadDate().toString());
							   } 
							 
							int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
							 for (int i=0; i < days; i++) {
								    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
								   
								    if(dates.contains(df.format(d.toDate()))){
								      //do nothing
								    	
								    }
								    else{
								    	if(!valueset){
								    	valueset=true;						    	
								    	tempDateVar = d.toDate();
								    	
								    	}
								    	dates.add(df.format(d.toDate()));
								    }
							 }
							 //dates.add(new LocalDate(ticket.getLoadDate()));
							
							if(tempDateVar!=null){
								String transferDateFrom = mysqldf.format(tempDateVar);					
								String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
							
							tollquery.append("select obj from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
										+ transferDateTo
										+ " 23:59:59'");
							/*if(typeKey.equalsIgnoreCase("company"))
							{*/
								tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								tollquery.append(" and obj.plateNumber in (").append(ticket.getVehicle().getId()).append(")");
								tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								
								List<EzToll> fs = genericDAO.executeSimpleQuery(tollquery.toString());
								
								for(int i=0; i<fs.size();i++){
									fsAll.add(fs.get(i));
								}
							}						
							else {
							  if(dates.contains(ticket.getUnloadDate().toString())){
								  //do nothing
							  }
							  else{
								  dates.add(ticket.getUnloadDate().toString());
								  String transferDateFrom = mysqldf.format(ticket.getUnloadDate());					
								  String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
								
								tollquery.append("select obj from EzToll obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
											+ transferDateTo
											+ " 23:59:59'");
								/*if(typeKey.equalsIgnoreCase("company"))
								{*/
									tollquery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
									tollquery.append(" and obj.plateNumber in (").append(ticket.getVehicle().getId()).append(")");
									tollquery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
									System.out.println("****** second the query is "+tollquery);
									List<EzToll> fs = genericDAO.executeSimpleQuery(tollquery.toString());
									
									for(int i=0; i<fs.size();i++){
										fsAll.add(fs.get(i));
									}
							  }
							}
						}
					}
								
			
				}
				
			}
			
			
			
			/*StringBuffer tollquery = new StringBuffer("");
			tollquery.append("select obj from EzToll obj where obj.transactiondate in ("
						+ dateRanges
						+ ")");
			if(typeKey.equalsIgnoreCase("company"))
			{				
				criti.clear();
				criti.put("name",typeValue);
				Location locObj=genericDAO.getByCriteria(Location.class, criti);
				if(locObj!=null)
					tollquery.append(" and obj.company='").append(locObj.getId()).append("'");
				tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
			}
			if(typeKey.equalsIgnoreCase("terminal"))
			{
				criti.clear();
				criti.put("name",typeValue);
				Location terminalObj=genericDAO.getByCriteria(Location.class, criti);
				if(terminalObj!=null)
					tollquery.append(" and obj.terminal='").append(terminalObj.getId()).append("'");
				tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
			}
			if(typeKey.equalsIgnoreCase("truck"))
			{
				Vehicle truckObj=genericDAO.getById(Vehicle.class,Long.parseLong(typeValue));
				if(truckObj!=null)
					tollquery.append(" and obj.plateNumber='").append(truckObj.getId()).append("'");
			}
			if(typeKey.equalsIgnoreCase("trailer"))
			{
				Vehicle trailerObj=genericDAO.getById(Vehicle.class,Long.parseLong(typeValue));
				if(trailerObj!=null)
					tollquery.append(" and obj.trailer='").append(trailerObj.getId()).append("'");
			}
			if(typeKey.equalsIgnoreCase("driver"))
			{				
				tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
			}
			
			List<EzToll> fs =genericDAO.executeSimpleQuery(tollquery.toString());*/
			
			List<EzToll> summarys = new ArrayList<EzToll>();
			EztollReportWrapper wrapper = new EztollReportWrapper();
			wrapper.setEztolls(summarys);

			long totalColumn = 0;
			double totalAmounts = 0.0;

			// Map<String, List<FuelLog>> fuellogMap = new HashMap<String,
			// List<FuelLog>>();

			for (EzToll eztol : fsAll) {
				totalColumn = totalColumn + 1;
				if (eztol != null) {
					EzToll output = new EzToll();

					output.setTollcompanies(eztol.getToolcompany().getName());
					output.setCompanies(eztol.getCompany().getName());
					output.setTerminals(eztol.getTerminal().getName());
					if (eztol.getPlateNumber() != null) {
						output.setPlates((eztol.getPlateNumber().getPlate())
								.toString());
						output.setUnits((eztol.getPlateNumber().getUnit())
								.toString());
					} else
						output.setPlates("");

					if (eztol.getTollTagNumber() != null) {
						output.setTollTagNumbers((eztol.getTollTagNumber()
								.getTollTagNumber()));
						if (output.getUnits() == null)
							output.setUnits((eztol.getTollTagNumber().getVehicle()
									.getUnit()).toString());
					} else
						output.setTollTagNumbers("");
					// output.setUnits((eztol.getUnit().getUnit()).toString());
					// output.setTransfersDate(sdf.format(eztol.getTransactiondate()));
					output.setTransfersDate((eztol.getTransactiondate() != null) ? sdf
							.format(eztol.getTransactiondate()) : "");
					output.setTransfersDate(sdf.format(eztol.getTransactiondate()));
					output.setTransactiontime((eztol.getTransactiontime() != null) ? eztol
							.getTransactiontime() : "");
					output.setAgency(eztol.getAgency());
					output.setAmount(eztol.getAmount());
					output.setDrivername(eztol.getDriver()!=null?eztol.getDriver().getFullName():"");
					

					if (eztol.getAmount() != null)
						totalAmounts += eztol.getAmount();

					summarys.add(output);

				}

			}
			totalAmounts = MathUtil.roundUp(totalAmounts, 2);
			wrapper.setTotalAmounts(totalAmounts);
			wrapper.setTotalColumn(totalColumn);
			
			//Map<String,Object> data = new HashMap<String,Object>();
			Map<String,Object> params = new HashMap<String,Object>();			 
			params.put("totalAmounts",wrapper.getTotalAmounts());
			params.put("totalColumn",wrapper.getTotalColumn());
			
			try{			
			String	type = "csv";
			response.setHeader("Content-Disposition",
						"attachment;filename= eztollReport." + type);			
			response.setContentType(MimeUtil.getContentType(type));
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			out = dynamicReportService.generateStaticReport("eztollReport",
						(List)wrapper.getEztolls(), params, type, request);			
		
			out.writeTo(response.getOutputStream());
			out.close();
			return null;
		} catch (Exception e) {
			e.printStackTrace();
			log.warn("Unable to create file :" + e);
			request.getSession().setAttribute("errors", e.getMessage());
			return "report.error";
		}		
	}
	
	
}
