package com.primovision.lutransport.controller.report;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.primovision.lutransport.controller.BaseController;
import com.primovision.lutransport.core.util.MathUtil;
import com.primovision.lutransport.core.util.MimeUtil;
import com.primovision.lutransport.model.Driver;
import com.primovision.lutransport.model.EzToll;
import com.primovision.lutransport.model.FuelLog;
import com.primovision.lutransport.model.Location;
import com.primovision.lutransport.model.Ticket;
import com.primovision.lutransport.model.Vehicle;
import com.primovision.lutransport.model.report.FuelLogReportWrapper;
import com.primovision.lutransport.service.DynamicReportService;
import com.primovision.lutransport.service.ReportService;


@Controller
@SuppressWarnings("unchecked")
@RequestMapping("/reportuser/report/fueldrilldownreport")
public class FuelChargesDrillDownReport extends BaseController {

	
	public static SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy");
	public static SimpleDateFormat mysqldf = new SimpleDateFormat("yyyy-MM-dd ");
	public static SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd 00:00:00.0");	
	public static SimpleDateFormat tdff = new SimpleDateFormat("yyyy-MM-dd");	
	
	@Autowired
	protected DynamicReportService dynamicReportService;

	public void setDynamicReportService(
			DynamicReportService dynamicReportService) {
		this.dynamicReportService = dynamicReportService;
	}
	
	
	@Autowired
	private ReportService reportService;
	
	public void setReportService(ReportService reportService) {
		this.reportService = reportService;
	}
	
	
	@RequestMapping(method = { RequestMethod.GET, RequestMethod.POST }, value = "/fueldrilldownexport.do")
	public String downloadFuelDrillDown(ModelMap model, HttpServletRequest request,HttpServletResponse response,@RequestParam(required = false, 
			value = "type") String typeKey,@RequestParam(required = false, value = "typeValue") String typeValue) throws IOException {
		
		String ticktquery=(String)request.getSession().getAttribute("netTicktQuery");
	    System.out.println("**** the drill ticket query is "+ticktquery);
		List<Ticket> tickets = genericDAO.executeSimpleQuery(ticktquery);
			//StringBuffer ticketIds = new StringBuffer("");
		String ticktIds="";
		if(tickets!=null && tickets.size()>0 ){
			for(Ticket ticObj:tickets){
			  if(ticktIds.equals("")){
				  ticktIds=String.valueOf(ticObj.getId());
			  }
			  else
			  {
				  ticktIds=ticktIds+","+String.valueOf(ticObj.getId());				  
			  }
			}
		}
		Map criti=new HashMap(); 
		Location locObj=null;
		Location terminalObj=null;
		Vehicle truckObj=null;
		Vehicle trailerObj=null;
		Driver driverObj=null;
		List<FuelLog> fsAll=new ArrayList<FuelLog>();
		StringBuffer query=new StringBuffer("select obj from Ticket obj where obj.id in ("
				+ticktIds.toString()+")");
			if(typeKey.equalsIgnoreCase("company"))
			{				
				criti.clear();
				criti.put("name",typeValue);
				locObj=genericDAO.getByCriteria(Location.class, criti);
				if(locObj!=null)
				query.append(" and obj.companyLocation='").append(locObj.getId()).append("'");
				query.append(" order by vehicle asc, terminal asc ,loadDate asc, unloadDate desc ");
			}			
			if(typeKey.equalsIgnoreCase("terminal"))
			{
				criti.clear();
				criti.put("name",typeValue);
				terminalObj=genericDAO.getByCriteria(Location.class, criti);
				if(terminalObj!=null)
				query.append(" and obj.terminal='").append(terminalObj.getId()).append("'");
				query.append(" order by vehicle asc, companyLocation asc, driver asc ,loadDate asc, unloadDate desc ");
			}
			if(typeKey.equalsIgnoreCase("truck"))
			{
				truckObj=genericDAO.getById(Vehicle.class,Long.parseLong(typeValue));
				if(truckObj!=null)
				query.append(" and obj.vehicle='").append(truckObj.getId()).append("'");
				query.append(" order by companyLocation asc ,terminal asc, driver asc ,loadDate asc, unloadDate desc ");
			}
			if(typeKey.equalsIgnoreCase("trailer"))
			{
				trailerObj=genericDAO.getById(Vehicle.class,Long.parseLong(typeValue));
				if(trailerObj!=null)
				query.append(" and obj.trailer='").append(trailerObj.getId()).append("'");
			}
			if(typeKey.equalsIgnoreCase("driver"))
			{				
				criti.clear();
				criti.put("fullName",typeValue);				
				driverObj=genericDAO.getByCriteria(Driver.class, criti);
				if(driverObj!=null)
				query.append(" and obj.driver='").append(driverObj.getId()).append("'");
				query.append(" order by vehicle asc,companyLocation asc,terminal asc,loadDate asc, unloadDate desc ");
			}			
			
			
			
			List<Ticket> filteredTickets=genericDAO.executeSimpleQuery(query.toString());
			String dateRanges="";
			String unitIds="";
			HashSet<String> dates = null;
			String tempVehicle = "";
			String tempCompany = "";
			String tempTerminal ="";
			Date tempLoadDate = null;
			Date tempUnloadDate = null;
			HashSet<String> tempcompany=null;
			HashSet<String> tempDriver=null;
			HashSet<String> tempterminal=null;			
			Map map = new HashMap();
			for(Ticket ticket : filteredTickets) {	
				
				String trckIDs = "";
				Vehicle vehicle = genericDAO.getById(Vehicle.class,ticket.getVehicle().getId());
				map.clear();
				map.put("unit",vehicle.getUnit());
				
				List<Vehicle> trucks = genericDAO.findByCriteria(Vehicle.class,map);
				
				if(trucks.size() > 0 && trucks!=null ){						
					for(Vehicle vehs: trucks ){							
					  if(trckIDs.equals("")){
						  trckIDs = vehs.getId().toString();
					  }
					  else{
						  trckIDs = trckIDs+","+vehs.getId();
					  }  
					}
				}
				
				
				StringBuffer fuellogQuery = new StringBuffer("");
				
				
				if(typeKey.equalsIgnoreCase("company")) {
					
					if(!tempVehicle.equals(ticket.getVehicle().getId().toString()) || !tempTerminal.equals(ticket.getTerminal().getId().toString())){				
						
						 dates = new HashSet<String>();
						 tempVehicle = ticket.getVehicle().getId().toString();
						 tempTerminal = ticket.getTerminal().getId().toString();
						 tempLoadDate = ticket.getLoadDate();
						 tempUnloadDate = ticket.getUnloadDate();
						 tempcompany = new HashSet<String>();
						 tempcompany.add(ticket.getCompanyLocation().getId().toString());
						 tempDriver = new HashSet<String>();
						 tempDriver.add( ticket.getDriver().getId().toString());
						 tempterminal = new HashSet<String>();
						 tempterminal.add(ticket.getTerminal().getId().toString());
						 
						 int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
						 for (int i=0; i < days; i++) {
							    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
							    dates.add(df.format(d.toDate()));
							    
						 }
						 dates.add(ticket.getLoadDate().toString());
						 dates.add(ticket.getUnloadDate().toString());
						 
						 String transferDateFrom = mysqldf.format(ticket.getLoadDate());
						 String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
					
						 fuellogQuery.append("select obj from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
					//if(typeKey.equalsIgnoreCase("company"))
					//{
							fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
							fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
							fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
							
							//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
					//}     
							List<FuelLog> fs =genericDAO.executeSimpleQuery(fuellogQuery.toString());	
							for(int i=0; i<fs.size();i++){
								fsAll.add(fs.get(i));
							}
					/*if(typeKey.equalsIgnoreCase("terminal"))
					{
						tollquery.append(" and obj.terminal='").append(terminalObj.getId()).append("'");
						tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
					}
					if(typeKey.equalsIgnoreCase("truck"))
					{
							tollquery.append(" and obj.plateNumber='").append(truckObj.getId()).append("'");
					}
					if(typeKey.equalsIgnoreCase("trailer"))
					{
							tollquery.append(" and obj.trailer='").append(trailerObj.getId()).append("'");
					}
					if(typeKey.equalsIgnoreCase("driver"))
					{				
						tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
					}*/
				}
				else{
					
					if((ticket.getLoadDate().after(tempLoadDate) || ticket.getLoadDate().equals(tempLoadDate)) && (ticket.getUnloadDate().before(tempUnloadDate)|| ticket.getUnloadDate().equals(tempUnloadDate))){
						
								
						
						
					}
					else{
						
						Date tempDateVar =null;
						boolean valueset = false;
						tempLoadDate = 	ticket.getLoadDate();
						tempUnloadDate = ticket.getUnloadDate();
						
						tempcompany.add(ticket.getCompanyLocation().getId().toString());
						tempDriver.add(ticket.getDriver().getId().toString());
						tempterminal.add(ticket.getTerminal().getId().toString());
						 if(dates.contains(ticket.getLoadDate().toString())){
							 //do nothing						
						 }
						 else{
						   	if(!valueset){					   		
						    	valueset=true;					  
								tempDateVar = ticket.getLoadDate();
							}					   	
						    	dates.add(ticket.getLoadDate().toString());
						 } 
						 
						int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
						 for (int i=0; i < days; i++) {
							    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
							   
							    if(dates.contains(df.format(d.toDate()))){
							      //do nothing						    	
							    }
							    else{
							    	if(!valueset){
							    	valueset=true;						    	
							    	tempDateVar = d.toDate();
							    }
							    	dates.add(df.format(d.toDate()));
							    }
						 }
						 //dates.add(new LocalDate(ticket.getLoadDate()));
						
						if(tempDateVar!=null){
							String transferDateFrom = mysqldf.format(tempDateVar);					
							String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
						
							 fuellogQuery.append("select obj from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
								fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
								List<FuelLog> fs =genericDAO.executeSimpleQuery(fuellogQuery.toString());	
								for(int i=0; i<fs.size();i++){
									fsAll.add(fs.get(i));
								}
						}						
						else {
						  if(dates.contains(ticket.getUnloadDate().toString())){
							  //do nothing
						  }
						  else{
							  dates.add(ticket.getUnloadDate().toString());
							  String transferDateFrom = mysqldf.format(ticket.getUnloadDate());					
							  String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
							
							  fuellogQuery.append("select obj from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
								fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
								List<FuelLog> fs =genericDAO.executeSimpleQuery(fuellogQuery.toString());	
								for(int i=0; i<fs.size();i++){
									fsAll.add(fs.get(i));
								}
						  }
						}
					}
				}							
			
				}
				
				
				if(typeKey.equalsIgnoreCase("terminal")) {				
					
					if(!tempVehicle.equals(ticket.getVehicle().getId().toString()) || !tempCompany.equals(ticket.getCompanyLocation().getId().toString())   ){				
						
						 dates = new HashSet<String>();
						 tempVehicle = ticket.getVehicle().getId().toString();
						 tempCompany = ticket.getCompanyLocation().getId().toString();						
						 tempLoadDate = ticket.getLoadDate();
						 tempUnloadDate = ticket.getUnloadDate();
						 tempcompany = new HashSet<String>();
						 tempcompany.add(ticket.getCompanyLocation().getId().toString());
						 tempDriver = new HashSet<String>();
						 tempDriver.add( ticket.getDriver().getId().toString());
						 tempterminal = new HashSet<String>();
						 tempterminal.add(ticket.getTerminal().getId().toString());
						 
						 int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
						 for (int i=0; i < days; i++) {
							    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
							    dates.add(df.format(d.toDate()));
							    
						 }
						 dates.add(ticket.getLoadDate().toString());
						 dates.add(ticket.getUnloadDate().toString());
						 
						 String transferDateFrom = mysqldf.format(ticket.getLoadDate());
						 String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
					
						 fuellogQuery.append("select obj from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
					//if(typeKey.equalsIgnoreCase("company"))
					//{
							fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
							fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
							fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
							
							//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
					//}     
							List<FuelLog> fs =genericDAO.executeSimpleQuery(fuellogQuery.toString());	
							for(int i=0; i<fs.size();i++){
								fsAll.add(fs.get(i));
							}
					/*if(typeKey.equalsIgnoreCase("terminal"))
					{
						tollquery.append(" and obj.terminal='").append(terminalObj.getId()).append("'");
						tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
					}
					if(typeKey.equalsIgnoreCase("truck"))
					{
							tollquery.append(" and obj.plateNumber='").append(truckObj.getId()).append("'");
					}
					if(typeKey.equalsIgnoreCase("trailer"))
					{
							tollquery.append(" and obj.trailer='").append(trailerObj.getId()).append("'");
					}
					if(typeKey.equalsIgnoreCase("driver"))
					{				
						tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
					}*/
				}
				else{
					
					if((ticket.getLoadDate().after(tempLoadDate) || ticket.getLoadDate().equals(tempLoadDate)) && (ticket.getUnloadDate().before(tempUnloadDate)|| ticket.getUnloadDate().equals(tempUnloadDate))){
						
								
						
						
					}
					else{
						
						Date tempDateVar =null;
						boolean valueset = false;
						tempLoadDate = 	ticket.getLoadDate();
						tempUnloadDate = ticket.getUnloadDate();
						
						tempcompany.add(ticket.getCompanyLocation().getId().toString());
						tempDriver.add(ticket.getDriver().getId().toString());
						tempterminal.add(ticket.getTerminal().getId().toString());
						 if(dates.contains(ticket.getLoadDate().toString())){
							 //do nothing						
						 }
						 else{
						   	if(!valueset){					   		
						    	valueset=true;					  
								tempDateVar = ticket.getLoadDate();
							}					   	
						    	dates.add(ticket.getLoadDate().toString());
						 } 
						 
						int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
						 for (int i=0; i < days; i++) {
							    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
							   
							    if(dates.contains(df.format(d.toDate()))){
							      //do nothing						    	
							    }
							    else{
							    	if(!valueset){
							    	valueset=true;						    	
							    	tempDateVar = d.toDate();
							    }
							    	dates.add(df.format(d.toDate()));
							    }
						 }
						 //dates.add(new LocalDate(ticket.getLoadDate()));
						
						if(tempDateVar!=null){
							String transferDateFrom = mysqldf.format(tempDateVar);					
							String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
						
							 fuellogQuery.append("select obj from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
								fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
								List<FuelLog> fs =genericDAO.executeSimpleQuery(fuellogQuery.toString());	
								for(int i=0; i<fs.size();i++){
									fsAll.add(fs.get(i));
								}
						}						
						else {
						  if(dates.contains(ticket.getUnloadDate().toString())){
							  //do nothing
						  }
						  else{
							  dates.add(ticket.getUnloadDate().toString());
							  String transferDateFrom = mysqldf.format(ticket.getUnloadDate());					
							  String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
							
							  fuellogQuery.append("select obj from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
								fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
								List<FuelLog> fs =genericDAO.executeSimpleQuery(fuellogQuery.toString());	
								for(int i=0; i<fs.size();i++){
									fsAll.add(fs.get(i));
								}
						  }
						}
					}
				}							
			
					
				}
				
				if(typeKey.equalsIgnoreCase("truck")) {
					
					
					
					if(!tempCompany.equals(ticket.getCompanyLocation().getId().toString()) || !tempTerminal.equals(ticket.getTerminal().getId().toString())){				
						
						 dates = new HashSet<String>();
						 tempVehicle = ticket.getVehicle().getId().toString();
						 tempCompany = ticket.getCompanyLocation().getId().toString();
						 tempTerminal = ticket.getTerminal().getId().toString();
						 tempLoadDate = ticket.getLoadDate();
						 tempUnloadDate = ticket.getUnloadDate();
						 tempcompany = new HashSet<String>();
						 tempcompany.add(ticket.getCompanyLocation().getId().toString());
						 tempDriver = new HashSet<String>();
						 tempDriver.add( ticket.getDriver().getId().toString());
						 tempterminal = new HashSet<String>();
						 tempterminal.add(ticket.getTerminal().getId().toString());
						 
						 int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
						 for (int i=0; i < days; i++) {
							    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
							    dates.add(df.format(d.toDate()));
							    
						 }
						 dates.add(ticket.getLoadDate().toString());
						 dates.add(ticket.getUnloadDate().toString());
						 
						 String transferDateFrom = mysqldf.format(ticket.getLoadDate());
						 String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
					
						 fuellogQuery.append("select obj from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
					//if(typeKey.equalsIgnoreCase("company"))
					//{
							fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
							fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
							fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
							
							//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
					//}     
							List<FuelLog> fs =genericDAO.executeSimpleQuery(fuellogQuery.toString());	
							for(int i=0; i<fs.size();i++){
								fsAll.add(fs.get(i));
							}
					/*if(typeKey.equalsIgnoreCase("terminal"))
					{
						tollquery.append(" and obj.terminal='").append(terminalObj.getId()).append("'");
						tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
					}
					if(typeKey.equalsIgnoreCase("truck"))
					{
							tollquery.append(" and obj.plateNumber='").append(truckObj.getId()).append("'");
					}
					if(typeKey.equalsIgnoreCase("trailer"))
					{
							tollquery.append(" and obj.trailer='").append(trailerObj.getId()).append("'");
					}
					if(typeKey.equalsIgnoreCase("driver"))
					{				
						tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
					}*/
				}
				else{
					
					if((ticket.getLoadDate().after(tempLoadDate) || ticket.getLoadDate().equals(tempLoadDate)) && (ticket.getUnloadDate().before(tempUnloadDate)|| ticket.getUnloadDate().equals(tempUnloadDate))){
						
								
						
						
					}
					else{
						
						Date tempDateVar =null;
						boolean valueset = false;
						tempLoadDate = 	ticket.getLoadDate();
						tempUnloadDate = ticket.getUnloadDate();
						
						tempcompany.add(ticket.getCompanyLocation().getId().toString());
						tempDriver.add(ticket.getDriver().getId().toString());
						tempterminal.add(ticket.getTerminal().getId().toString());
						 if(dates.contains(ticket.getLoadDate().toString())){
							 //do nothing						
						 }
						 else{
						   	if(!valueset){					   		
						    	valueset=true;					  
								tempDateVar = ticket.getLoadDate();
							}					   	
						    	dates.add(ticket.getLoadDate().toString());
						 } 
						 
						int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
						 for (int i=0; i < days; i++) {
							    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
							   
							    if(dates.contains(df.format(d.toDate()))){
							      //do nothing						    	
							    }
							    else{
							    	if(!valueset){
							    	valueset=true;						    	
							    	tempDateVar = d.toDate();
							    }
							    	dates.add(df.format(d.toDate()));
							    }
						 }
						 //dates.add(new LocalDate(ticket.getLoadDate()));
						
						if(tempDateVar!=null){
							String transferDateFrom = mysqldf.format(tempDateVar);					
							String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
						
							 fuellogQuery.append("select obj from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
								fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
								List<FuelLog> fs =genericDAO.executeSimpleQuery(fuellogQuery.toString());	
								for(int i=0; i<fs.size();i++){
									fsAll.add(fs.get(i));
								}
						}						
						else {
						  if(dates.contains(ticket.getUnloadDate().toString())){
							  //do nothing
						  }
						  else{
							  dates.add(ticket.getUnloadDate().toString());
							  String transferDateFrom = mysqldf.format(ticket.getUnloadDate());					
							  String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
							
							  fuellogQuery.append("select obj from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
								fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								//fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
								List<FuelLog> fs =genericDAO.executeSimpleQuery(fuellogQuery.toString());	
								for(int i=0; i<fs.size();i++){
									fsAll.add(fs.get(i));
								}
						  }
						}
					}
				}							
			
				}
				
				
				if(typeKey.equalsIgnoreCase("driver")) {				
					
					if(!tempVehicle.equals(ticket.getVehicle().getId().toString()) || !tempCompany.equals(ticket.getCompanyLocation().getId().toString()) || !tempTerminal.equals(ticket.getTerminal().getId().toString())){				
						
						 dates = new HashSet<String>();
						 tempVehicle = ticket.getVehicle().getId().toString();
						 tempCompany = ticket.getCompanyLocation().getId().toString();
						 tempTerminal = ticket.getTerminal().getId().toString();
						 tempLoadDate = ticket.getLoadDate();
						 tempUnloadDate = ticket.getUnloadDate();
						 tempcompany = new HashSet<String>();
						 tempcompany.add(ticket.getCompanyLocation().getId().toString());
						 tempDriver = new HashSet<String>();
						 tempDriver.add( ticket.getDriver().getId().toString());
						 tempterminal = new HashSet<String>();
						 tempterminal.add(ticket.getTerminal().getId().toString());
						 
						 int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
						 for (int i=0; i < days; i++) {
							    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
							    dates.add(df.format(d.toDate()));
							    
						 }
						 dates.add(ticket.getLoadDate().toString());
						 dates.add(ticket.getUnloadDate().toString());
						 
						 String transferDateFrom = mysqldf.format(ticket.getLoadDate());
						 String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
					
						 fuellogQuery.append("select obj from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
					//if(typeKey.equalsIgnoreCase("company"))
					//{
							fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
							fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
							fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
						
							fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
					//}     
							List<FuelLog> fs =genericDAO.executeSimpleQuery(fuellogQuery.toString());	
							for(int i=0; i<fs.size();i++){
								fsAll.add(fs.get(i));
							}
					/*if(typeKey.equalsIgnoreCase("terminal"))
					{
						tollquery.append(" and obj.terminal='").append(terminalObj.getId()).append("'");
						tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
					}
					if(typeKey.equalsIgnoreCase("truck"))
					{
							tollquery.append(" and obj.plateNumber='").append(truckObj.getId()).append("'");
					}
					if(typeKey.equalsIgnoreCase("trailer"))
					{
							tollquery.append(" and obj.trailer='").append(trailerObj.getId()).append("'");
					}
					if(typeKey.equalsIgnoreCase("driver"))
					{				
						tollquery.append(" and obj.plateNumber in (").append(unitIds).append(")");
					}*/
				}
				else{
					
					if((ticket.getLoadDate().after(tempLoadDate) || ticket.getLoadDate().equals(tempLoadDate)) && (ticket.getUnloadDate().before(tempUnloadDate)|| ticket.getUnloadDate().equals(tempUnloadDate))){
						
								
						
						
					}
					else{
						
						Date tempDateVar =null;
						boolean valueset = false;
						tempLoadDate = 	ticket.getLoadDate();
						tempUnloadDate = ticket.getUnloadDate();
						
						tempcompany.add(ticket.getCompanyLocation().getId().toString());
						tempDriver.add(ticket.getDriver().getId().toString());
						tempterminal.add(ticket.getTerminal().getId().toString());
						 if(dates.contains(ticket.getLoadDate().toString())){
							 //do nothing						
						 }
						 else{
						   	if(!valueset){					   		
						    	valueset=true;					  
								tempDateVar = ticket.getLoadDate();
							}					   	
						    	dates.add(ticket.getLoadDate().toString());
						 } 
						 
						int days = Days.daysBetween(new LocalDate(ticket.getLoadDate()),new LocalDate(ticket.getUnloadDate())).getDays();					
						 for (int i=0; i < days; i++) {
							    LocalDate d = new LocalDate(ticket.getLoadDate()).withFieldAdded(DurationFieldType.days(), i);					   
							   
							    if(dates.contains(df.format(d.toDate()))){
							      //do nothing						    	
							    }
							    else{
							    	if(!valueset){
							    	valueset=true;						    	
							    	tempDateVar = d.toDate();
							    }
							    	dates.add(df.format(d.toDate()));
							    }
						 }
						 //dates.add(new LocalDate(ticket.getLoadDate()));
						
						if(tempDateVar!=null){
							String transferDateFrom = mysqldf.format(tempDateVar);					
							String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
						
							 fuellogQuery.append("select obj from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
								fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
								List<FuelLog> fs =genericDAO.executeSimpleQuery(fuellogQuery.toString());	
								for(int i=0; i<fs.size();i++){
									fsAll.add(fs.get(i));
								}
						}						
						else {
						  if(dates.contains(ticket.getUnloadDate().toString())){
							  //do nothing
						  }
						  else{
							  dates.add(ticket.getUnloadDate().toString());
							  String transferDateFrom = mysqldf.format(ticket.getUnloadDate());					
							  String transferDateTo = mysqldf.format(ticket.getUnloadDate())	; 
							
							  fuellogQuery.append("select obj from FuelLog obj where obj.transactiondate >='"+transferDateFrom+" 00:00:00' and obj.transactiondate <='"
								+ transferDateTo
								+ " 23:59:59'");
						//if(typeKey.equalsIgnoreCase("company"))
						//{
								fuellogQuery.append(" and obj.company='").append(ticket.getCompanyLocation().getId()).append("'");
								fuellogQuery.append(" and obj.unit in (").append(trckIDs).append(")");
								fuellogQuery.append(" and obj.terminal in (").append(ticket.getTerminal().getId()).append(")");
								fuellogQuery.append(" and obj.driversid in (").append(ticket.getDriver().getId()).append(")");
							
								List<FuelLog> fs =genericDAO.executeSimpleQuery(fuellogQuery.toString());	
								for(int i=0; i<fs.size();i++){
									fsAll.add(fs.get(i));
								}
						  }
						}
					}
				}							
			
				}
										
		}
			
			
			
			/*StringBuffer fuellogQuery = new StringBuffer("");						
			fuellogQuery.append("select obj from FuelLog obj where obj.transactiondate in ("
						+ dateRanges
						+ ")");*/
			/*if(typeKey.equalsIgnoreCase("company"))
			{				
				criti.clear();
				criti.put("name",typeValue);
				//Location locObj=genericDAO.getByCriteria(Location.class, criti);
				if(locObj!=null)
					fuellogQuery.append(" and obj.company='").append(locObj.getId()).append("'");
				fuellogQuery.append(" and obj.unit in (").append(unitIds).append(")");
			}*/			
			/*if(typeKey.equalsIgnoreCase("terminal"))
			{
				criti.clear();
				criti.put("name",typeValue);
				//Location terminalObj=genericDAO.getByCriteria(Location.class, criti);
				if(terminalObj!=null)
					fuellogQuery.append(" and obj.terminal='").append(terminalObj.getId()).append("'");
				fuellogQuery.append(" and obj.unit in (").append(unitIds).append(")");
			}*/
			/*if(typeKey.equalsIgnoreCase("truck"))
			{
				//Vehicle truckObj=genericDAO.getById(Vehicle.class,Long.parseLong(typeValue));
				if(truckObj!=null)
					fuellogQuery.append(" and obj.unit='").append(truckObj.getId()).append("'");
			}
			if(typeKey.equalsIgnoreCase("trailer"))
			{
				//Vehicle trailerObj=genericDAO.getById(Vehicle.class,Long.parseLong(typeValue));
				if(trailerObj!=null)
					fuellogQuery.append(" and obj.trailer='").append(trailerObj.getId()).append("'");
			}
			if(typeKey.equalsIgnoreCase("driver"))
			{				
				criti.clear();
				criti.put("fullName",typeValue);				
				//Driver driverObj=genericDAO.getByCriteria(Driver.class, criti);
				if(driverObj!=null)
					fuellogQuery.append(" and obj.driversid='").append(driverObj.getId()).append("'");
			}*/
			
			//List<FuelLog> fs =genericDAO.executeSimpleQuery(fuellogQuery.toString());
			
			
			List<FuelLog> summarys = new ArrayList<FuelLog>();
			FuelLogReportWrapper wrapper = new FuelLogReportWrapper();
			wrapper.setFuellog(summarys);

			long totalColumn = 0;
			double totalGallons = 0.0;
			double totalFees = 0.0;
			double totaldiscounts = 0.0;
			double totalAmounts = 0.0;
			double totalGrossCost=0.0;

			Map<String, List<FuelLog>> fuellogMap = new HashMap<String, List<FuelLog>>();

			for (FuelLog fuelog : fsAll) {
				totalColumn = totalColumn + 1;
				if (fuelog != null) {
					FuelLog output = new FuelLog();
					output.setFuelVenders((fuelog.getFuelvendor() != null) ? fuelog
							.getFuelvendor().getName() : "");
					output.setCompanies((fuelog.getCompany() != null) ? fuelog
							.getCompany().getName() : "");
					output.setTerminals((fuelog.getTerminal() != null) ? fuelog
							.getTerminal().getName() : "");
					// output.setInvoicedDate(sdf.format(fuelog.getInvoiceDate()));
					output.setInvoicedDate((fuelog.getInvoiceDate() != null) ? sdf
							.format(fuelog.getInvoiceDate()) : "");
					output.setInvoiceNo((fuelog.getInvoiceNo() != null) ? fuelog
							.getInvoiceNo() : "");
					output.setUnits((fuelog.getUnit() != null) ? fuelog.getUnit()
							.getUnit().toString() : "");

					
					String fuelcardNum=null;
	                if(fuelog.getFuelcard()!=null){                                        
	                        String fuelcardnumber=fuelog.getFuelcard().getFuelcardNum();                                        
	                        
	                        if(fuelcardnumber.length()>8 && fuelcardnumber.length()<=12){
	                                String[] fuelcardnum = new String[10];
	                                        fuelcardnum[0]=fuelcardnumber.substring(0,4);
	                                        fuelcardnum[1]=fuelcardnumber.substring(4,8);
	                                        fuelcardnum[2]=fuelcardnumber.substring(8,fuelcardnumber.length());
	                                        fuelcardNum=fuelcardnum[0]+"-"+fuelcardnum[1]+"-"+fuelcardnum[2];                                                
	                        }
	                        
	                        else if(fuelcardnumber.length()>12){
	                                String[] fuelcardnum = new String[10];
	                                        fuelcardnum[0]=fuelcardnumber.substring(0,4);
	                                        fuelcardnum[1]=fuelcardnumber.substring(4,8);
	                                        fuelcardnum[2]=fuelcardnumber.substring(8,12);
	                                        fuelcardnum[3]=fuelcardnumber.substring(12,fuelcardnumber.length());
	                                        fuelcardNum=fuelcardnum[0]+"-"+fuelcardnum[1]+"-"+fuelcardnum[2]+"-"+fuelcardnum[3];                                                
	                        }
	                        else
	                        {
	                                fuelcardNum=fuelcardnumber;
	                        }  
	                }				
					
					// output.setDrivers((fuelog.getDriverFname()!=null)?fuelog.getDriverFname().getFullName():"");
					output.setDrivers((fuelog.getDriversid() != null) ? fuelog
							.getDriversid().getFullName() : "");
					// billing.setDestination((ticket.getDestination()!=null)?ticket.getDestination().getName():"");
					/*
					 * output.setFuelCardNumbers(fuelog.getFuelCardNumber().toString(
					 * ));
					 */
					output.setFuelCardNumbers((fuelog.getFuelcard() != null) ? fuelcardNum : "");
					/*
					 * output.setFuelCardNumbers((fuelog.getFuelCardNumber()!=null)?
					 * fuelog.getFuelCardNumber():"");
					 */
					/* output.setFuelCardNumber((fuelog.getFuelCardNumber())); */// added
																					// today

					// output.setFueltype(fuelog.getFueltype());

					output.setFueltype((fuelog.getFueltype() != null) ? fuelog
							.getFueltype() : "");

					output.setCity((fuelog.getCity() != null) ? fuelog.getCity()
							: "");
					output.setStates((fuelog.getState() != null) ? fuelog
							.getState().getName() : "");
					output.setTransactiontime((fuelog.getTransactiontime() != null) ? fuelog
							.getTransactiontime() : "");
					output.setTransactionsDate((fuelog.getTransactiondate() != null) ? sdf
							.format(fuelog.getTransactiondate()) : "");
					output.setGallons((fuelog.getGallons() != null) ? fuelog
							.getGallons() : 0.0);
					// output.setGallons(fuelog.getGallons());
					output.setUnitprice((fuelog.getUnitprice() != null) ? fuelog
							.getUnitprice() : 0.0);
					
					output.setGrosscost((fuelog.getGrosscost() !=null) ? fuelog.getGrosscost(): 0.0);
					output.setFees((fuelog.getFees() != null) ? fuelog.getFees()
							: 0.0);
					output.setDiscounts((fuelog.getDiscounts() != null) ? fuelog
							.getDiscounts() : 0.0);
					output.setAmount((fuelog.getAmount() != null) ? fuelog
							.getAmount() : 0.0);

					if (fuelog.getGallons() != null)
						totalGallons += fuelog.getGallons();
					if(fuelog.getGrosscost() != null)
						totalGrossCost+=fuelog.getGrosscost();
					if (fuelog.getFees() != null)
						totalFees += fuelog.getFees();
					if (fuelog.getDiscounts() != null)
						totaldiscounts += fuelog.getDiscounts();
					if (fuelog.getAmount() != null)
						totalAmounts += fuelog.getAmount();

					summarys.add(output);

				}

			}
	        
			totalAmounts = MathUtil.roundUp(totalAmounts, 2);
			totaldiscounts = MathUtil.roundUp(totaldiscounts, 2);
			totalFees = MathUtil.roundUp(totalFees, 2);
			totalGallons = MathUtil.roundUp(totalGallons, 3);
			totalGrossCost=MathUtil.roundUp(totalGrossCost, 2);
			wrapper.setTotalAmounts(totalAmounts);
			wrapper.setTotaldiscounts(totaldiscounts);
			wrapper.setTotalFees(totalFees);
			wrapper.setTotalGallons(totalGallons);
			wrapper.setTotalGrossCost(totalGrossCost);
			//wrapper.setTotalColumn(totalColumn);
			wrapper.setTotalColumn(fsAll.size());
			
			//Map<String,Object> data = new HashMap<String,Object>();
			Map<String,Object> params = new HashMap<String,Object>();		 
			params.put("totalAmounts",wrapper.getTotalAmounts());
			params.put("totaldiscounts", wrapper.getTotaldiscounts());
			params.put("totalFees", wrapper.getTotalFees());
			params.put("totalGallons",wrapper.getTotalGallons());
			params.put("totalColumn",wrapper.getTotalColumn());
			params.put("totalGrossCost",wrapper.getTotalGrossCost());
			/*data.put("data", wrapper.getFuellog());
			data.put("params",params);*/
			try{				
				String	type = "csv";
				response.setHeader("Content-Disposition",
							"attachment;filename= fuellogReport." + type);
				
				response.setContentType(MimeUtil.getContentType(type));
				ByteArrayOutputStream out = new ByteArrayOutputStream();
				out = dynamicReportService.generateStaticReport("fuellogReport"+"csv",
							(List)wrapper.getFuellog(), params, type, request);
				
			
				out.writeTo(response.getOutputStream());
				out.close();
				return null;
			} catch (Exception e) {
				e.printStackTrace();
				log.warn("Unable to create file :" + e);
				request.getSession().setAttribute("errors", e.getMessage());
				return "report.error";
			}
	}
}
